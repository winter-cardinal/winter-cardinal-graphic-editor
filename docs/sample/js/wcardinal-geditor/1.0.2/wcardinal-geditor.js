/*
 WinterCardinal Graphic Editor v1.0.2
 Copyright (C) TOSHIBA Coorporation
 SPDX-License-Identifier: Apache-2.0

 Material Design icons by Google
 Apache license version 2.0.
*/
(function (wcardinalUi, pixi_js) {
  'use strict';

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol */

  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
  };

  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  var ECommandComposition = /** @class */ (function (_super) {
      __extends(ECommandComposition, _super);
      function ECommandComposition(commands, selection) {
          var _this = _super.call(this) || this;
          _this._commands = commands;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandComposition.prototype, "commands", {
          get: function () {
              return this._commands;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandComposition.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandComposition.prototype.execute = function () {
          return true;
      };
      ECommandComposition.prototype.redo = function () {
          var selection = this._selection;
          var commands = this._commands;
          selection.lock();
          for (var i = 0, imax = commands.length; i < imax; ++i) {
              commands[i].redo();
          }
          selection.unlock();
          return true;
      };
      ECommandComposition.prototype.undo = function () {
          var selection = this._selection;
          selection.lock();
          var commands = this._commands;
          for (var i = commands.length - 1; 0 <= i; --i) {
              commands[i].undo();
          }
          selection.unlock();
          return true;
      };
      ECommandComposition.prototype.destroy = function () {
          var commands = this._commands;
          for (var i = 0, imax = commands.length; i < imax; ++i) {
              commands[i].destroy();
          }
      };
      return ECommandComposition;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentAll = /** @class */ (function (_super) {
      __extends(ECommandDocumentAll, _super);
      function ECommandDocumentAll(diagram, canvas, name, label, width, height, category, summary, description, backgroundColor, backgroundAlpha) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._name = name;
          _this._label = label;
          _this._width = width;
          _this._height = height;
          _this._category = category;
          _this._summary = summary;
          _this._description = description;
          _this._backgroundColor = backgroundColor;
          _this._backgroundAlpha = backgroundAlpha;
          return _this;
      }
      Object.defineProperty(ECommandDocumentAll.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "name", {
          get: function () {
              return this._name;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "label", {
          get: function () {
              return this._label;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "width", {
          get: function () {
              return this._width;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "height", {
          get: function () {
              return this._height;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "category", {
          get: function () {
              return this._category;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "summary", {
          get: function () {
              return this._summary;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "description", {
          get: function () {
              return this._description;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "backgroundColor", {
          get: function () {
              return this._backgroundColor;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentAll.prototype, "backgroundAlpha", {
          get: function () {
              return this._backgroundAlpha;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentAll.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentAll.prototype.redo = function () {
          var canvas = this._canvas;
          var name = this._name;
          this._name = canvas.name;
          canvas.name = name;
          var label = this._label;
          this._label = canvas.label;
          canvas.label = label;
          var width = this._width;
          this._width = canvas.width;
          canvas.width = width;
          var height = this._height;
          this._height = canvas.height;
          canvas.height = height;
          var category = this._category;
          this._category = canvas.category;
          canvas.category = category;
          var summary = this._summary;
          this._summary = canvas.summary;
          canvas.summary = summary;
          var description = this._description;
          this._description = canvas.description;
          canvas.description = description;
          var backgroundColor = this._backgroundColor;
          var backgroundAlpha = this._backgroundAlpha;
          var state = new wcardinalUi.DBaseStateSetImpl();
          var background = canvas.background;
          this._backgroundColor = background.getColor(state);
          this._backgroundAlpha = background.getAlpha(state);
          background.color = backgroundColor;
          background.alpha = backgroundAlpha;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentAll.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentAll;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentBackground = /** @class */ (function (_super) {
      __extends(ECommandDocumentBackground, _super);
      function ECommandDocumentBackground(diagram, color, alpha) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._color = color;
          _this._alpha = alpha;
          return _this;
      }
      Object.defineProperty(ECommandDocumentBackground.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentBackground.prototype, "color", {
          get: function () {
              return this._color;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentBackground.prototype, "alpha", {
          get: function () {
              return this._alpha;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentBackground.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentBackground.prototype.redo = function () {
          var canvas = this._diagram.canvas;
          if (canvas != null) {
              var background = canvas.background;
              var color = this._color;
              var alpha = this._alpha;
              var state = new wcardinalUi.DBaseStateSetImpl();
              this._color = background.getColor(state);
              this._alpha = background.getAlpha(state);
              background.color = color;
              background.alpha = alpha;
              this._diagram.emit("change", this._diagram);
          }
          return true;
      };
      ECommandDocumentBackground.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentBackground;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentCategory = /** @class */ (function (_super) {
      __extends(ECommandDocumentCategory, _super);
      function ECommandDocumentCategory(diagram, canvas, category) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._category = category;
          return _this;
      }
      Object.defineProperty(ECommandDocumentCategory.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentCategory.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentCategory.prototype, "category", {
          get: function () {
              return this._category;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentCategory.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentCategory.prototype.redo = function () {
          var canvas = this._canvas;
          var category = this._category;
          this._category = canvas.category;
          canvas.category = category;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentCategory.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentCategory;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentCreate = /** @class */ (function (_super) {
      __extends(ECommandDocumentCreate, _super);
      function ECommandDocumentCreate(diagram, canvas) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          return _this;
      }
      Object.defineProperty(ECommandDocumentCreate.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentCreate.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentCreate.prototype.execute = function () {
          return true;
      };
      return ECommandDocumentCreate;
  }(wcardinalUi.DCommandCreate));

  var ECommandDocumentDescription = /** @class */ (function (_super) {
      __extends(ECommandDocumentDescription, _super);
      function ECommandDocumentDescription(diagram, canvas, description) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._description = description;
          return _this;
      }
      Object.defineProperty(ECommandDocumentDescription.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentDescription.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentDescription.prototype, "description", {
          get: function () {
              return this._description;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentDescription.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentDescription.prototype.redo = function () {
          var canvas = this._canvas;
          var description = this._description;
          this._description = canvas.description;
          canvas.description = description;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentDescription.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentDescription;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentHeight = /** @class */ (function (_super) {
      __extends(ECommandDocumentHeight, _super);
      function ECommandDocumentHeight(diagram, canvas, height) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._height = height;
          return _this;
      }
      Object.defineProperty(ECommandDocumentHeight.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentHeight.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentHeight.prototype, "height", {
          get: function () {
              return this._height;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentHeight.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentHeight.prototype.redo = function () {
          var canvas = this._canvas;
          var height = this._height;
          this._height = canvas.height;
          canvas.y = canvas.y + (canvas.height - height) * 0.5;
          canvas.height = height;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentHeight.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentHeight;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentLabel = /** @class */ (function (_super) {
      __extends(ECommandDocumentLabel, _super);
      function ECommandDocumentLabel(diagram, canvas, label) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._label = label;
          return _this;
      }
      Object.defineProperty(ECommandDocumentLabel.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentLabel.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentLabel.prototype, "label", {
          get: function () {
              return this._label;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentLabel.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentLabel.prototype.redo = function () {
          var canvas = this._canvas;
          var label = this._label;
          this._label = canvas.label;
          canvas.label = label;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentLabel.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentLabel;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentName = /** @class */ (function (_super) {
      __extends(ECommandDocumentName, _super);
      function ECommandDocumentName(diagram, canvas, name) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._name = name;
          return _this;
      }
      Object.defineProperty(ECommandDocumentName.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentName.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentName.prototype, "name", {
          get: function () {
              return this._name;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentName.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentName.prototype.redo = function () {
          var canvas = this._canvas;
          var name = this._name;
          this._name = canvas.name;
          canvas.name = name;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentName.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentName;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentOpen = /** @class */ (function (_super) {
      __extends(ECommandDocumentOpen, _super);
      function ECommandDocumentOpen(diagram, canvas) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          return _this;
      }
      Object.defineProperty(ECommandDocumentOpen.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentOpen.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentOpen.prototype.execute = function () {
          return true;
      };
      return ECommandDocumentOpen;
  }(wcardinalUi.DCommandCreate));

  var ECommandDocumentSnapBringForward = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapBringForward, _super);
      function ECommandDocumentSnapBringForward(snapper, index) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._index = index;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapBringForward.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapBringForward.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapBringForward.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapBringForward.prototype.redo = function () {
          var index = this._index;
          this._snapper.target.swap(index - 1, index);
          return true;
      };
      ECommandDocumentSnapBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapCreate = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapCreate, _super);
      function ECommandDocumentSnapCreate(snapper, target) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._target = target;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapCreate.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapCreate.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapCreate.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapCreate.prototype.redo = function () {
          this._snapper.target.add(this._target);
          return true;
      };
      ECommandDocumentSnapCreate.prototype.undo = function () {
          var target = this._snapper.target;
          target.remove(target.size - 1);
          return true;
      };
      return ECommandDocumentSnapCreate;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapDelete = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapDelete, _super);
      function ECommandDocumentSnapDelete(snapper, index, target) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._index = index;
          _this._target = target;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapDelete.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapDelete.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapDelete.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapDelete.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapDelete.prototype.redo = function () {
          this._snapper.target.remove(this._index);
          return true;
      };
      ECommandDocumentSnapDelete.prototype.undo = function () {
          this._snapper.target.add(this._target, this._index);
          return true;
      };
      return ECommandDocumentSnapDelete;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapGridSize = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapGridSize, _super);
      function ECommandDocumentSnapGridSize(snapper, size) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._size = size;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapGridSize.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapGridSize.prototype, "size", {
          get: function () {
              return this._size;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapGridSize.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapGridSize.prototype.redo = function () {
          var snapper = this._snapper;
          var size = this._size;
          this._size = snapper.grid.size;
          snapper.grid.size = size;
          return true;
      };
      ECommandDocumentSnapGridSize.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapGridSize;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapGridToggleVisibility = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapGridToggleVisibility, _super);
      function ECommandDocumentSnapGridToggleVisibility(snapper) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapGridToggleVisibility.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapGridToggleVisibility.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapGridToggleVisibility.prototype.redo = function () {
          var grid = this._snapper.grid;
          grid.visible = !grid.visible;
          return true;
      };
      ECommandDocumentSnapGridToggleVisibility.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapGridToggleVisibility;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapGridToggle = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapGridToggle, _super);
      function ECommandDocumentSnapGridToggle(snapper) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapGridToggle.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapGridToggle.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapGridToggle.prototype.redo = function () {
          var grid = this._snapper.grid;
          grid.enable = !grid.enable;
          return true;
      };
      ECommandDocumentSnapGridToggle.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapGridToggle;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapReplace = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapReplace, _super);
      function ECommandDocumentSnapReplace(snapper, oldValue, newValue, list) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._index = snapper.target.values.indexOf(_this._oldValue);
          _this._list = list;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapReplace.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapReplace.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapReplace.prototype, "oldValue", {
          get: function () {
              return this._oldValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapReplace.prototype, "newValue", {
          get: function () {
              return this._newValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapReplace.prototype, "list", {
          get: function () {
              return this._list;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapReplace.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapReplace.prototype.redo = function () {
          var index = this._index;
          if (0 <= index) {
              var list = this._list;
              var newValue = this._newValue;
              var snapper = this._snapper;
              if (list.data.selection.contains(this._oldValue)) {
                  snapper.target.replace(index, newValue);
                  list.data.selection.clearAndAdd(newValue);
              }
              else {
                  snapper.target.replace(index, newValue);
              }
          }
          return true;
      };
      ECommandDocumentSnapReplace.prototype.undo = function () {
          var index = this._index;
          if (0 <= index) {
              var list = this._list;
              var oldValue = this._oldValue;
              var snapper = this._snapper;
              if (list.data.selection.contains(this._newValue)) {
                  snapper.target.replace(index, oldValue);
                  list.data.selection.clearAndAdd(oldValue);
              }
              else {
                  snapper.target.replace(index, oldValue);
              }
          }
          return true;
      };
      return ECommandDocumentSnapReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapSendBackward = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapSendBackward, _super);
      function ECommandDocumentSnapSendBackward(snapper, index) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          _this._index = index;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapSendBackward.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSnapSendBackward.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapSendBackward.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapSendBackward.prototype.redo = function () {
          var index = this._index;
          this._snapper.target.swap(index, index + 1);
          return true;
      };
      ECommandDocumentSnapSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapSendBackward;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapTargetToggleVisibility = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapTargetToggleVisibility, _super);
      function ECommandDocumentSnapTargetToggleVisibility(snapper) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapTargetToggleVisibility.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapTargetToggleVisibility.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapTargetToggleVisibility.prototype.redo = function () {
          var target = this._snapper.target;
          target.visible = !target.visible;
          return true;
      };
      ECommandDocumentSnapTargetToggleVisibility.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapTargetToggleVisibility;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapTargetToggle = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapTargetToggle, _super);
      function ECommandDocumentSnapTargetToggle(snapper) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapTargetToggle.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapTargetToggle.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapTargetToggle.prototype.redo = function () {
          var target = this._snapper.target;
          target.enable = !target.enable;
          return true;
      };
      ECommandDocumentSnapTargetToggle.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapTargetToggle;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSnapToggle = /** @class */ (function (_super) {
      __extends(ECommandDocumentSnapToggle, _super);
      function ECommandDocumentSnapToggle(snapper) {
          var _this = _super.call(this) || this;
          _this._snapper = snapper;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSnapToggle.prototype, "snapper", {
          get: function () {
              return this._snapper;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSnapToggle.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSnapToggle.prototype.redo = function () {
          var snapper = this._snapper;
          snapper.enable = !snapper.enable;
          return true;
      };
      ECommandDocumentSnapToggle.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSnapToggle;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentSummary = /** @class */ (function (_super) {
      __extends(ECommandDocumentSummary, _super);
      function ECommandDocumentSummary(diagram, canvas, summary) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._summary = summary;
          return _this;
      }
      Object.defineProperty(ECommandDocumentSummary.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSummary.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentSummary.prototype, "summary", {
          get: function () {
              return this._summary;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentSummary.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentSummary.prototype.redo = function () {
          var canvas = this._canvas;
          var summary = this._summary;
          this._summary = canvas.summary;
          canvas.summary = summary;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentSummary.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentSummary;
  }(wcardinalUi.DCommandBase));

  var ECommandDocumentWidth = /** @class */ (function (_super) {
      __extends(ECommandDocumentWidth, _super);
      function ECommandDocumentWidth(diagram, canvas, width) {
          var _this = _super.call(this) || this;
          _this._diagram = diagram;
          _this._canvas = canvas;
          _this._width = width;
          return _this;
      }
      Object.defineProperty(ECommandDocumentWidth.prototype, "diagram", {
          get: function () {
              return this._diagram;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentWidth.prototype, "canvas", {
          get: function () {
              return this._canvas;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandDocumentWidth.prototype, "width", {
          get: function () {
              return this._width;
          },
          enumerable: false,
          configurable: true
      });
      ECommandDocumentWidth.prototype.execute = function () {
          return this.redo();
      };
      ECommandDocumentWidth.prototype.redo = function () {
          var canvas = this._canvas;
          var width = this._width;
          this._width = canvas.width;
          canvas.x = canvas.x + (canvas.width - width) * 0.5;
          canvas.width = width;
          this._diagram.emit("change", this._diagram);
          return true;
      };
      ECommandDocumentWidth.prototype.undo = function () {
          return this.redo();
      };
      return ECommandDocumentWidth;
  }(wcardinalUi.DCommandBase));

  var ECommandLayerBringForward = /** @class */ (function (_super) {
      __extends(ECommandLayerBringForward, _super);
      function ECommandLayerBringForward(index, layerContainer) {
          var _this = _super.call(this) || this;
          _this._index = index;
          _this._layerContainer = layerContainer;
          return _this;
      }
      Object.defineProperty(ECommandLayerBringForward.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerBringForward.prototype, "layerContainer", {
          get: function () {
              return this._layerContainer;
          },
          enumerable: false,
          configurable: true
      });
      ECommandLayerBringForward.prototype.execute = function () {
          return this.redo();
      };
      ECommandLayerBringForward.prototype.redo = function () {
          var index = this._index;
          var layerContainer = this._layerContainer;
          var children = layerContainer.children;
          var tmp = children[index];
          children[index] = children[index + 1];
          children[index + 1] = tmp;
          layerContainer.onChildrenChange(index);
          layerContainer.emit("change", layerContainer);
          wcardinalUi.DApplications.update(layerContainer);
          return true;
      };
      ECommandLayerBringForward.prototype.undo = function () {
          this.redo();
          return true;
      };
      return ECommandLayerBringForward;
  }(wcardinalUi.DCommandBase));

  var EDialogLayerValueBackground = /** @class */ (function () {
      function EDialogLayerValueBackground(enable, color, alpha) {
          this.enable = enable;
          this.color = color;
          this.alpha = alpha;
      }
      EDialogLayerValueBackground.prototype.isEqual = function (target) {
          return (this.enable === target.enable &&
              this.color === target.color &&
              this.alpha === target.alpha);
      };
      EDialogLayerValueBackground.from = function (layer) {
          return new EDialogLayerValueBackground(layer.background.enable, layer.background.color, layer.background.alpha);
      };
      return EDialogLayerValueBackground;
  }());

  var EDialogLayerValue = /** @class */ (function () {
      function EDialogLayerValue(name, x, y, width, height, background, visible, interactive, gesture) {
          this.name = name;
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
          this.background = background;
          this.visible = visible;
          this.interactive = interactive;
          this.gesture = gesture;
      }
      EDialogLayerValue.prototype.isEqual = function (target) {
          return (this.name === target.name &&
              this.x === target.x &&
              this.y === target.y &&
              this.width === target.width &&
              this.height === target.height &&
              this.background.isEqual(target.background) &&
              this.visible === target.visible &&
              this.interactive === target.interactive &&
              this.gesture === target.gesture);
      };
      EDialogLayerValue.prototype.copyTo = function (layer) {
          layer.name = this.name;
          layer.position.set(this.x, this.y);
          layer.width = this.width;
          layer.height = this.height;
          layer.background.copy(this.background);
          var state = layer.state;
          state.lock();
          state.set(wcardinalUi.EShapeLayerState.INVISIBLE, !this.visible);
          state.set(wcardinalUi.EShapeLayerState.INTERACTIVE, this.interactive);
          var gesture = this.gesture;
          state.set(wcardinalUi.EShapeLayerState.DRAGGABLE, !!(gesture & wcardinalUi.EShapeActionValueGestureOperationType.DRAG));
          state.set(wcardinalUi.EShapeLayerState.PINCHABLE, !!(gesture & wcardinalUi.EShapeActionValueGestureOperationType.PINCH));
          state.unlock();
          return this;
      };
      EDialogLayerValue.from = function (layer) {
          var drag = layer.state.is(wcardinalUi.EShapeLayerState.DRAGGABLE)
              ? wcardinalUi.EShapeActionValueGestureOperationType.DRAG
              : wcardinalUi.EShapeActionValueGestureOperationType.NONE;
          var pinch = layer.state.is(wcardinalUi.EShapeLayerState.PINCHABLE)
              ? wcardinalUi.EShapeActionValueGestureOperationType.PINCH
              : wcardinalUi.EShapeActionValueGestureOperationType.NONE;
          var gesture = drag | pinch;
          return new EDialogLayerValue(layer.name, layer.position.x, layer.position.y, layer.width, layer.height, EDialogLayerValueBackground.from(layer), !layer.state.is(wcardinalUi.EShapeLayerState.INVISIBLE), layer.state.is(wcardinalUi.EShapeLayerState.INTERACTIVE), gesture);
      };
      return EDialogLayerValue;
  }());

  var ECommandLayerChange = /** @class */ (function (_super) {
      __extends(ECommandLayerChange, _super);
      function ECommandLayerChange(layer, value, layerContainer) {
          var _this = _super.call(this) || this;
          _this._layer = layer;
          _this._layerContainer = layerContainer;
          _this._oldValue = EDialogLayerValue.from(layer);
          _this._newValue = value;
          return _this;
      }
      Object.defineProperty(ECommandLayerChange.prototype, "layer", {
          get: function () {
              return this._layer;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerChange.prototype, "newValue", {
          get: function () {
              return this._newValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerChange.prototype, "oldValue", {
          get: function () {
              return this._oldValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerChange.prototype, "layerContainer", {
          get: function () {
              return this._layerContainer;
          },
          enumerable: false,
          configurable: true
      });
      ECommandLayerChange.prototype.execute = function () {
          return this.redo();
      };
      ECommandLayerChange.prototype.redo = function () {
          this._newValue.copyTo(this._layer);
          var layerContainer = this._layerContainer;
          layerContainer.emit("change", layerContainer);
          return true;
      };
      ECommandLayerChange.prototype.undo = function () {
          this._oldValue.copyTo(this._layer);
          var layerContainer = this._layerContainer;
          layerContainer.emit("change", layerContainer);
          return true;
      };
      return ECommandLayerChange;
  }(wcardinalUi.DCommandBase));

  var ECommandLayerCreate = /** @class */ (function (_super) {
      __extends(ECommandLayerCreate, _super);
      function ECommandLayerCreate(value, layerContainer, selection) {
          var _this = _super.call(this) || this;
          _this._value = value;
          _this._layerContainer = layerContainer;
          _this._layerActive = layerContainer.active;
          _this._layerCreated = null;
          _this._selection = selection;
          _this._selectionStored = null;
          return _this;
      }
      ECommandLayerCreate.prototype.newLayer = function (value, layerContainer) {
          var result = layerContainer.create(value.name, true);
          value.copyTo(result);
          return result;
      };
      Object.defineProperty(ECommandLayerCreate.prototype, "value", {
          get: function () {
              return this._value;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerCreate.prototype, "layerContainer", {
          get: function () {
              return this._layerContainer;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerCreate.prototype, "layerActive", {
          get: function () {
              return this._layerActive;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerCreate.prototype, "layerCreated", {
          get: function () {
              return this._layerCreated;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerCreate.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerCreate.prototype, "selectionStored", {
          get: function () {
              return this._selectionStored;
          },
          enumerable: false,
          configurable: true
      });
      ECommandLayerCreate.prototype.execute = function () {
          var selection = this._selection;
          if (!selection.isEmpty()) {
              this._selectionStored = selection.store();
              selection.clear();
          }
          else {
              this._selectionStored = null;
          }
          this._layerCreated = this.newLayer(this._value, this._layerContainer);
          this._layerCreated.reference += 1;
          return true;
      };
      ECommandLayerCreate.prototype.redo = function () {
          var selectionStored = this._selectionStored;
          if (selectionStored != null) {
              this._selection.clear();
          }
          var layerCreated = this._layerCreated;
          if (layerCreated != null) {
              this._layerContainer.attach(layerCreated, true);
          }
          return true;
      };
      ECommandLayerCreate.prototype.undo = function () {
          var layerCreated = this._layerCreated;
          if (layerCreated != null) {
              this._layerContainer.detach(layerCreated, this._layerActive);
          }
          var selectionStored = this._selectionStored;
          if (selectionStored != null) {
              this._selection.restore(selectionStored);
          }
          return true;
      };
      ECommandLayerCreate.prototype.destroy = function () {
          var layerCreated = this._layerCreated;
          if (layerCreated != null) {
              layerCreated.reference -= 1;
              if (layerCreated.parent == null && layerCreated.reference <= 0) {
                  layerCreated.destroy();
              }
          }
          this._layerActive = null;
      };
      return ECommandLayerCreate;
  }(wcardinalUi.DCommandBase));

  var ECommandLayerDelete = /** @class */ (function (_super) {
      __extends(ECommandLayerDelete, _super);
      function ECommandLayerDelete(layer, layerContainer, selection) {
          var _this = _super.call(this) || this;
          _this._layerContainer = layerContainer;
          _this._layerActive = layerContainer.active;
          _this._layer = layer;
          layer.reference += 1;
          _this._layerIndex = -1;
          _this._selection = selection;
          _this._selectionStored = null;
          return _this;
      }
      Object.defineProperty(ECommandLayerDelete.prototype, "layerContainer", {
          get: function () {
              return this._layerContainer;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerDelete.prototype, "layerActive", {
          get: function () {
              return this._layerActive;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerDelete.prototype, "layer", {
          get: function () {
              return this._layer;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerDelete.prototype, "layerIndex", {
          get: function () {
              return this._layerIndex;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerDelete.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerDelete.prototype, "selectionStored", {
          get: function () {
              return this._selectionStored;
          },
          enumerable: false,
          configurable: true
      });
      ECommandLayerDelete.prototype.execute = function () {
          var layer = this._layer;
          var layerContainer = this._layerContainer;
          var selection = this._selection;
          if (layer === layerContainer.active && !selection.isEmpty()) {
              this._selectionStored = selection.store();
              selection.clear();
          }
          else {
              this._selectionStored = null;
          }
          this._layerIndex = layerContainer.delete(layer, true);
          return true;
      };
      ECommandLayerDelete.prototype.redo = function () {
          if (this._selectionStored != null) {
              this._selection.clear();
          }
          this._layerContainer.delete(this._layer, true);
          return true;
      };
      ECommandLayerDelete.prototype.undo = function () {
          this._layerContainer.attachAt(this._layer, this._layerIndex, this._layer === this._layerActive);
          if (this._selectionStored != null) {
              this._selection.restore(this._selectionStored);
          }
          return true;
      };
      ECommandLayerDelete.prototype.destroy = function () {
          var layer = this._layer;
          layer.reference -= 1;
          if (layer.parent == null && layer.reference <= 0) {
              layer.destroy();
          }
          this._layerActive = null;
          this._selectionStored = null;
      };
      return ECommandLayerDelete;
  }(wcardinalUi.DCommandBase));

  var ECommandLayerSendBackward = /** @class */ (function (_super) {
      __extends(ECommandLayerSendBackward, _super);
      function ECommandLayerSendBackward(index, layerContainer) {
          var _this = _super.call(this) || this;
          _this._index = index;
          _this._layerContainer = layerContainer;
          return _this;
      }
      Object.defineProperty(ECommandLayerSendBackward.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandLayerSendBackward.prototype, "layerContainer", {
          get: function () {
              return this._layerContainer;
          },
          enumerable: false,
          configurable: true
      });
      ECommandLayerSendBackward.prototype.execute = function () {
          return this.redo();
      };
      ECommandLayerSendBackward.prototype.redo = function () {
          var index = this._index;
          var layerContainer = this._layerContainer;
          var children = layerContainer.children;
          var tmp = children[index];
          children[index] = children[index - 1];
          children[index - 1] = tmp;
          layerContainer.onChildrenChange(index);
          layerContainer.emit("change", layerContainer);
          wcardinalUi.DApplications.update(layerContainer);
          return true;
      };
      ECommandLayerSendBackward.prototype.undo = function () {
          this.redo();
          return true;
      };
      return ECommandLayerSendBackward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeActionValueAdd = /** @class */ (function (_super) {
      __extends(ECommandShapeActionValueAdd, _super);
      function ECommandShapeActionValueAdd(value, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._value = value;
          return _this;
      }
      Object.defineProperty(ECommandShapeActionValueAdd.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueAdd.prototype, "value", {
          get: function () {
              return this._value;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeActionValueAdd.prototype.execute = function () {
          return this.redo();
      };
      ECommandShapeActionValueAdd.prototype.redo = function () {
          var value = this._value;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].action.add(value);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueAdd.prototype.undo = function () {
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              shape.action.remove(shape.action.size() - 1);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeActionValueAdd;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeActionValueBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeActionValueBringForward, _super);
      function ECommandShapeActionValueBringForward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          _this._indices = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeActionValueBringForward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueBringForward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueBringForward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeActionValueBringForward.prototype.execute = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.action.indexOf(target);
              indices.push(index);
              if (0 < index) {
                  shape.action.swap(index - 1, index);
              }
          }
          this._indices = indices;
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueBringForward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 < index) {
                  shape.action.swap(index - 1, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeActionValueBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeActionValueRemove = /** @class */ (function (_super) {
      __extends(ECommandShapeActionValueRemove, _super);
      function ECommandShapeActionValueRemove(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          _this._indices = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeActionValueRemove.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueRemove.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueRemove.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeActionValueRemove.prototype.execute = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.action.indexOf(target);
              indices.push(index);
              if (0 <= index) {
                  shape.action.remove(index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueRemove.prototype.redo = function () {
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  shape.action.remove(index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueRemove.prototype.undo = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  shape.action.add(target, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeActionValueRemove;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeActionValueReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeActionValueReplace, _super);
      function ECommandShapeActionValueReplace(oldValue, newValue, selection, list) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._list = list;
          _this._indices = [];
          _this._oldValues = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "oldValue", {
          get: function () {
              return this._oldValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "newValue", {
          get: function () {
              return this._newValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "oldValues", {
          get: function () {
              return this._oldValues;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueReplace.prototype, "list", {
          get: function () {
              return this._list;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeActionValueReplace.prototype.execute = function () {
          var oldValue = this._oldValue;
          var newValue = this._newValue;
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.action.indexOf(oldValue);
              indices.push(index);
              if (0 <= index) {
                  oldValues.push(shape.action.get(index));
                  shape.action.set(index, newValue);
              }
              else {
                  oldValues.push(newValue);
              }
          }
          var list = this._list;
          if (list.data.selection.contains(oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueReplace.prototype.redo = function () {
          var newValue = this._newValue;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var index = indices[i];
              if (0 <= index) {
                  shapes[i].action.set(index, newValue);
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueReplace.prototype.undo = function () {
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var index = indices[i];
              if (0 <= index) {
                  shapes[i].action.set(index, oldValues[i]);
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._newValue)) {
              list.data.selection.clearAndAdd(this._oldValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeActionValueReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeActionValueSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeActionValueSendBackward, _super);
      function ECommandShapeActionValueSendBackward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var action = shape.action;
              var index = action.indexOf(target);
              indices.push(index);
              if (0 <= index && index < action.size() - 1) {
                  action.swap(index + 1, index);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeActionValueSendBackward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueSendBackward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeActionValueSendBackward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeActionValueSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeActionValueSendBackward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var action = shape.action;
              var index = indices[i];
              if (0 <= index && index < action.size() - 1) {
                  action.swap(index + 1, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeActionValueSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeActionValueSendBackward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeCreate = /** @class */ (function (_super) {
      __extends(ECommandShapeCreate, _super);
      function ECommandShapeCreate(shapes, parent, selection, select) {
          var _this = _super.call(this) || this;
          _this._shapes = shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].reference += 1;
          }
          _this._parent = parent;
          _this._selection = selection;
          _this._select = select;
          return _this;
      }
      Object.defineProperty(ECommandShapeCreate.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeCreate.prototype, "shapes", {
          get: function () {
              return this._shapes;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeCreate.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeCreate.prototype, "selectionStored", {
          get: function () {
              return this._selectionStored;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeCreate.prototype, "select", {
          get: function () {
              return this._select;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeCreate.prototype.execute = function () {
          var selection = this._selection;
          selection.lock();
          if (this._select) {
              this._selectionStored = selection.store();
              selection.clearAndAddAll(this._shapes);
          }
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeCreate.prototype.redo = function () {
          var shapes = this._shapes;
          var parent = this._parent;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].attach(parent);
          }
          var selection = this._selection;
          selection.lock();
          if (this._select) {
              selection.clearAndAddAll(shapes);
          }
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeCreate.prototype.undo = function () {
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].detach();
          }
          var selection = this._selection;
          var selectionStored = this._selectionStored;
          selection.lock();
          if (this._select && selectionStored != null) {
              selection.restore(selectionStored);
          }
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeCreate.prototype.destroy = function () {
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              shape.reference -= 1;
              if (shape.parent == null && shape.reference <= 0) {
                  shape.destroy();
              }
          }
      };
      return ECommandShapeCreate;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataMappingValueAdd = /** @class */ (function (_super) {
      __extends(ECommandShapeDataMappingValueAdd, _super);
      function ECommandShapeDataMappingValueAdd(value, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._value = value;
          return _this;
      }
      Object.defineProperty(ECommandShapeDataMappingValueAdd.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueAdd.prototype, "value", {
          get: function () {
              return this._value;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataMappingValueAdd.prototype.execute = function () {
          return this.redo();
      };
      ECommandShapeDataMappingValueAdd.prototype.redo = function () {
          var value = this._value;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  shape.data.mapping.add(value);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataMappingValueAdd.prototype.undo = function () {
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.remove(mapping.size() - 1);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataMappingValueAdd;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataMappingValueBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeDataMappingValueBringForward, _super);
      function ECommandShapeDataMappingValueBringForward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      var index = mapping.indexOf(target);
                      indices.push(index);
                      if (0 < index) {
                          mapping.swap(index - 1, index);
                      }
                  }
                  else {
                      indices.push(-1);
                  }
              }
              else {
                  indices.push(-1);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataMappingValueBringForward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueBringForward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueBringForward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataMappingValueBringForward.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataMappingValueBringForward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 < index) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.swap(index - 1, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataMappingValueBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeDataMappingValueBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataMappingValueRemove = /** @class */ (function (_super) {
      __extends(ECommandShapeDataMappingValueRemove, _super);
      function ECommandShapeDataMappingValueRemove(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      var index = mapping.indexOf(target);
                      indices.push(index);
                      if (0 <= index) {
                          mapping.remove(index);
                      }
                  }
                  else {
                      indices.push(-1);
                  }
              }
              else {
                  indices.push(-1);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataMappingValueRemove.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueRemove.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueRemove.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataMappingValueRemove.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataMappingValueRemove.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.remove(index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataMappingValueRemove.prototype.undo = function () {
          var target = this._target;
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.add(target, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataMappingValueRemove;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataMappingValueReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeDataMappingValueReplace, _super);
      function ECommandShapeDataMappingValueReplace(oldValue, newValue, selection, list) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._list = list;
          var indices = [];
          var oldValues = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      var index = mapping.indexOf(oldValue);
                      indices.push(index);
                      if (0 <= index) {
                          oldValues.push(mapping.get(index));
                          mapping.set(index, newValue);
                      }
                      else {
                          oldValues.push(newValue);
                      }
                  }
                  else {
                      indices.push(-1);
                      oldValues.push(newValue);
                  }
              }
              else {
                  indices.push(-1);
                  oldValues.push(newValue);
              }
          }
          _this._indices = indices;
          _this._oldValues = oldValues;
          if (list.data.selection.contains(oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "oldValue", {
          get: function () {
              return this._oldValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "newValue", {
          get: function () {
              return this._newValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "oldValues", {
          get: function () {
              return this._oldValues;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueReplace.prototype, "list", {
          get: function () {
              return this._list;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataMappingValueReplace.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataMappingValueReplace.prototype.redo = function () {
          var newValue = this._newValue;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.set(index, newValue);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataMappingValueReplace.prototype.undo = function () {
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      mapping.set(index, oldValues[i]);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._newValue)) {
              list.data.selection.clearAndAdd(this._oldValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataMappingValueReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataMappingValueSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeDataMappingValueSendBackward, _super);
      function ECommandShapeDataMappingValueSendBackward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.DATA_MAPPING)) {
                  var mapping = shape.data.getMapping();
                  if (mapping) {
                      var index = mapping.indexOf(target);
                      indices.push(index);
                      if (0 <= index && index < mapping.size() - 1) {
                          mapping.swap(index + 1, index);
                      }
                  }
                  else {
                      indices.push(-1);
                  }
              }
              else {
                  indices.push(-1);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataMappingValueSendBackward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueSendBackward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataMappingValueSendBackward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataMappingValueSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataMappingValueSendBackward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              var mapping = shape.data.getMapping();
              if (mapping && 0 <= index && index < mapping.size() - 1) {
                  mapping.swap(index + 1, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataMappingValueSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeDataMappingValueSendBackward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataValueAdd = /** @class */ (function (_super) {
      __extends(ECommandShapeDataValueAdd, _super);
      function ECommandShapeDataValueAdd(value, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._value = value;
          return _this;
      }
      Object.defineProperty(ECommandShapeDataValueAdd.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueAdd.prototype, "value", {
          get: function () {
              return this._value;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataValueAdd.prototype.execute = function () {
          return this.redo();
      };
      ECommandShapeDataValueAdd.prototype.redo = function () {
          var value = this._value;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].data.add(value);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataValueAdd.prototype.undo = function () {
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              shape.data.remove(shape.data.size() - 1);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataValueAdd;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataValueBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeDataValueBringForward, _super);
      function ECommandShapeDataValueBringForward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.data.indexOf(target);
              indices.push(index);
              if (0 < index) {
                  shape.data.swap(index - 1, index);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataValueBringForward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueBringForward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueBringForward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataValueBringForward.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataValueBringForward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 < index) {
                  shape.data.swap(index - 1, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataValueBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeDataValueBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataValueRemove = /** @class */ (function (_super) {
      __extends(ECommandShapeDataValueRemove, _super);
      function ECommandShapeDataValueRemove(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.data.indexOf(target);
              indices.push(index);
              if (0 <= index) {
                  shape.data.remove(index);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataValueRemove.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueRemove.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueRemove.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataValueRemove.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataValueRemove.prototype.redo = function () {
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  shape.data.remove(index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataValueRemove.prototype.undo = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = indices[i];
              if (0 <= index) {
                  shape.data.add(target, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataValueRemove;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataValueReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeDataValueReplace, _super);
      function ECommandShapeDataValueReplace(oldValue, newValue, selection, list) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._list = list;
          var indices = [];
          var oldValues = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var index = shape.data.indexOf(oldValue);
              indices.push(index);
              if (0 <= index) {
                  oldValues.push(shape.data.get(index));
                  shape.data.set(index, newValue);
              }
              else {
                  oldValues.push(newValue);
              }
          }
          _this._indices = indices;
          _this._oldValues = oldValues;
          if (list.data.selection.contains(oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "oldValue", {
          get: function () {
              return this._oldValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "newValue", {
          get: function () {
              return this._newValue;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "oldValues", {
          get: function () {
              return this._oldValues;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueReplace.prototype, "list", {
          get: function () {
              return this._list;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataValueReplace.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataValueReplace.prototype.redo = function () {
          var newValue = this._newValue;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var index = indices[i];
              if (0 <= index) {
                  shapes[i].data.set(index, newValue);
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataValueReplace.prototype.undo = function () {
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var index = indices[i];
              if (0 <= index) {
                  shapes[i].data.set(index, oldValues[i]);
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._newValue)) {
              list.data.selection.clearAndAdd(this._oldValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeDataValueReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeDataValueSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeDataValueSendBackward, _super);
      function ECommandShapeDataValueSendBackward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var data = shape.data;
              var index = data.indexOf(target);
              indices.push(index);
              if (0 <= index && index < data.size() - 1) {
                  data.swap(index + 1, index);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      Object.defineProperty(ECommandShapeDataValueSendBackward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueSendBackward.prototype, "target", {
          get: function () {
              return this._target;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDataValueSendBackward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDataValueSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeDataValueSendBackward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var data = shape.data;
              var index = indices[i];
              if (0 <= index && index < data.size() - 1) {
                  data.swap(index + 1, index);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeDataValueSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeDataValueSendBackward;
  }(wcardinalUi.DCommandBase));

  /**
   * {@link EShape} search utility.
   */
  var UtilShapeSearch = /** @class */ (function () {
      function UtilShapeSearch() {
      }
      /**
       * Returns indices of the given shapes.
       *
       * @param shapes shapes
       * @return indices
       */
      UtilShapeSearch.toIndices = function (shapes) {
          var result = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              result.push(shapes[i].index);
          }
          return result;
      };
      /**
       * Returns a depth of the given shape.
       *
       * @param shape a shape
       * @return a depth
       */
      UtilShapeSearch.toDepth = function (shape) {
          var result = 0;
          var parent = shape.parent;
          while (parent instanceof wcardinalUi.EShapeBase) {
              result += 1;
              parent = parent.parent;
          }
          return result;
      };
      /**
       * Returns a deepest shape on the path to the given shapes.
       *
       * @param shapeA a shape
       * @param shapeB a shape
       * @return a found shape
       */
      UtilShapeSearch.toSharedParent = function (shapeA, shapeB) {
          var depthA = this.toDepth(shapeA);
          var depthB = this.toDepth(shapeB);
          if (depthA < depthB) {
              var parent_1 = shapeA.parent;
              while (parent_1 instanceof wcardinalUi.EShapeBase) {
                  if (this.isParent(shapeB, parent_1)) {
                      return parent_1;
                  }
                  parent_1 = parent_1.parent;
              }
              return parent_1;
          }
          else {
              var parent_2 = shapeB.parent;
              while (parent_2 instanceof wcardinalUi.EShapeBase) {
                  if (this.isParent(shapeA, parent_2)) {
                      return parent_2;
                  }
                  parent_2 = parent_2.parent;
              }
              return parent_2;
          }
      };
      /**
       * Returns a shape on the path to the given shape whose parent is equals to the given parent.
       * If there is no such shape, returns a root shape on the path.
       *
       * @param shape a shape
       * @param parent a parent
       * @returns a found shape
       */
      UtilShapeSearch.toOfParent = function (shape, parent) {
          var shapeParent = shape.parent;
          while (shapeParent !== parent && shapeParent instanceof wcardinalUi.EShapeBase) {
              shape = shapeParent;
              shapeParent = shapeParent.parent;
          }
          return shape;
      };
      /**
       * Returns true if the given target is on the path to the given shape.
       *
       * @param shape a shape
       * @param target a check target
       * @return true if the given target is on the path to the given shape
       */
      UtilShapeSearch.isParent = function (shape, target) {
          var parent = shape.parent;
          while (parent instanceof wcardinalUi.EShapeBase) {
              if (parent === target) {
                  return true;
              }
              parent = parent.parent;
          }
          return false;
      };
      /**
       * Returns a selected shape on the path to the given shape.
       * If there are more than one selected shapes, returns a deepest selected shape.
       *
       * @param shape a shape
       * @return a found selected shape or null
       */
      UtilShapeSearch.toSelected = function (shape) {
          var target = shape;
          while (target instanceof wcardinalUi.EShapeBase) {
              if (target.selected) {
                  return target;
              }
              target = target.parent;
          }
          return null;
      };
      UtilShapeSearch.findChildById = function (shape, id, recursively) {
          var children = shape.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (child.id === id) {
                  return child;
              }
              if (recursively === true) {
                  var result = UtilShapeSearch.findChildById(child, id, recursively);
                  if (result != null) {
                      return result;
                  }
              }
          }
          return null;
      };
      UtilShapeSearch.findChildByType = function (shape, type, recursively) {
          var children = shape.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (child.type === type) {
                  return child;
              }
              if (recursively === true) {
                  var result = UtilShapeSearch.findChildByType(child, type, recursively);
                  if (result != null) {
                      return result;
                  }
              }
          }
          return null;
      };
      UtilShapeSearch.findChild = function (shape, matcher, recursively) {
          var children = shape.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (matcher(child)) {
                  return child;
              }
              if (recursively === true) {
                  var result = UtilShapeSearch.findChild(child, matcher, recursively);
                  if (result != null) {
                      return result;
                  }
              }
          }
          return null;
      };
      UtilShapeSearch.findChildrenByType = function (shape, type, recursively, result) {
          result = result || [];
          var children = shape.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (child.type === type) {
                  result.push(child);
              }
              if (recursively === true) {
                  UtilShapeSearch.findChildrenByType(child, type, recursively, result);
              }
          }
          return result;
      };
      UtilShapeSearch.findChildren = function (shape, matcher, recursively, result) {
          result = result || [];
          var children = shape.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (matcher(child)) {
                  result.push(child);
              }
              if (recursively === true) {
                  UtilShapeSearch.findChildren(child, matcher, recursively, result);
              }
          }
          return result;
      };
      UtilShapeSearch.COMPARATOR_INDEX = function (a, b) {
          return a.index - b.index;
      };
      return UtilShapeSearch;
  }());

  var UtilShapeDeleter = /** @class */ (function () {
      function UtilShapeDeleter() {
      }
      UtilShapeDeleter.addAll = function (shapes, result) {
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              result.add(shape);
              this.addAll(shape.children, result);
          }
          return result;
      };
      UtilShapeDeleter.delete = function (parent, shapes, generateDeletedShapeList, deletedShapeSet) {
          var _a;
          var children = parent.children;
          var length = children.length;
          // Update indices
          deletedShapeSet !== null && deletedShapeSet !== void 0 ? deletedShapeSet : (deletedShapeSet = (_a = UtilShapeDeleter.EXCEPTIONS) !== null && _a !== void 0 ? _a : (UtilShapeDeleter.EXCEPTIONS = new Set()));
          for (var i = 0; i < length; ++i) {
              var child = children[i];
              if (child.selected) {
                  child.index = length + i;
                  deletedShapeSet.add(child);
                  this.addAll(child.children, deletedShapeSet);
              }
              else {
                  child.index = i;
              }
          }
          // Sort
          children.sort(UtilShapeSearch.COMPARATOR_INDEX);
          // Detach
          if (generateDeletedShapeList === true) {
              for (var i = length - 1; 0 <= i; --i) {
                  var child = children[i];
                  if (child.selected) {
                      child.index -= length;
                      child.parent = null;
                      child.selected = false;
                      child.uploaded = undefined;
                      child.onDetach(deletedShapeSet);
                  }
                  else {
                      if (UtilShapeDeleter.EXCEPTIONS === deletedShapeSet) {
                          deletedShapeSet.clear();
                      }
                      var size = children.length - (i + 1);
                      if (0 < size) {
                          var result = children.splice(i + 1, size);
                          if (shapes != null) {
                              shapes.length = 0;
                          }
                          parent.onChildTransformChange();
                          parent.toDirty();
                          return result;
                      }
                      else {
                          if (shapes != null) {
                              shapes.length = 0;
                          }
                          return null;
                      }
                  }
              }
              if (UtilShapeDeleter.EXCEPTIONS === deletedShapeSet) {
                  deletedShapeSet.clear();
              }
              if (0 < children.length) {
                  var result = children.splice(0, children.length);
                  if (shapes != null) {
                      shapes.length = 0;
                  }
                  parent.onChildTransformChange();
                  parent.toDirty();
                  return result;
              }
              else {
                  if (shapes != null) {
                      shapes.length = 0;
                  }
                  return null;
              }
          }
          else {
              for (var i = length - 1; 0 <= i; --i) {
                  var child = children[i];
                  if (child.selected) {
                      child.parent = null;
                      child.selected = false;
                      child.uploaded = undefined;
                      child.onDetach(deletedShapeSet);
                  }
                  else {
                      if (UtilShapeDeleter.EXCEPTIONS === deletedShapeSet) {
                          deletedShapeSet.clear();
                      }
                      children.length = i + 1;
                      if (shapes != null) {
                          shapes.length = 0;
                      }
                      parent.onChildTransformChange();
                      parent.toDirty();
                      return null;
                  }
              }
              if (UtilShapeDeleter.EXCEPTIONS === deletedShapeSet) {
                  deletedShapeSet.clear();
              }
              if (0 < children.length) {
                  children.length = 0;
                  if (shapes != null) {
                      shapes.length = 0;
                  }
                  parent.onChildTransformChange();
                  parent.toDirty();
              }
              else {
                  if (shapes != null) {
                      shapes.length = 0;
                  }
              }
              return null;
          }
      };
      return UtilShapeDeleter;
  }());

  var ECommandShapeDelete = /** @class */ (function (_super) {
      __extends(ECommandShapeDelete, _super);
      function ECommandShapeDelete(shapes, indices, parent, selection, select) {
          var _this = _super.call(this) || this;
          _this._shapes = shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].reference += 1;
          }
          _this._indices = indices;
          _this._parent = parent;
          _this._selection = selection;
          _this._select = select;
          return _this;
      }
      Object.defineProperty(ECommandShapeDelete.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDelete.prototype, "shapes", {
          get: function () {
              return this._shapes;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDelete.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDelete.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeDelete.prototype, "select", {
          get: function () {
              return this._select;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeDelete.prototype.execute = function () {
          return true;
      };
      ECommandShapeDelete.prototype.redo = function () {
          var selection = this._selection;
          if (this._select) {
              selection.delete(false);
          }
          else {
              var shapes = this._shapes;
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  shapes[i].selected = true;
              }
              UtilShapeDeleter.delete(this._parent, undefined, false);
              selection.update("TREE");
          }
          return true;
      };
      ECommandShapeDelete.prototype.undo = function () {
          var shapes = this._shapes;
          var indices = this._indices;
          var parent = this._parent;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].attach(parent, indices[i]);
          }
          var selection = this._selection;
          selection.lock();
          if (this._select) {
              selection.clearAndAddAll(shapes);
          }
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeDelete.prototype.destroy = function () {
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              shape.reference -= 1;
              if (shape.parent == null && shape.reference <= 0) {
                  shape.destroy();
              }
          }
          shapes.length = 0;
      };
      return ECommandShapeDelete;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeGroup = /** @class */ (function (_super) {
      __extends(ECommandShapeGroup, _super);
      function ECommandShapeGroup(parent, selection) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._selection = selection;
          _this._before = [];
          _this._deleteds = [];
          _this._indices = [];
          _this._createds = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeGroup.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeGroup.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeGroup.prototype, "before", {
          get: function () {
              return this._before;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeGroup.prototype, "deleteds", {
          get: function () {
              return this._deleteds;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeGroup.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeGroup.prototype, "createds", {
          get: function () {
              return this._createds;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeGroup.prototype.execute = function () {
          // Save the current selection
          var selection = this._selection;
          this._before = selection.store();
          selection.lock();
          // Unselect shapes that do not have the grouping capability
          var shapes = selection.get();
          for (var i = shapes.length - 1; 0 <= i; --i) {
              var shape = shapes[i];
              if (!wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.GROUPING)) {
                  shape.selected = false;
                  shapes.splice(i, 1);
              }
          }
          // Delete selected shapes
          var parent = this._parent;
          var deletedSet = new Set();
          var deleteds = UtilShapeDeleter.delete(parent, shapes, true, deletedSet) || [];
          this._deleteds = deleteds;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              deleteds[i].reference += 1;
          }
          // Create a new group
          var modifier = selection.modifier;
          var x = modifier.position.x + modifier.width * 0.5;
          var y = modifier.position.y + modifier.height * 0.5;
          var w = modifier.width;
          var h = modifier.height;
          var group = new wcardinalUi.EShapeGroup(wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR);
          group.transform.position.set(x, y);
          group.size.set(w, h);
          group.attach(parent);
          var groupChildren = group.children;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              var clone = deleteds[i].clone();
              clone.lock(wcardinalUi.EShapeLockPart.ALL);
              var clonePosition = clone.transform.position;
              clonePosition.set(clonePosition.x - x, clonePosition.y - y);
              if (clone instanceof wcardinalUi.EShapeConnectorLine) {
                  var edge = clone.edge;
                  var tail = edge.tail;
                  var tailAcceptor = tail.acceptor;
                  var tailAcceptorShape = tailAcceptor.shape;
                  var tailLocal = tail.local;
                  if (tailAcceptorShape == null) {
                      tailLocal.set(tailLocal.x - x, tailLocal.y - y);
                  }
                  else if (!deletedSet.has(tailAcceptorShape)) {
                      tailAcceptor.shape = null;
                      tailLocal.set(tailLocal.x - x, tailLocal.y - y);
                  }
                  var head = edge.head;
                  var headAcceptor = head.acceptor;
                  var headAcceptorShape = headAcceptor.shape;
                  var headLocal = head.local;
                  if (headAcceptorShape == null) {
                      headLocal.set(headLocal.x - x, headLocal.y - y);
                  }
                  else if (!deletedSet.has(headAcceptorShape)) {
                      headAcceptor.shape = null;
                      headLocal.set(headLocal.x - x, headLocal.y - y);
                  }
              }
              clone.parent = group;
              groupChildren.push(clone);
          }
          wcardinalUi.EShapeConnectors.moveAll(deleteds, groupChildren, deleteds, groupChildren);
          for (var i = 0, imax = groupChildren.length; i < imax; ++i) {
              groupChildren[i].unlock(wcardinalUi.EShapeLockPart.ALL, true);
          }
          group.onChildTransformChange();
          group.toDirty();
          group.onAttach();
          group.reference += 1;
          this._createds = [group];
          deletedSet.clear();
          // Indices
          this._indices = UtilShapeSearch.toIndices(deleteds);
          // Select a group
          selection.clearAndAddAll(this._createds);
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeGroup.prototype.redo = function () {
          // Delete shapes
          var selection = this._selection;
          selection.lock();
          selection.clearAndAddAll(this._deleteds);
          selection.delete(false);
          // Add a group and select it
          var parent = this._parent;
          var createds = this._createds;
          for (var i = 0, imax = createds.length; i < imax; ++i) {
              createds[i].attach(parent);
          }
          // Select created shapes
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeGroup.prototype.undo = function () {
          // Delete a group
          var parent = this._parent;
          var selection = this._selection;
          selection.lock();
          var createds = this._createds;
          for (var i = createds.length - 1; 0 <= i; --i) {
              createds[i].detach();
          }
          // Restore deleted shapes
          var deleteds = this._deleteds;
          var indices = this._indices;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              deleteds[i].attach(parent, indices[i]);
          }
          // Restore the selection
          this._selection.restore(this._before);
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeGroup.prototype.destroy = function () {
          // Stored selection
          this._before.length = 0;
          // Deleted shapes
          var deleteds = this._deleteds;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              var deleted = deleteds[i];
              deleted.reference -= 1;
              if (deleted.parent == null && deleted.reference <= 0) {
                  deleted.destroy();
              }
          }
          deleteds.length = 0;
          // Created shapes
          var createds = this._createds;
          for (var i = 0, imax = createds.length; i < imax; ++i) {
              var created = createds[i];
              created.reference -= 1;
              if (created.parent == null && created.reference <= 0) {
                  created.destroy();
              }
          }
          createds.length = 0;
      };
      return ECommandShapeGroup;
  }(wcardinalUi.DCommandBase));

  var NONE = 0;
  var PROPERTY = 1;
  var PROPERTY_ID = 2;
  var SELECTION = 4;
  var TREE = 8;
  var EToolSelectSelectionUpdatedPart = {
      NONE: NONE,
      PROPERTY: PROPERTY,
      PROPERTY_ID: PROPERTY_ID,
      SELECTION: SELECTION,
      TREE: TREE,
      ALL: PROPERTY | PROPERTY_ID | SELECTION | TREE
  };

  var ECommandShapeProperty = /** @class */ (function (_super) {
      __extends(ECommandShapeProperty, _super);
      function ECommandShapeProperty(selection, property, targets) {
          if (targets === void 0) { targets = selection.get(); }
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._shapes = [];
          _this._capabilities = [];
          _this._data = [];
          _this._property = property;
          _this._targets = targets;
          _this._isMerged = false;
          return _this;
      }
      Object.defineProperty(ECommandShapeProperty.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeProperty.prototype, "shapes", {
          get: function () {
              return this._shapes;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeProperty.prototype, "capabilities", {
          get: function () {
              return this._capabilities;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeProperty.prototype, "data", {
          get: function () {
              return this._data;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeProperty.prototype.toCapability = function (shape) {
          return wcardinalUi.EShapeCapability.ALL;
      };
      ECommandShapeProperty.prototype.isRecursive = function () {
          return false;
      };
      ECommandShapeProperty.prototype.isMergeable = function () {
          return false;
      };
      ECommandShapeProperty.prototype.isClassMergeable = function (target) {
          return target.constructor === this.constructor;
      };
      ECommandShapeProperty.prototype.execute = function () {
          var shapes = this._shapes;
          var capabilities = this._capabilities;
          var property = this._property;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              this.initProperty(shapes[i], capabilities[i], property);
          }
          this._selection.update(this.getParts());
          return true;
      };
      ECommandShapeProperty.prototype.init = function (targets, shapes, capabilities, data, recursive) {
          for (var i = 0, imax = targets.length; i < imax; ++i) {
              var target = targets[i];
              if (recursive && target instanceof wcardinalUi.EShapeGroup) {
                  if (wcardinalUi.EShapeCapabilities.contains(target, wcardinalUi.EShapeCapability.CHILDREN)) {
                      this.init(target.children, shapes, capabilities, data, recursive);
                  }
              }
              else {
                  var capability = this.toCapability(target);
                  if (capability !== wcardinalUi.EShapeCapability.NONE) {
                      shapes.push(target);
                      data.push(this.getProperty(target, capability));
                      capabilities.push(capability);
                  }
              }
          }
      };
      ECommandShapeProperty.prototype.merge = function (target) {
          if (this.isMergeable() && this.isClassMergeable(target)) {
              this._isMerged = true;
              this._shapes = target.shapes;
              this._capabilities = target.capabilities;
              this._data = target.data;
              return true;
          }
          this.init(this._targets, this._shapes, this._capabilities, this._data, this.isRecursive());
          return false;
      };
      ECommandShapeProperty.prototype.isMerged = function () {
          return this._isMerged;
      };
      ECommandShapeProperty.prototype.redo = function () {
          var shapes = this._shapes;
          var data = this._data;
          var capabilities = this._capabilities;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var datum = data[i];
              var capability = capabilities[i];
              data[i] = this.getProperty(shape, capability);
              this.setProperty(shape, capability, datum);
          }
          this._selection.update(this.getParts());
          return true;
      };
      ECommandShapeProperty.prototype.undo = function () {
          return this.redo();
      };
      ECommandShapeProperty.prototype.destroy = function () {
          this._shapes.length = 0;
          this._data.length = 0;
      };
      ECommandShapeProperty.prototype.getParts = function () {
          return EToolSelectSelectionUpdatedPart.PROPERTY;
      };
      return ECommandShapeProperty;
  }(wcardinalUi.DCommandBase));

  var ECommandShapePropertyAll = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyAll, _super);
      function ECommandShapePropertyAll(selection) {
          return _super.call(this, selection, undefined) || this;
      }
      ECommandShapePropertyAll.prototype.toCapability = function (shape) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                  return wcardinalUi.EShapeCapability.ALL;
              }
              return wcardinalUi.EShapeCapability.NONE;
          }
          else {
              var result = wcardinalUi.EShapeCapability.NONE;
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                  result |= wcardinalUi.EShapeCapability.POSITION;
              }
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.WIDTH)) {
                  result |= wcardinalUi.EShapeCapability.WIDTH;
              }
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.HEIGHT)) {
                  result |= wcardinalUi.EShapeCapability.HEIGHT;
              }
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.ROTATION)) {
                  result |= wcardinalUi.EShapeCapability.ROTATION;
              }
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.SKEW)) {
                  result |= wcardinalUi.EShapeCapability.SKEW;
              }
              return result;
          }
      };
      ECommandShapePropertyAll.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              var tailLocal = edge.tail.local;
              var headLocal = edge.head.local;
              return [tailLocal.x, tailLocal.y, headLocal.x, headLocal.y, 0, 0];
          }
          else {
              var transform = shape.transform;
              var position = transform.position;
              var size = shape.size;
              var skew = transform.skew;
              return [position.x, position.y, size.x, size.y, transform.rotation, skew.x];
          }
      };
      ECommandShapePropertyAll.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              edge.tail.local.set(property[0], property[1]);
              edge.head.local.set(property[2], property[3]);
          }
          else {
              var transform = shape.transform;
              if (capability & wcardinalUi.EShapeCapability.POSITION) {
                  transform.position.set(property[0], property[1]);
              }
              if (capability & wcardinalUi.EShapeCapability.HEIGHT) {
                  if (capability & wcardinalUi.EShapeCapability.WIDTH) {
                      shape.size.set(property[2], property[3]);
                  }
                  else {
                      shape.size.y = property[3];
                  }
              }
              else if (capability & wcardinalUi.EShapeCapability.WIDTH) {
                  shape.size.x = property[2];
              }
              if (capability & wcardinalUi.EShapeCapability.ROTATION) {
                  transform.rotation = property[4];
              }
              if (capability & wcardinalUi.EShapeCapability.SKEW) {
                  transform.skew.set(property[5], property[5]);
              }
          }
      };
      ECommandShapePropertyAll.prototype.initProperty = function (shape, capability, property) {
          // DO NOTHING
      };
      return ECommandShapePropertyAll;
  }(ECommandShapeProperty));

  var ECommandShapePropertyCapability = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCapability, _super);
      function ECommandShapePropertyCapability() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCapability.prototype.getProperty = function (shape, capability) {
          var shapeCapability = shape.getCapability();
          if (shapeCapability != null) {
              return shapeCapability.locked;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyCapability.prototype.setProperty = function (shape, capability, property) {
          if (property !== wcardinalUi.EShapeCapability.NONE) {
              shape.capability.locked = property;
          }
          else {
              var shapeCapability = shape.getCapability();
              if (shapeCapability != null) {
                  shapeCapability.locked = property;
              }
          }
      };
      return ECommandShapePropertyCapability;
  }(ECommandShapeProperty));

  var ECommandShapePropertyCapabilityLock = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCapabilityLock, _super);
      function ECommandShapePropertyCapabilityLock() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCapabilityLock.prototype.initProperty = function (shape, capability, property) {
          shape.capability.locked |= property;
      };
      return ECommandShapePropertyCapabilityLock;
  }(ECommandShapePropertyCapability));

  var ECommandShapePropertyCapabilityUnlock = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCapabilityUnlock, _super);
      function ECommandShapePropertyCapabilityUnlock() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCapabilityUnlock.prototype.initProperty = function (shape, capability, property) {
          shape.capability.locked &= ~property;
      };
      return ECommandShapePropertyCapabilityUnlock;
  }(ECommandShapePropertyCapability));

  var ECommandShapePropertyCornerOff = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCornerOff, _super);
      function ECommandShapePropertyCornerOff() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCornerOff.prototype.getProperty = function (shape, capability) {
          return shape.corner;
      };
      ECommandShapePropertyCornerOff.prototype.setProperty = function (shape, capability, property) {
          shape.corner = property;
      };
      ECommandShapePropertyCornerOff.prototype.initProperty = function (shape, capability, property) {
          shape.corner &= ~property;
      };
      return ECommandShapePropertyCornerOff;
  }(ECommandShapeProperty));

  var ECommandShapePropertyCornerOn = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCornerOn, _super);
      function ECommandShapePropertyCornerOn() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCornerOn.prototype.getProperty = function (shape, capability) {
          return shape.corner;
      };
      ECommandShapePropertyCornerOn.prototype.setProperty = function (shape, capability, property) {
          shape.corner = property;
      };
      ECommandShapePropertyCornerOn.prototype.initProperty = function (shape, capability, property) {
          shape.corner |= property;
      };
      return ECommandShapePropertyCornerOn;
  }(ECommandShapeProperty));

  var ECommandShapePropertySimple = /** @class */ (function (_super) {
      __extends(ECommandShapePropertySimple, _super);
      function ECommandShapePropertySimple() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertySimple.prototype.initProperty = function (shape, capability, property) {
          this.setProperty(shape, capability, property);
      };
      return ECommandShapePropertySimple;
  }(ECommandShapeProperty));

  var ECommandShapePropertyCursor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyCursor, _super);
      function ECommandShapePropertyCursor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyCursor.prototype.getProperty = function (shape, capability) {
          return shape.cursor;
      };
      ECommandShapePropertyCursor.prototype.setProperty = function (shape, capability, property) {
          shape.cursor = property;
      };
      return ECommandShapePropertyCursor;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyRecursive = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyRecursive, _super);
      function ECommandShapePropertyRecursive(selection, property) {
          return _super.call(this, selection, property) || this;
      }
      ECommandShapePropertyRecursive.prototype.isRecursive = function () {
          return true;
      };
      return ECommandShapePropertyRecursive;
  }(ECommandShapeProperty));

  var ECommandShapePropertyRecursiveSimple = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyRecursiveSimple, _super);
      function ECommandShapePropertyRecursiveSimple() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyRecursiveSimple.prototype.initProperty = function (shape, capability, property) {
          this.setProperty(shape, capability, property);
      };
      return ECommandShapePropertyRecursiveSimple;
  }(ECommandShapePropertyRecursive));

  var ECommandShapePropertyFillColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyFillColor, _super);
      function ECommandShapePropertyFillColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyFillColor.prototype.getProperty = function (shape, capability) {
          return [shape.fill.color, shape.fill.alpha];
      };
      ECommandShapePropertyFillColor.prototype.setProperty = function (shape, capability, property) {
          shape.fill.set(undefined, property[0], property[1]);
      };
      return ECommandShapePropertyFillColor;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyFillEnable = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyFillEnable, _super);
      function ECommandShapePropertyFillEnable() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyFillEnable.prototype.getProperty = function (shape, capability) {
          return shape.fill.enable;
      };
      ECommandShapePropertyFillEnable.prototype.setProperty = function (shape, capability, property) {
          shape.fill.enable = property;
      };
      return ECommandShapePropertyFillEnable;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyFocusable = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyFocusable, _super);
      function ECommandShapePropertyFocusable() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyFocusable.prototype.getProperty = function (shape, capability) {
          return shape.state.isFocusable;
      };
      ECommandShapePropertyFocusable.prototype.setProperty = function (shape, capability, property) {
          shape.state.isFocusable = property;
      };
      return ECommandShapePropertyFocusable;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyId = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyId, _super);
      function ECommandShapePropertyId() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyId.prototype.getProperty = function (shape, capability) {
          return shape.id;
      };
      ECommandShapePropertyId.prototype.setProperty = function (shape, capability, property) {
          shape.id = property;
      };
      ECommandShapePropertyId.prototype.getParts = function () {
          return EToolSelectSelectionUpdatedPart.PROPERTY_ID;
      };
      return ECommandShapePropertyId;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyImageClear = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyImageClear, _super);
      function ECommandShapePropertyImageClear(selection) {
          return _super.call(this, selection, undefined) || this;
      }
      ECommandShapePropertyImageClear.prototype.getProperty = function (shape, capability) {
          return shape.image;
      };
      ECommandShapePropertyImageClear.prototype.setProperty = function (shape, capability, property) {
          shape.image = property;
      };
      ECommandShapePropertyImageClear.prototype.initProperty = function (shape, capability, property) {
          shape.image = undefined;
          shape.gradient = undefined;
      };
      return ECommandShapePropertyImageClear;
  }(ECommandShapeProperty));

  var ECommandShapePropertyImageFitTo = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyImageFitTo, _super);
      function ECommandShapePropertyImageFitTo(selection) {
          return _super.call(this, selection, undefined) || this;
      }
      ECommandShapePropertyImageFitTo.prototype.getProperty = function (shape, capability) {
          var size = shape.size;
          return [size.x, size.y];
      };
      ECommandShapePropertyImageFitTo.prototype.setProperty = function (shape, capability, property) {
          shape.size.set(property[0], property[1]);
      };
      ECommandShapePropertyImageFitTo.prototype.initProperty = function (shape, capability, property) {
          var image = shape.image;
          if (image) {
              shape.size.set(image.width, image.height);
          }
      };
      return ECommandShapePropertyImageFitTo;
  }(ECommandShapePropertyRecursive));

  var ECommandShapePropertyImage = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyImage, _super);
      function ECommandShapePropertyImage(selection, image, gradient) {
          return _super.call(this, selection, [image, gradient]) || this;
      }
      ECommandShapePropertyImage.prototype.getProperty = function (shape, capability) {
          return shape.image;
      };
      ECommandShapePropertyImage.prototype.setProperty = function (shape, capability, property) {
          shape.image = property;
      };
      ECommandShapePropertyImage.prototype.initProperty = function (shape, capability, property) {
          shape.image = property[0];
          shape.gradient = property[1];
      };
      return ECommandShapePropertyImage;
  }(ECommandShapeProperty));

  var ECommandShapePropertyInteractive = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyInteractive, _super);
      function ECommandShapePropertyInteractive() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyInteractive.prototype.getProperty = function (shape, capability) {
          return shape.interactive;
      };
      ECommandShapePropertyInteractive.prototype.setProperty = function (shape, capability, property) {
          shape.interactive = property;
      };
      return ECommandShapePropertyInteractive;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyLineHeadColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineHeadColor, _super);
      function ECommandShapePropertyLineHeadColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineHeadColor.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              return wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineHeadColor.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              var fill = points.marker.head.fill;
              return [fill.color, fill.alpha];
          }
          return [0, 0];
      };
      ECommandShapePropertyLineHeadColor.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.head.fill.set(undefined, property[0], property[1]);
          }
      };
      return ECommandShapePropertyLineHeadColor;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineHeadMargin = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineHeadMargin, _super);
      function ECommandShapePropertyLineHeadMargin() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineHeadMargin.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              return wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineHeadMargin.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              return shape.edge.head.margin;
          }
          return 0;
      };
      ECommandShapePropertyLineHeadMargin.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              shape.edge.head.margin = property;
          }
      };
      return ECommandShapePropertyLineHeadMargin;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineHeadSizeX = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineHeadSizeX, _super);
      function ECommandShapePropertyLineHeadSizeX() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineHeadSizeX.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              return wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineHeadSizeX.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.head.size.x;
          }
          return 0;
      };
      ECommandShapePropertyLineHeadSizeX.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.head.size.x = property;
          }
      };
      return ECommandShapePropertyLineHeadSizeX;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineHeadSizeY = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineHeadSizeY, _super);
      function ECommandShapePropertyLineHeadSizeY() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineHeadSizeY.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              return wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineHeadSizeY.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.head.size.y;
          }
          return 0;
      };
      ECommandShapePropertyLineHeadSizeY.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.head.size.y = property;
          }
      };
      return ECommandShapePropertyLineHeadSizeY;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineHeadType = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineHeadType, _super);
      function ECommandShapePropertyLineHeadType() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineHeadType.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              return wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineHeadType.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.head.type;
          }
          return wcardinalUi.EShapePointsMarkerType.NONE;
      };
      ECommandShapePropertyLineHeadType.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.head.type = property;
          }
      };
      return ECommandShapePropertyLineHeadType;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineTailColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineTailColor, _super);
      function ECommandShapePropertyLineTailColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineTailColor.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              return wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineTailColor.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              var fill = points.marker.tail.fill;
              return [fill.color, fill.alpha];
          }
          return [0, 0];
      };
      ECommandShapePropertyLineTailColor.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.tail.fill.set(undefined, property[0], property[1]);
          }
      };
      return ECommandShapePropertyLineTailColor;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineTailMargin = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineTailMargin, _super);
      function ECommandShapePropertyLineTailMargin() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineTailMargin.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              return wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineTailMargin.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              return shape.edge.tail.margin;
          }
          return 0;
      };
      ECommandShapePropertyLineTailMargin.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              shape.edge.tail.margin = property;
          }
      };
      return ECommandShapePropertyLineTailMargin;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineTailSizeX = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineTailSizeX, _super);
      function ECommandShapePropertyLineTailSizeX() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineTailSizeX.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              return wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineTailSizeX.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.tail.size.x;
          }
          return 0;
      };
      ECommandShapePropertyLineTailSizeX.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.tail.size.x = property;
          }
      };
      return ECommandShapePropertyLineTailSizeX;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineTailSizeY = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineTailSizeY, _super);
      function ECommandShapePropertyLineTailSizeY() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineTailSizeY.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              return wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineTailSizeY.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.tail.size.y;
          }
          return 0;
      };
      ECommandShapePropertyLineTailSizeY.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.tail.size.y = property;
          }
      };
      return ECommandShapePropertyLineTailSizeY;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyLineTailType = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineTailType, _super);
      function ECommandShapePropertyLineTailType() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineTailType.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              return wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyLineTailType.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points) {
              return points.marker.tail.type;
          }
          return wcardinalUi.EShapePointsMarkerType.NONE;
      };
      ECommandShapePropertyLineTailType.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points) {
              points.marker.tail.type = property;
          }
      };
      return ECommandShapePropertyLineTailType;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyPointsStyle = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPointsStyle, _super);
      function ECommandShapePropertyPointsStyle(selection, added, removed) {
          return _super.call(this, selection, [added, removed]) || this;
      }
      ECommandShapePropertyPointsStyle.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE)) {
              return wcardinalUi.EShapeCapability.LINE;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyPointsStyle.prototype.getProperty = function (shape, capability) {
          var points = shape.points;
          if (points != null) {
              return points.style;
          }
          return wcardinalUi.EShapePointsStyle.NONE;
      };
      ECommandShapePropertyPointsStyle.prototype.setProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points != null) {
              points.style = property;
          }
      };
      ECommandShapePropertyPointsStyle.prototype.initProperty = function (shape, capability, property) {
          var points = shape.points;
          if (points != null) {
              points.style = (points.style & ~property[1]) | property[0];
          }
      };
      return ECommandShapePropertyPointsStyle;
  }(ECommandShapeProperty));

  var ECommandShapePropertyPositionAndRotate = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPositionAndRotate, _super);
      function ECommandShapePropertyPositionAndRotate(selection) {
          return _super.call(this, selection, undefined) || this;
      }
      ECommandShapePropertyPositionAndRotate.prototype.toCapability = function (shape) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                  return wcardinalUi.EShapeCapability.ALL;
              }
              return wcardinalUi.EShapeCapability.NONE;
          }
          else {
              var result = wcardinalUi.EShapeCapability.NONE;
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                  result |= wcardinalUi.EShapeCapability.POSITION;
              }
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.ROTATION)) {
                  result |= wcardinalUi.EShapeCapability.ROTATION;
              }
              return result;
          }
      };
      ECommandShapePropertyPositionAndRotate.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              var tailLocal = edge.tail.local;
              var headLocal = edge.head.local;
              return [tailLocal.x, tailLocal.y, headLocal.x, headLocal.y];
          }
          else {
              var transform = shape.transform;
              var position = transform.position;
              return [position.x, position.y, transform.rotation, 0];
          }
      };
      ECommandShapePropertyPositionAndRotate.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              edge.tail.local.set(property[0], property[1]);
              edge.head.local.set(property[2], property[3]);
          }
          else {
              var transform = shape.transform;
              if (capability & wcardinalUi.EShapeCapability.POSITION) {
                  transform.position.set(property[0], property[1]);
              }
              if (capability & wcardinalUi.EShapeCapability.ROTATION) {
                  transform.rotation = property[2];
              }
          }
      };
      ECommandShapePropertyPositionAndRotate.prototype.initProperty = function (shape, capability, property) {
          // DO NOTHING
      };
      return ECommandShapePropertyPositionAndRotate;
  }(ECommandShapeProperty));

  var ECommandShapePropertyPositionLeft = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPositionLeft, _super);
      function ECommandShapePropertyPositionLeft() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyPositionLeft.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
              return wcardinalUi.EShapeCapability.POSITION;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyPositionLeft.prototype.getProperty = function (shape, capability) {
          return shape.transform.position.x;
      };
      ECommandShapePropertyPositionLeft.prototype.setProperty = function (shape, capability, property) {
          shape.transform.position.x = property;
      };
      ECommandShapePropertyPositionLeft.prototype.initProperty = function (shape, capability, property) {
          var _a;
          var rectangle = ((_a = ECommandShapePropertyPositionLeft.WORK) !== null && _a !== void 0 ? _a : (ECommandShapePropertyPositionLeft.WORK = new pixi_js.Rectangle()));
          shape.getBoundsLocal(false, rectangle);
          shape.transform.position.x += property - rectangle.x;
      };
      ECommandShapePropertyPositionLeft.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyPositionLeft;
  }(ECommandShapeProperty));

  var ECommandShapePropertyPositionTop = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPositionTop, _super);
      function ECommandShapePropertyPositionTop() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyPositionTop.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
              return wcardinalUi.EShapeCapability.POSITION;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyPositionTop.prototype.getProperty = function (shape, capability) {
          return shape.transform.position.y;
      };
      ECommandShapePropertyPositionTop.prototype.setProperty = function (shape, capability, property) {
          shape.transform.position.y = property;
      };
      ECommandShapePropertyPositionTop.prototype.initProperty = function (shape, capability, property) {
          var _a;
          var rectangle = ((_a = ECommandShapePropertyPositionTop.WORK) !== null && _a !== void 0 ? _a : (ECommandShapePropertyPositionTop.WORK = new pixi_js.Rectangle()));
          shape.getBoundsLocal(false, rectangle);
          shape.transform.position.y += property - rectangle.y;
      };
      ECommandShapePropertyPositionTop.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyPositionTop;
  }(ECommandShapeProperty));

  var ECommandShapePropertyPositionX = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPositionX, _super);
      function ECommandShapePropertyPositionX() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyPositionX.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
              return wcardinalUi.EShapeCapability.POSITION;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyPositionX.prototype.getProperty = function (shape, capability) {
          return shape.transform.position.x;
      };
      ECommandShapePropertyPositionX.prototype.setProperty = function (shape, capability, property) {
          shape.transform.position.x = property;
      };
      ECommandShapePropertyPositionX.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyPositionX;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyPositionY = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPositionY, _super);
      function ECommandShapePropertyPositionY() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyPositionY.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
              return wcardinalUi.EShapeCapability.POSITION;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyPositionY.prototype.getProperty = function (shape, capability) {
          return shape.transform.position.y;
      };
      ECommandShapePropertyPositionY.prototype.setProperty = function (shape, capability, property) {
          shape.transform.position.y = property;
      };
      ECommandShapePropertyPositionY.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyPositionY;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyPosition = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyPosition, _super);
      function ECommandShapePropertyPosition(selection) {
          return _super.call(this, selection, undefined) || this;
      }
      ECommandShapePropertyPosition.prototype.toCapability = function (shape) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                  return wcardinalUi.EShapeCapability.POSITION;
              }
              return wcardinalUi.EShapeCapability.NONE;
          }
          else {
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                  return wcardinalUi.EShapeCapability.POSITION;
              }
              return wcardinalUi.EShapeCapability.NONE;
          }
      };
      ECommandShapePropertyPosition.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              var tailLocal = edge.tail.local;
              var headLocal = edge.head.local;
              return [tailLocal.x, tailLocal.y, headLocal.x, headLocal.y];
          }
          else {
              var position = shape.transform.position;
              return [position.x, position.y, 0, 0];
          }
      };
      ECommandShapePropertyPosition.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              edge.tail.local.set(property[0], property[1]);
              edge.head.local.set(property[2], property[3]);
          }
          else {
              shape.transform.position.set(property[0], property[1]);
          }
      };
      ECommandShapePropertyPosition.prototype.initProperty = function (shape, capability, property) {
          // DO NOTHING
      };
      return ECommandShapePropertyPosition;
  }(ECommandShapeProperty));

  var ECommandShapePropertyRadius = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyRadius, _super);
      function ECommandShapePropertyRadius() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyRadius.prototype.getProperty = function (shape, capability) {
          return shape.radius;
      };
      ECommandShapePropertyRadius.prototype.setProperty = function (shape, capability, property) {
          shape.radius = property;
      };
      ECommandShapePropertyRadius.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyRadius;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyRotation = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyRotation, _super);
      function ECommandShapePropertyRotation() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyRotation.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.ROTATION)) {
              return wcardinalUi.EShapeCapability.ROTATION;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertyRotation.prototype.getProperty = function (shape, capability) {
          return shape.transform.rotation;
      };
      ECommandShapePropertyRotation.prototype.setProperty = function (shape, capability, property) {
          shape.transform.rotation = property;
      };
      ECommandShapePropertyRotation.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyRotation;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyShortcut = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyShortcut, _super);
      function ECommandShapePropertyShortcut() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyShortcut.prototype.getProperty = function (shape, capability) {
          return shape.shortcut;
      };
      ECommandShapePropertyShortcut.prototype.setProperty = function (shape, capability, property) {
          shape.shortcut = property;
      };
      return ECommandShapePropertyShortcut;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertySizeX = /** @class */ (function (_super) {
      __extends(ECommandShapePropertySizeX, _super);
      function ECommandShapePropertySizeX() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertySizeX.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.WIDTH)) {
              return wcardinalUi.EShapeCapability.WIDTH;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertySizeX.prototype.getProperty = function (shape, capability) {
          return shape.size.x;
      };
      ECommandShapePropertySizeX.prototype.setProperty = function (shape, capability, property) {
          shape.size.x = property;
      };
      ECommandShapePropertySizeX.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertySizeX;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertySizeY = /** @class */ (function (_super) {
      __extends(ECommandShapePropertySizeY, _super);
      function ECommandShapePropertySizeY() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertySizeY.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.HEIGHT)) {
              return wcardinalUi.EShapeCapability.HEIGHT;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertySizeY.prototype.getProperty = function (shape, capability) {
          return shape.size.y;
      };
      ECommandShapePropertySizeY.prototype.setProperty = function (shape, capability, property) {
          shape.size.y = property;
      };
      ECommandShapePropertySizeY.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertySizeY;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertySkew = /** @class */ (function (_super) {
      __extends(ECommandShapePropertySkew, _super);
      function ECommandShapePropertySkew() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertySkew.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.SKEW)) {
              return wcardinalUi.EShapeCapability.SKEW;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      ECommandShapePropertySkew.prototype.getProperty = function (shape, capability) {
          return shape.transform.skew.x;
      };
      ECommandShapePropertySkew.prototype.setProperty = function (shape, capability, property) {
          shape.transform.skew.set(property, property);
      };
      ECommandShapePropertySkew.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertySkew;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyStrokeAlign = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeAlign, _super);
      function ECommandShapePropertyStrokeAlign() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeAlign.prototype.getProperty = function (shape, capability) {
          return shape.stroke.align;
      };
      ECommandShapePropertyStrokeAlign.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.align = property;
      };
      ECommandShapePropertyStrokeAlign.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyStrokeAlign;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyStrokeColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeColor, _super);
      function ECommandShapePropertyStrokeColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeColor.prototype.getProperty = function (shape, capability) {
          return [shape.stroke.color, shape.stroke.alpha];
      };
      ECommandShapePropertyStrokeColor.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.set(undefined, property[0], property[1]);
      };
      return ECommandShapePropertyStrokeColor;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyStrokeEnable = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeEnable, _super);
      function ECommandShapePropertyStrokeEnable() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeEnable.prototype.getProperty = function (shape, capability) {
          return shape.stroke.enable;
      };
      ECommandShapePropertyStrokeEnable.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.enable = property;
      };
      return ECommandShapePropertyStrokeEnable;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyStrokeSideOff = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeSideOff, _super);
      function ECommandShapePropertyStrokeSideOff() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeSideOff.prototype.getProperty = function (shape, capability) {
          return shape.stroke.side;
      };
      ECommandShapePropertyStrokeSideOff.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.side = property;
      };
      ECommandShapePropertyStrokeSideOff.prototype.initProperty = function (shape, capability, property) {
          shape.stroke.side &= ~property;
      };
      return ECommandShapePropertyStrokeSideOff;
  }(ECommandShapePropertyRecursive));

  var ECommandShapePropertyStrokeSideOn = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeSideOn, _super);
      function ECommandShapePropertyStrokeSideOn() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeSideOn.prototype.getProperty = function (shape, capability) {
          return shape.stroke.side;
      };
      ECommandShapePropertyStrokeSideOn.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.side = property;
      };
      ECommandShapePropertyStrokeSideOn.prototype.initProperty = function (shape, capability, property) {
          shape.stroke.side |= property;
      };
      return ECommandShapePropertyStrokeSideOn;
  }(ECommandShapePropertyRecursive));

  var ECommandShapePropertyStrokeStyle = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeStyle, _super);
      function ECommandShapePropertyStrokeStyle(selection, added, removed) {
          return _super.call(this, selection, [added, removed]) || this;
      }
      ECommandShapePropertyStrokeStyle.prototype.getProperty = function (shape, capability) {
          return shape.stroke.style;
      };
      ECommandShapePropertyStrokeStyle.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.style = property;
      };
      ECommandShapePropertyStrokeStyle.prototype.initProperty = function (shape, capability, property) {
          var stroke = shape.stroke;
          stroke.style = (stroke.style & ~property[1]) | property[0];
      };
      return ECommandShapePropertyStrokeStyle;
  }(ECommandShapeProperty));

  var ECommandShapePropertyStrokeWidth = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyStrokeWidth, _super);
      function ECommandShapePropertyStrokeWidth() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyStrokeWidth.prototype.getProperty = function (shape, capability) {
          return shape.stroke.width;
      };
      ECommandShapePropertyStrokeWidth.prototype.setProperty = function (shape, capability, property) {
          shape.stroke.width = property;
      };
      ECommandShapePropertyStrokeWidth.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyStrokeWidth;
  }(ECommandShapePropertyRecursiveSimple));

  var ECommandShapePropertyTextAlignHorizontal = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextAlignHorizontal, _super);
      function ECommandShapePropertyTextAlignHorizontal() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextAlignHorizontal.prototype.getProperty = function (shape, capability) {
          return shape.text.align.horizontal;
      };
      ECommandShapePropertyTextAlignHorizontal.prototype.setProperty = function (shape, capability, property) {
          shape.text.align.horizontal = property;
      };
      return ECommandShapePropertyTextAlignHorizontal;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextAlignVertical = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextAlignVertical, _super);
      function ECommandShapePropertyTextAlignVertical() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextAlignVertical.prototype.getProperty = function (shape, capability) {
          return shape.text.align.vertical;
      };
      ECommandShapePropertyTextAlignVertical.prototype.setProperty = function (shape, capability, property) {
          shape.text.align.vertical = property;
      };
      return ECommandShapePropertyTextAlignVertical;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextClipping = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextClipping, _super);
      function ECommandShapePropertyTextClipping() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextClipping.prototype.getProperty = function (shape, capability) {
          return shape.text.clipping;
      };
      ECommandShapePropertyTextClipping.prototype.setProperty = function (shape, capability, property) {
          shape.text.clipping = property;
      };
      return ECommandShapePropertyTextClipping;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextColor, _super);
      function ECommandShapePropertyTextColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextColor.prototype.getProperty = function (shape, capability) {
          var text = shape.text;
          return [text.color, text.alpha];
      };
      ECommandShapePropertyTextColor.prototype.setProperty = function (shape, capability, property) {
          var text = shape.text;
          text.color = property[0];
          text.alpha = property[1];
      };
      return ECommandShapePropertyTextColor;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextDirection = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextDirection, _super);
      function ECommandShapePropertyTextDirection() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextDirection.prototype.getProperty = function (shape, capability) {
          return shape.text.direction;
      };
      ECommandShapePropertyTextDirection.prototype.setProperty = function (shape, capability, property) {
          shape.text.direction = property;
      };
      return ECommandShapePropertyTextDirection;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextFamily = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextFamily, _super);
      function ECommandShapePropertyTextFamily() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextFamily.prototype.getProperty = function (shape, capability) {
          return shape.text.family;
      };
      ECommandShapePropertyTextFamily.prototype.setProperty = function (shape, capability, property) {
          shape.text.family = property;
      };
      return ECommandShapePropertyTextFamily;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextFitting = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextFitting, _super);
      function ECommandShapePropertyTextFitting() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextFitting.prototype.getProperty = function (shape, capability) {
          return shape.text.fitting;
      };
      ECommandShapePropertyTextFitting.prototype.setProperty = function (shape, capability, property) {
          shape.text.fitting = property;
      };
      return ECommandShapePropertyTextFitting;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextOffsetHorizontal = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextOffsetHorizontal, _super);
      function ECommandShapePropertyTextOffsetHorizontal() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextOffsetHorizontal.prototype.getProperty = function (shape, capability) {
          return shape.text.offset.horizontal;
      };
      ECommandShapePropertyTextOffsetHorizontal.prototype.setProperty = function (shape, capability, property) {
          shape.text.offset.horizontal = property;
      };
      return ECommandShapePropertyTextOffsetHorizontal;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextOffsetVertical = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextOffsetVertical, _super);
      function ECommandShapePropertyTextOffsetVertical() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextOffsetVertical.prototype.getProperty = function (shape, capability) {
          return shape.text.offset.vertical;
      };
      ECommandShapePropertyTextOffsetVertical.prototype.setProperty = function (shape, capability, property) {
          shape.text.offset.vertical = property;
      };
      return ECommandShapePropertyTextOffsetVertical;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextOutlineColor = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextOutlineColor, _super);
      function ECommandShapePropertyTextOutlineColor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextOutlineColor.prototype.getProperty = function (shape, capability) {
          var outline = shape.text.outline;
          return [outline.color, outline.alpha];
      };
      ECommandShapePropertyTextOutlineColor.prototype.setProperty = function (shape, capability, property) {
          var outline = shape.text.outline;
          outline.color = property[0];
          outline.alpha = property[1];
      };
      return ECommandShapePropertyTextOutlineColor;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextOutlineEnable = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextOutlineEnable, _super);
      function ECommandShapePropertyTextOutlineEnable() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextOutlineEnable.prototype.getProperty = function (shape, capability) {
          return shape.text.outline.enable;
      };
      ECommandShapePropertyTextOutlineEnable.prototype.setProperty = function (shape, capability, property) {
          shape.text.outline.enable = property;
      };
      return ECommandShapePropertyTextOutlineEnable;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextOutlineWidth = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextOutlineWidth, _super);
      function ECommandShapePropertyTextOutlineWidth() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextOutlineWidth.prototype.getProperty = function (shape, capability) {
          return shape.text.outline.width;
      };
      ECommandShapePropertyTextOutlineWidth.prototype.setProperty = function (shape, capability, property) {
          shape.text.outline.width = property;
      };
      ECommandShapePropertyTextOutlineWidth.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyTextOutlineWidth;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextPaddingHorizontal = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextPaddingHorizontal, _super);
      function ECommandShapePropertyTextPaddingHorizontal() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextPaddingHorizontal.prototype.getProperty = function (shape, capability) {
          return shape.text.padding.horizontal;
      };
      ECommandShapePropertyTextPaddingHorizontal.prototype.setProperty = function (shape, capability, property) {
          shape.text.padding.horizontal = property;
      };
      return ECommandShapePropertyTextPaddingHorizontal;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextPaddingVertical = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextPaddingVertical, _super);
      function ECommandShapePropertyTextPaddingVertical() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextPaddingVertical.prototype.getProperty = function (shape, capability) {
          return shape.text.padding.vertical;
      };
      ECommandShapePropertyTextPaddingVertical.prototype.setProperty = function (shape, capability, property) {
          shape.text.padding.vertical = property;
      };
      return ECommandShapePropertyTextPaddingVertical;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextSizeDelta = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextSizeDelta, _super);
      function ECommandShapePropertyTextSizeDelta() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextSizeDelta.prototype.getProperty = function (shape, capability) {
          return shape.text.size;
      };
      ECommandShapePropertyTextSizeDelta.prototype.setProperty = function (shape, capability, property) {
          shape.text.size = property;
      };
      ECommandShapePropertyTextSizeDelta.prototype.initProperty = function (shape, capability, property) {
          var text = shape.text;
          text.size = Math.max(0, text.size + property);
      };
      return ECommandShapePropertyTextSizeDelta;
  }(ECommandShapeProperty));

  var ECommandShapePropertyTextSize = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextSize, _super);
      function ECommandShapePropertyTextSize() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextSize.prototype.getProperty = function (shape, capability) {
          return shape.text.size;
      };
      ECommandShapePropertyTextSize.prototype.setProperty = function (shape, capability, property) {
          shape.text.size = property;
      };
      return ECommandShapePropertyTextSize;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextSpacingHorizontal = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextSpacingHorizontal, _super);
      function ECommandShapePropertyTextSpacingHorizontal() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextSpacingHorizontal.prototype.getProperty = function (shape, capability) {
          return shape.text.spacing.horizontal;
      };
      ECommandShapePropertyTextSpacingHorizontal.prototype.setProperty = function (shape, capability, property) {
          shape.text.spacing.horizontal = property;
      };
      ECommandShapePropertyTextSpacingHorizontal.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyTextSpacingHorizontal;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextSpacingVertical = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextSpacingVertical, _super);
      function ECommandShapePropertyTextSpacingVertical() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextSpacingVertical.prototype.getProperty = function (shape, capability) {
          return shape.text.spacing.vertical;
      };
      ECommandShapePropertyTextSpacingVertical.prototype.setProperty = function (shape, capability, property) {
          shape.text.spacing.vertical = property;
      };
      ECommandShapePropertyTextSpacingVertical.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyTextSpacingVertical;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextStyle = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextStyle, _super);
      function ECommandShapePropertyTextStyle() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextStyle.prototype.getProperty = function (shape, capability) {
          return shape.text.style;
      };
      ECommandShapePropertyTextStyle.prototype.setProperty = function (shape, capability, property) {
          shape.text.style = property;
      };
      return ECommandShapePropertyTextStyle;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextValue = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextValue, _super);
      function ECommandShapePropertyTextValue() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextValue.prototype.getProperty = function (shape, capability) {
          return shape.text.value;
      };
      ECommandShapePropertyTextValue.prototype.setProperty = function (shape, capability, property) {
          shape.text.value = property;
      };
      ECommandShapePropertyTextValue.prototype.isMergeable = function () {
          return true;
      };
      return ECommandShapePropertyTextValue;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTextWeight = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTextWeight, _super);
      function ECommandShapePropertyTextWeight() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTextWeight.prototype.getProperty = function (shape, capability) {
          return shape.text.weight;
      };
      ECommandShapePropertyTextWeight.prototype.setProperty = function (shape, capability, property) {
          shape.text.weight = property;
      };
      return ECommandShapePropertyTextWeight;
  }(ECommandShapePropertySimple));

  var ECommandShapePropertyTitle = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyTitle, _super);
      function ECommandShapePropertyTitle() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyTitle.prototype.getProperty = function (shape, capability) {
          return shape.title;
      };
      ECommandShapePropertyTitle.prototype.setProperty = function (shape, capability, property) {
          shape.title = property;
      };
      return ECommandShapePropertyTitle;
  }(ECommandShapePropertySimple));

  var ECommandShapeReplaceOne = /** @class */ (function (_super) {
      __extends(ECommandShapeReplaceOne, _super);
      function ECommandShapeReplaceOne(newShape, oldShape, parent, selection) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._newShape = newShape;
          _this._oldShape = oldShape;
          _this._selection = selection;
          _this._index = parent.children.indexOf(oldShape);
          newShape.reference += 1;
          oldShape.reference += 1;
          return _this;
      }
      Object.defineProperty(ECommandShapeReplaceOne.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplaceOne.prototype, "oldShape", {
          get: function () {
              return this._oldShape;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplaceOne.prototype, "newShape", {
          get: function () {
              return this._newShape;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplaceOne.prototype, "index", {
          get: function () {
              return this._index;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplaceOne.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeReplaceOne.prototype.execute = function () {
          this._oldShape.detach();
          this._newShape.attach(this._parent, this._index);
          this._selection.swapLast(this._oldShape, this._newShape);
          return true;
      };
      ECommandShapeReplaceOne.prototype.redo = function () {
          this._newShape.attach(this._parent, this._index);
          this._oldShape.detach();
          this._selection.swapLast(this._oldShape, this._newShape);
          return true;
      };
      ECommandShapeReplaceOne.prototype.undo = function () {
          this._newShape.detach();
          this._oldShape.attach(this._parent, this._index);
          this._selection.swapLast(this._newShape, this._oldShape);
          return true;
      };
      ECommandShapeReplaceOne.prototype.destroy = function () {
          // Destroy new shapes
          var newShape = this._newShape;
          newShape.reference -= 1;
          if (newShape.parent == null && newShape.reference <= 0) {
              newShape.destroy();
          }
          // Destroy old shapes
          var oldShape = this._oldShape;
          oldShape.reference -= 1;
          if (oldShape.parent == null && oldShape.reference <= 0) {
              oldShape.destroy();
          }
      };
      return ECommandShapeReplaceOne;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeReplace, _super);
      function ECommandShapeReplace(parent, factory, selection) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._factory = factory;
          _this._selection = selection;
          _this._newShapes = [];
          _this._oldShapes = [];
          _this._indices = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeReplace.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplace.prototype, "oldShapes", {
          get: function () {
              return this._oldShapes;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplace.prototype, "newShapes", {
          get: function () {
              return this._newShapes;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplace.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeReplace.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeReplace.prototype.execute = function () {
          var parent = this._parent;
          var indices = this._indices;
          var newShapes = this._newShapes;
          var oldShapes = this._oldShapes;
          var children = parent.children;
          var factory = this._factory;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (child.selected) {
                  var newShape = void 0;
                  if (wcardinalUi.EShapeCapabilities.contains(child, wcardinalUi.EShapeCapability.REPLACING)) {
                      if (child instanceof wcardinalUi.EShapeGroup) {
                          var pivot = child.transform.pivot;
                          var pivotX = pivot.x;
                          var pivotY = pivot.y;
                          if (pivotX !== 0 || pivotY !== 0) {
                              child.lock(wcardinalUi.EShapeLockPart.TRANSFORM);
                              pivot.set(0, 0);
                              newShape = factory(child) || child;
                              pivot.set(pivotX, pivotY);
                              child.unlock(wcardinalUi.EShapeLockPart.TRANSFORM, false);
                          }
                          else {
                              newShape = factory(child) || child;
                          }
                      }
                      else {
                          newShape = factory(child) || child;
                      }
                      if (newShape !== child) {
                          child.reference += 1;
                          newShape.reference += 1;
                          child.detach();
                          newShape.attach(parent, i);
                      }
                  }
                  else {
                      newShape = child;
                  }
                  indices.push(i);
                  newShapes.push(newShape);
                  oldShapes.push(child);
              }
          }
          var selection = this._selection;
          selection.lock();
          selection.clearAndAddAll(newShapes);
          selection.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
          selection.unlock();
          return true;
      };
      ECommandShapeReplace.prototype.redo = function () {
          var parent = this._parent;
          var indices = this._indices;
          var oldShapes = this._oldShapes;
          var newShapes = this._newShapes;
          for (var i = 0, imax = newShapes.length; i < imax; ++i) {
              var oldShape = oldShapes[i];
              var newShape = newShapes[i];
              if (oldShape !== newShape) {
                  oldShape.detach();
                  newShape.attach(parent, indices[i]);
              }
          }
          var selection = this._selection;
          selection.lock();
          selection.clearAndAddAll(newShapes);
          selection.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
          selection.unlock();
          return true;
      };
      ECommandShapeReplace.prototype.undo = function () {
          var parent = this._parent;
          var indices = this._indices;
          var oldShapes = this._oldShapes;
          var newShapes = this._newShapes;
          for (var i = 0, imax = newShapes.length; i < imax; ++i) {
              var oldShape = oldShapes[i];
              var newShape = newShapes[i];
              if (oldShape !== newShape) {
                  newShape.detach();
                  oldShape.attach(parent, indices[i]);
              }
          }
          var selection = this._selection;
          selection.lock();
          selection.clearAndAddAll(oldShapes);
          selection.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
          selection.unlock();
          return true;
      };
      ECommandShapeReplace.prototype.destroy = function () {
          // Destroy Shapes
          var oldShapes = this._oldShapes;
          var newShapes = this._newShapes;
          for (var i = 0, imax = newShapes.length; i < imax; ++i) {
              var oldShape = oldShapes[i];
              var newShape = newShapes[i];
              if (oldShape !== newShape) {
                  newShape.reference -= 1;
                  if (newShape.parent == null && newShape.reference <= 0) {
                      newShape.destroy();
                  }
                  oldShape.reference -= 1;
                  if (oldShape.parent == null && oldShape.reference <= 0) {
                      oldShape.destroy();
                  }
              }
          }
          oldShapes.length = 0;
          newShapes.length = 0;
          this.indices.length = 0;
      };
      return ECommandShapeReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeSelect = /** @class */ (function (_super) {
      __extends(ECommandShapeSelect, _super);
      function ECommandShapeSelect(before, after, selection) {
          var _this = _super.call(this) || this;
          _this._before = before;
          _this._after = after;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandShapeSelect.prototype, "before", {
          get: function () {
              return this._before;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeSelect.prototype, "after", {
          get: function () {
              return this._after;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeSelect.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeSelect.prototype.isClean = function () {
          return true;
      };
      ECommandShapeSelect.prototype.execute = function () {
          return true;
      };
      ECommandShapeSelect.prototype.redo = function () {
          this._selection.restore(this._after);
          return true;
      };
      ECommandShapeSelect.prototype.undo = function () {
          this._selection.restore(this._before);
          return true;
      };
      ECommandShapeSelect.prototype.destroy = function () {
          this._before.length = 0;
          this._after.length = 0;
      };
      return ECommandShapeSelect;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTreeBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeTreeBringForward, _super);
      /**
       *
       * @param indices indices of moved children sorted in the "descending" order
       * @param parent
       * @param selection
       */
      function ECommandShapeTreeBringForward(indices, parent, selection) {
          var _this = _super.call(this) || this;
          _this._indices = indices;
          _this._parent = parent;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandShapeTreeBringForward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeBringForward.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeBringForward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeTreeBringForward.prototype.execute = function () {
          return true;
      };
      ECommandShapeTreeBringForward.prototype.redo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          for (var i = 0, imax = indices.length; i < imax; ++i) {
              var index = indices[i];
              var child = children[index];
              children[index] = children[index + 1];
              children[index + 1] = child;
          }
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeBringForward.prototype.undo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          for (var i = indices.length - 1; 0 <= i; --i) {
              var index = indices[i];
              var child = children[index + 1];
              children[index + 1] = children[index];
              children[index] = child;
          }
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeBringForward.prototype.destroy = function () {
          this._indices.length = 0;
      };
      return ECommandShapeTreeBringForward;
  }(wcardinalUi.DCommandBase));

  var SHAPE_COMPARATOR$1 = function (a, b) {
      return a.index - b.index;
  };
  var ECommandShapeTreeBringToFront = /** @class */ (function (_super) {
      __extends(ECommandShapeTreeBringToFront, _super);
      /**
       *
       * @param indices indices of moved children sorted in the "descending" order
       * @param parent
       * @param selection
       */
      function ECommandShapeTreeBringToFront(indices, parent, selection) {
          var _this = _super.call(this) || this;
          _this._indices = indices;
          _this._parent = parent;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandShapeTreeBringToFront.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeBringToFront.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeBringToFront.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeTreeBringToFront.prototype.execute = function () {
          return true;
      };
      ECommandShapeTreeBringToFront.prototype.redo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          var offset = children.length;
          for (var i = 0; i < offset; ++i) {
              children[i].index = i;
          }
          for (var i = 0, imax = indices.length; i < imax; ++i) {
              var index = indices[i];
              var child = children[index];
              child.index = offset + index;
          }
          children.sort(SHAPE_COMPARATOR$1);
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeBringToFront.prototype.undo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          var offset = children.length;
          var indexSize = indices.length;
          for (var i = 0, imax = indexSize; i < imax; ++i) {
              var index = indices[i];
              var child = children[offset - 1 - i];
              child.index = index;
          }
          var indexIndex = indexSize - 1;
          var indexCurrent = indices[indexIndex];
          var indexOffset = 0;
          for (var i = 0, imax = offset - indexSize; i < imax; ++i) {
              var child = children[i];
              var index = i + indexOffset;
              if (index < indexCurrent) {
                  child.index = index;
              }
              else {
                  indexOffset += 1;
                  indexIndex -= 1;
                  if (0 <= indexIndex) {
                      indexCurrent = indices[indexIndex];
                  }
                  else {
                      indexCurrent = Number.MAX_SAFE_INTEGER;
                  }
                  i -= 1;
              }
          }
          children.sort(SHAPE_COMPARATOR$1);
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeBringToFront.prototype.destroy = function () {
          this._indices.length = 0;
      };
      return ECommandShapeTreeBringToFront;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTreeSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeTreeSendBackward, _super);
      /**
       * @param indices indices of moved children sorted in the "ascending" order
       * @param parent
       * @param selection
       */
      function ECommandShapeTreeSendBackward(indices, parent, selection) {
          var _this = _super.call(this) || this;
          _this._indices = indices;
          _this._parent = parent;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandShapeTreeSendBackward.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeSendBackward.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeSendBackward.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeTreeSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeTreeSendBackward.prototype.redo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          for (var i = 0, imax = indices.length; i < imax; ++i) {
              var index = indices[i];
              var child = children[index];
              children[index] = children[index - 1];
              children[index - 1] = child;
          }
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeSendBackward.prototype.undo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          for (var i = indices.length - 1; 0 <= i; --i) {
              var index = indices[i];
              var child = children[index - 1];
              children[index - 1] = children[index];
              children[index] = child;
          }
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeSendBackward.prototype.destroy = function () {
          this._indices.length = 0;
      };
      return ECommandShapeTreeSendBackward;
  }(wcardinalUi.DCommandBase));

  var SHAPE_COMPARATOR = function (a, b) {
      return a.index - b.index;
  };
  var ECommandShapeTreeSendToBack = /** @class */ (function (_super) {
      __extends(ECommandShapeTreeSendToBack, _super);
      /**
       * @param indices indices of moved children sorted in the "ascending" order
       * @param parent
       * @param selection
       */
      function ECommandShapeTreeSendToBack(indices, parent, selection) {
          var _this = _super.call(this) || this;
          _this._indices = indices;
          _this._parent = parent;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(ECommandShapeTreeSendToBack.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeSendToBack.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeTreeSendToBack.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeTreeSendToBack.prototype.execute = function () {
          return true;
      };
      ECommandShapeTreeSendToBack.prototype.redo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          var offset = children.length;
          for (var i = 0; i < offset; ++i) {
              children[i].index = i;
          }
          for (var i = 0, imax = indices.length; i < imax; ++i) {
              var index = indices[i];
              var child = children[index];
              child.index = index - offset;
          }
          children.sort(SHAPE_COMPARATOR);
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeSendToBack.prototype.undo = function () {
          var indices = this._indices;
          var parent = this._parent;
          var children = parent.children;
          var indexSize = indices.length;
          for (var i = 0, imax = indexSize; i < imax; ++i) {
              var index = indices[i];
              var child = children[i];
              child.index = index;
          }
          var indexIndex = 0;
          var indexCurrent = indices[indexIndex];
          var indexOffset = -indexSize;
          var offset = children.length;
          for (var i = indexSize; i < offset; ++i) {
              var child = children[i];
              var index = i + indexOffset;
              if (index < indexCurrent) {
                  child.index = index;
              }
              else {
                  indexOffset += 1;
                  indexIndex += 1;
                  if (indexIndex < indexSize) {
                      indexCurrent = indices[indexIndex];
                  }
                  else {
                      indexCurrent = Number.MAX_SAFE_INTEGER;
                  }
                  i -= 1;
              }
          }
          children.sort(SHAPE_COMPARATOR);
          parent.toDirty();
          this._selection.update(EToolSelectSelectionUpdatedPart.TREE);
          return true;
      };
      ECommandShapeTreeSendToBack.prototype.destroy = function () {
          this._indices.length = 0;
      };
      return ECommandShapeTreeSendToBack;
  }(wcardinalUi.DCommandBase));

  /*
   * Copyright (C) 2019 Toshiba Corporation
   * SPDX-License-Identifier: Apache-2.0
   */
  var UtilShapeTransforms = /** @class */ (function () {
      function UtilShapeTransforms() {
      }
      UtilShapeTransforms.prepare = function (shape) {
          var editor = shape.editor;
          if (editor == null) {
              editor = new wcardinalUi.EShapeEditor();
              shape.editor = editor;
          }
          // Transform
          shape.updateTransform();
          var parent = shape.parent;
          if (parent instanceof wcardinalUi.EShapeBase) {
              parent.transform.internalTransform
                  .copyTo(editor.internalTransformParentInverse)
                  .invert();
          }
          else {
              editor.internalTransformParentInverse.identity();
          }
          shape.transform.internalTransform.copyTo(editor.internalTransform);
          // Rotation
          editor.rotation = shape.transform.rotation;
          // Size
          editor.size.copyFrom(shape.size);
          //
          shape.lock(wcardinalUi.EShapeLockPart.TRANSFORM_CHILD);
      };
      UtilShapeTransforms.finalize = function (shape) {
          shape.unlock(wcardinalUi.EShapeLockPart.TRANSFORM_CHILD, true);
      };
      UtilShapeTransforms.apply = function (shape, transform, capability) {
          var editor = shape.editor;
          if (editor != null) {
              var newLocalTransform = editor.localTransform;
              editor.internalTransformParentInverse
                  .copyTo(newLocalTransform)
                  .append(transform)
                  .append(editor.internalTransform);
              this.applyLocal(shape, newLocalTransform, capability, editor.size);
          }
      };
      UtilShapeTransforms.applyLocal = function (shape, localTransform, capability, size) {
          // Reconstruct the position, the rotation and the size
          var a = localTransform.a;
          var b = localTransform.b;
          var c = localTransform.c;
          var d = localTransform.d;
          var tx = localTransform.tx;
          var ty = localTransform.ty;
          shape.lock(wcardinalUi.EShapeLockPart.UPLOADED);
          // Transform
          var transform = shape.transform;
          // Capability
          var cposition = !!(capability & wcardinalUi.EShapeCapability.POSITION);
          var crotation = !!(capability & wcardinalUi.EShapeCapability.ROTATION);
          var cskew = !!(capability & wcardinalUi.EShapeCapability.SKEW);
          var cwidth = !!(capability & wcardinalUi.EShapeCapability.WIDTH);
          var cheight = !!(capability & wcardinalUi.EShapeCapability.HEIGHT);
          // Rotation and skew
          if (crotation || cskew) {
              // Rotation
              var rx = Math.atan2(-c, d); // rotation - skewX
              var ry = Math.atan2(+b, a); // rotation + skewY
              if (crotation) {
                  transform.rotation = (rx + ry) * 0.5; // Here, assumes `skewX` === `skewY`
              }
              // Skew
              if (cskew) {
                  var skew = (ry - rx) * 0.5;
                  transform.skew.set(skew, skew);
              }
          }
          // Position
          if (cposition) {
              // Assumes the pivot is invariant.
              // tx = position.x - (a * px + c * py)
              // ty = position.y - (b * px + d * py)
              //
              // Thus,
              // position.x = tx + (a * px + c * py)
              // position.y = ty + (b * px + d * py)
              var pivot = transform.pivot;
              var px = pivot.x;
              var py = pivot.y;
              transform.position.set(tx + (a * px + c * py), ty + (b * px + d * py));
          }
          // Scale
          if (size != null && (cwidth || cheight)) {
              var w = wcardinalUi.toSizeNormalized(size.x * Math.sqrt(a * a + b * b));
              var h = wcardinalUi.toSizeNormalized(size.y * Math.sqrt(c * c + d * d));
              var s = shape.size;
              if (cwidth && cheight) {
                  s.set(w, h);
              }
              else if (cwidth) {
                  s.x = w;
              }
              else {
                  s.y = h;
              }
          }
          //
          shape.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
      };
      return UtilShapeTransforms;
  }());

  var ECommandShapeUngroup = /** @class */ (function (_super) {
      __extends(ECommandShapeUngroup, _super);
      function ECommandShapeUngroup(parent, selection) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._selection = selection;
          _this._before = [];
          _this._deleteds = [];
          _this._indices = [];
          _this._createds = [];
          return _this;
      }
      Object.defineProperty(ECommandShapeUngroup.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeUngroup.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeUngroup.prototype, "before", {
          get: function () {
              return this._before;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeUngroup.prototype, "deleteds", {
          get: function () {
              return this._deleteds;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeUngroup.prototype, "indices", {
          get: function () {
              return this._indices;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(ECommandShapeUngroup.prototype, "createds", {
          get: function () {
              return this._createds;
          },
          enumerable: false,
          configurable: true
      });
      ECommandShapeUngroup.prototype.execute = function () {
          // Save the current selection
          var selection = this._selection;
          selection.lock();
          this._before = selection.store();
          // Unselect non-group shapes
          var shapes = selection.get();
          for (var i = shapes.length - 1; 0 <= i; --i) {
              var shape = shapes[i];
              if (!this.isUngroupable(shape)) {
                  shape.selected = false;
                  shapes.splice(i, 1);
              }
          }
          // Delete groups
          var parent = this._parent;
          var deleteds = UtilShapeDeleter.delete(parent, shapes, true) || [];
          this._deleteds = deleteds;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              deleteds[i].reference += 1;
          }
          // Create shapes
          var createds = [];
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              var target = deleteds[i];
              var targetLocalTransform = target.transform.localTransform;
              var a = targetLocalTransform.a;
              var b = targetLocalTransform.b;
              var c = targetLocalTransform.c;
              var d = targetLocalTransform.d;
              var tx = targetLocalTransform.tx;
              var ty = targetLocalTransform.ty;
              var targetChildren = target.children;
              var clones = [];
              for (var j = 0, jmax = targetChildren.length; j < jmax; ++j) {
                  var clone = targetChildren[j].clone();
                  clone.lock(wcardinalUi.EShapeLockPart.ALL);
                  clone.parent = null;
                  clone.updateTransform();
                  var localTransform = clone.transform.localTransform;
                  localTransform.prepend(targetLocalTransform);
                  var capability = wcardinalUi.EShapeCapability.NONE;
                  if (wcardinalUi.EShapeCapabilities.contains(clone, wcardinalUi.EShapeCapability.POSITION)) {
                      capability |= wcardinalUi.EShapeCapability.POSITION;
                  }
                  if (wcardinalUi.EShapeCapabilities.contains(clone, wcardinalUi.EShapeCapability.ROTATION)) {
                      capability |= wcardinalUi.EShapeCapability.ROTATION;
                  }
                  if (wcardinalUi.EShapeCapabilities.contains(clone, wcardinalUi.EShapeCapability.SKEW)) {
                      capability |= wcardinalUi.EShapeCapability.SKEW;
                  }
                  if (capability !== wcardinalUi.EShapeCapability.NONE) {
                      UtilShapeTransforms.applyLocal(clone, localTransform, capability);
                  }
                  if (clone instanceof wcardinalUi.EShapeConnectorLine) {
                      var edge = clone.edge;
                      var tail = edge.tail;
                      if (tail.acceptor.shape == null) {
                          // Local
                          var tailLocal = tail.local;
                          var tailLocalX = tailLocal.x;
                          var tailLocalY = tailLocal.y;
                          tailLocal.set(a * tailLocalX + c * tailLocalY + tx, b * tailLocalX + d * tailLocalY + ty);
                          // Normal
                          var tailNormal = tail.normal;
                          var tailNormalX = tailNormal.x;
                          var tailNormalY = tailNormal.y;
                          var ndx = a * tailNormalX + c * tailNormalY;
                          var ndy = b * tailNormalX + d * tailNormalY;
                          var nd = ndx * ndx + ndy * ndy;
                          if (0.000001 < nd) {
                              var f = Math.sqrt(1 / nd);
                              tailNormal.set(ndx * f, ndy * f);
                          }
                      }
                      var head = edge.head;
                      if (head.acceptor.shape == null) {
                          // Local
                          var headLocal = head.local;
                          var headLocalX = headLocal.x;
                          var headLocalY = headLocal.y;
                          headLocal.set(a * headLocalX + c * headLocalY + tx, b * headLocalX + d * headLocalY + ty);
                          // Normal
                          var headNormal = head.normal;
                          var headNormalX = headNormal.x;
                          var headNormalY = headNormal.y;
                          var ndx = a * headNormalX + c * headNormalY;
                          var ndy = b * headNormalX + d * headNormalY;
                          var nd = ndx * ndx + ndy * ndy;
                          if (0.000001 < nd) {
                              var f = Math.sqrt(1 / nd);
                              headNormal.set(ndx * f, ndy * f);
                          }
                      }
                  }
                  clones.push(clone);
              }
              wcardinalUi.EShapeConnectors.moveAll(targetChildren, clones, targetChildren, clones);
              for (var j = 0, jmax = clones.length; j < jmax; ++j) {
                  var clone = clones[j];
                  clone.unlock(wcardinalUi.EShapeLockPart.ALL, true);
                  clone.attach(parent);
                  clone.reference += 1;
                  createds.push(clone);
              }
          }
          this._createds = createds;
          // Indices
          this._indices = UtilShapeSearch.toIndices(deleteds);
          // Select created shapes
          selection.clearAndAddAll(createds);
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeUngroup.prototype.isUngroupable = function (shape) {
          return (shape instanceof wcardinalUi.EShapeGroup &&
              wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.CHILDREN) &&
              wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.UNGROUPING));
      };
      ECommandShapeUngroup.prototype.redo = function () {
          // Delete shapes
          var selection = this._selection;
          selection.lock();
          selection.clearAndAddAll(this._deleteds);
          selection.delete(false);
          // Add created shapes
          var parent = this._parent;
          var createds = this._createds;
          for (var i = 0, imax = createds.length; i < imax; ++i) {
              createds[i].attach(parent);
          }
          // Select created shapes
          selection.clearAndAddAll(createds);
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeUngroup.prototype.undo = function () {
          // Delete created shapes
          var parent = this._parent;
          var selection = this._selection;
          selection.lock();
          var createds = this._createds;
          for (var i = createds.length - 1; 0 <= i; --i) {
              createds[i].detach();
          }
          // Restore deleted shapes
          var deleteds = this._deleteds;
          var indices = this._indices;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              deleteds[i].attach(parent, indices[i]);
          }
          // Restore the selection
          this._selection.restore(this._before);
          selection.update("TREE");
          selection.unlock();
          return true;
      };
      ECommandShapeUngroup.prototype.destroy = function () {
          // Stored selection
          this._before.length = 0;
          // Deleted shapes
          var deleteds = this._deleteds;
          for (var i = 0, imax = deleteds.length; i < imax; ++i) {
              var deleted = deleteds[i];
              deleted.reference -= 1;
              if (deleted.parent == null && deleted.reference <= 0) {
                  deleted.destroy();
              }
          }
          deleteds.length = 0;
          // Created shapes
          var createds = this._createds;
          for (var i = 0, imax = createds.length; i < imax; ++i) {
              var created = createds[i];
              created.reference -= 1;
              if (created.parent == null && created.reference <= 0) {
                  created.destroy();
              }
          }
          createds.length = 0;
      };
      return ECommandShapeUngroup;
  }(wcardinalUi.DCommandBase));

  function newGraphicTester(name, graphic) {
      return {
          id: undefined,
          graphicId: graphic.id,
          name: name,
          mappings: new Map()
      };
  }

  var UtilCsvState = /** @class */ (function () {
      function UtilCsvState(lines) {
          this.lines = lines;
          this.linesLength = lines.length;
          this.cursor = -1;
          this.line = "";
          this.lineLength = 0;
      }
      UtilCsvState.prototype.next = function () {
          var newCursor = this.cursor + 1;
          if (newCursor < this.linesLength) {
              this.cursor = newCursor;
              var nextLine = this.lines[newCursor];
              this.line = nextLine;
              this.lineLength = nextLine.length;
              return true;
          }
          return false;
      };
      return UtilCsvState;
  }());
  var UtilCsv = /** @class */ (function () {
      function UtilCsv() {
      }
      UtilCsv.parseLine = function (state) {
          var result = [];
          var icomma = -1;
          var line = state.line;
          var length = state.lineLength;
          for (var i = 0; i < length; ++i) {
              if (line.charAt(i) === '"') {
                  // Find the corresponding double quote
                  for (var j = i + 1; j < length; ++j) {
                      var k = line.indexOf('"', j);
                      if (k < 0) {
                          // Not found.
                          if (state.next()) {
                              // Consumes the next line
                              line += "\n" + state.line;
                              length += 1 + state.lineLength;
                              // And try again
                              j -= 1;
                              continue;
                          }
                          else {
                              // Skip to the end.
                              j = length + 1;
                              result.push(this.unescape(line.substring(i + 1, j - 1)));
                              i = j;
                          }
                      }
                      else {
                          j = k + 1;
                          // If the next character is a double quote, then continues.
                          if (j < length && line.charAt(j) === '"') {
                              continue;
                          }
                          // The next character isn't a double quote
                          result.push(this.unescape(line.substring(i + 1, j - 1)));
                          i = j;
                      }
                      break;
                  }
              }
              else {
                  if (icomma < i) {
                      icomma = line.indexOf(",", i);
                      if (icomma < 0) {
                          icomma = length;
                      }
                  }
                  result.push(line.substring(i, icomma));
                  i = icomma;
              }
          }
          return result;
      };
      UtilCsv.parse = function (str) {
          var lines = str.split(/(?:\r\n?|\n)/g);
          var result = [];
          var state = new UtilCsvState(lines);
          while (state.next()) {
              var row = this.parseLine(state);
              if (0 < row.length) {
                  result.push(row);
              }
          }
          return result;
      };
      UtilCsv.stringifyLine = function (line) {
          var result = "";
          var delimiter = "";
          for (var i = 0, imax = line.length; i < imax; ++i) {
              result += delimiter + this.escape(String(line[i]));
              delimiter = ",";
          }
          return result;
      };
      UtilCsv.stringify = function (lines) {
          var result = "";
          var delimiter = "";
          for (var i = 0, imax = lines.length; i < imax; ++i) {
              result += delimiter + this.stringifyLine(lines[i]);
              delimiter = "\n";
          }
          return result;
      };
      UtilCsv.escape = function (target) {
          var result = target.replace(/"/g, '""');
          if (result.length !== target.length ||
              0 <= target.indexOf(",") ||
              0 <= target.indexOf("\n") ||
              0 <= target.indexOf("\r")) {
              return "\"".concat(result, "\"");
          }
          return target;
      };
      UtilCsv.unescape = function (target) {
          return target.replace(/""/g, '"');
      };
      return UtilCsv;
  }());

  function toGraphicTesterObject(data) {
      var rows = UtilCsv.parse(data);
      var result = new Map();
      for (var i = 0, imax = rows.length; i < imax; ++i) {
          var row = rows[i];
          var uuid = parseInt(row[0], 10);
          if (uuid === uuid) {
              var original = row[1] || "";
              var value = row[2] || "";
              if (0 < original.length && 0 < value.length) {
                  var object = result.get(uuid);
                  if (object == null) {
                      object = {};
                      result.set(uuid, object);
                  }
                  object[original] = value;
              }
          }
      }
      return result;
  }

  function toGraphicTesterSerialized(simple) {
      var parsed = JSON.parse(simple.mappings);
      var uuids = parsed[0];
      var objects = parsed[1];
      var mappings = new Map();
      for (var i = 0, imax = Math.min(uuids.length, objects.length); i < imax; ++i) {
          mappings.set(uuids[i], objects[i]);
      }
      return {
          id: simple.id,
          graphicId: simple.graphicId,
          name: simple.name,
          mappings: mappings
      };
  }

  function toGraphicTesterSimple(serialized) {
      var mappings = serialized.mappings;
      var uuids = [];
      var objects = [];
      mappings.forEach(function (object, key) {
          uuids.push(key);
          objects.push(object);
      });
      return {
          id: serialized.id,
          graphicId: serialized.graphicId,
          name: serialized.name,
          mappings: JSON.stringify([uuids, objects])
      };
  }

  var EShapeActionExtensions = /** @class */ (function () {
      function EShapeActionExtensions() {
      }
      EShapeActionExtensions.add = function (extension) {
          var _a, _b;
          ((_a = this._typeToExtension) !== null && _a !== void 0 ? _a : (this._typeToExtension = new Map())).set(extension.type, extension);
          ((_b = this._extensions) !== null && _b !== void 0 ? _b : (this._extensions = [])).push(extension);
          wcardinalUi.EShapeActionValueDeserializers[extension.type] = extension.deserializer;
      };
      EShapeActionExtensions.get = function (type) {
          var typeToExtension = this._typeToExtension;
          if (typeToExtension != null) {
              return typeToExtension.get(type);
          }
      };
      EShapeActionExtensions.each = function (iteratee) {
          var extensions = this._extensions;
          if (extensions != null) {
              for (var i = 0, imax = extensions.length; i < imax; ++i) {
                  var extension = extensions[i];
                  iteratee(extension);
              }
          }
      };
      return EShapeActionExtensions;
  }());

  var EShapeActionExtensionInputType = {
      TEXT: 0
  };

  var EDialogActionExtension = /** @class */ (function () {
      function EDialogActionExtension(extension, dialog, condition, layout) {
          this._extension = extension;
          this._dialog = dialog;
          this._condition = condition;
          this._layout = layout;
      }
      Object.defineProperty(EDialogActionExtension.prototype, "select", {
          get: function () {
              var result = this._select;
              if (result === undefined) {
                  result = this.newSelect();
                  this._select = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtension.prototype.newSelect = function () {
          var extensionItems = this._extension.items;
          if (extensionItems != null && 0 < extensionItems.length) {
              var result = new wcardinalUi.DSelect({
                  weight: 1,
                  value: extensionItems[0].type,
                  menu: {
                      items: this.newSelectMenuItems(extensionItems)
                  }
              });
              return result;
          }
          return null;
      };
      EDialogActionExtension.prototype.newSelectMenuItems = function (items) {
          var result = [];
          for (var i = 0, imax = items.length; i < imax; ++i) {
              var item = items[i];
              result.push({
                  value: item.type,
                  text: {
                      value: item.label
                  }
              });
          }
          return result;
      };
      Object.defineProperty(EDialogActionExtension.prototype, "selectLayout", {
          get: function () {
              var result = this._selectLayout;
              if (result === undefined) {
                  result = this.newSelectLayout();
                  if (result != null) {
                      var layout = this._layout;
                      var conditionIndex = layout.getChildIndex(this._condition);
                      if (0 <= conditionIndex) {
                          layout.addChildAt(result, conditionIndex);
                      }
                      else {
                          layout.addChild(result);
                      }
                  }
                  this._selectLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtension.prototype.newSelectLayout = function () {
          var select = this.select;
          if (select != null) {
              return this.newLabeled("", select);
          }
          return null;
      };
      Object.defineProperty(EDialogActionExtension.prototype, "inputs", {
          get: function () {
              var result = this._inputs;
              if (result === undefined) {
                  result = this.newInputs();
                  this._inputs = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtension.prototype.newInputs = function () {
          var result = [];
          var extensionInputs = this._extension.inputs;
          if (extensionInputs != null) {
              for (var i = 0, imax = extensionInputs.length; i < imax; ++i) {
                  var input = extensionInputs[i];
                  switch (input.type) {
                      case EShapeActionExtensionInputType.TEXT:
                          var inputText = this.newInputText();
                          result.push(inputText);
                          break;
                  }
              }
          }
          return result;
      };
      EDialogActionExtension.prototype.newInputText = function () {
          var _this = this;
          return new wcardinalUi.DInputText({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      EDialogActionExtension.prototype.newLabel = function (label) {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: label
              }
          });
      };
      EDialogActionExtension.prototype.newSpace = function () {
          return new wcardinalUi.DLayoutSpace({
              width: 60
          });
      };
      EDialogActionExtension.prototype.newLabeled = function (label, input) {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  label != null ? this.newLabel(label) : this.newSpace(),
                  input,
                  this.newSpace()
              ]
          });
      };
      Object.defineProperty(EDialogActionExtension.prototype, "inputLayouts", {
          get: function () {
              var result = this._inputLayouts;
              if (result === undefined) {
                  result = this.newInputLayouts();
                  this._inputLayouts = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtension.prototype.newInputLayouts = function () {
          var result = [];
          var inputs = this.inputs;
          var layout = this._layout;
          var extensionInputs = this._extension.inputs;
          if (extensionInputs != null) {
              var conditionIndex = layout.getChildIndex(this._condition);
              for (var i = 0, imax = inputs.length; i < imax; ++i) {
                  var labeled = this.newLabeled(extensionInputs[i].label, inputs[i]);
                  result.push(labeled);
                  if (0 <= conditionIndex) {
                      layout.addChildAt(labeled, conditionIndex + 1 + i);
                  }
                  else {
                      layout.addChild(labeled);
                  }
              }
          }
          return result;
      };
      Object.defineProperty(EDialogActionExtension.prototype, "value", {
          get: function () {
              return this._extension.toValue(this.select, this._condition.input, this.inputs);
          },
          set: function (value) {
              if (value != null) {
                  this._extension.fromValue(value, this.select, this._condition.input, this.inputs);
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtension.prototype.show = function () {
          // Select
          var selectLayout = this.selectLayout;
          if (selectLayout != null) {
              selectLayout.show();
          }
          // Inputs
          var inputLayouts = this.inputLayouts;
          if (0 < inputLayouts.length) {
              var extension = this._extension;
              if (extension.onShow != null) {
                  extension.onShow(inputLayouts);
              }
              else {
                  for (var i = 0, imax = inputLayouts.length; i < imax; ++i) {
                      inputLayouts[i].show();
                  }
              }
          }
      };
      EDialogActionExtension.prototype.hide = function () {
          // Select
          var selectLayout = this._selectLayout;
          if (selectLayout != null) {
              selectLayout.hide();
          }
          // Inputs
          var inputLayouts = this._inputLayouts;
          if (inputLayouts != null) {
              for (var i = 0, imax = inputLayouts.length; i < imax; ++i) {
                  inputLayouts[i].hide();
              }
          }
      };
      EDialogActionExtension.prototype.reset = function () {
          // Select
          var select = this._select;
          if (select) {
              var items = this._extension.items;
              if (items != null && 0 < items.length) {
                  select.value = items[0].type;
              }
              else {
                  select.value = null;
              }
          }
          // Inputs
          var inputs = this._inputs;
          if (inputs) {
              var extensionInputs = this._extension.inputs;
              if (extensionInputs != null) {
                  for (var i = 0, imax = inputs.length; i < imax; ++i) {
                      inputs[i].value = extensionInputs[i].initial || "";
                  }
              }
          }
      };
      EDialogActionExtension.prototype.ok = function () {
          this._dialog.ok();
      };
      return EDialogActionExtension;
  }());

  var EDialogActionExtensionContainer = /** @class */ (function () {
      function EDialogActionExtensionContainer(dialog, condition, layout) {
          this._data = new Map();
          this._dialog = dialog;
          this._condition = condition;
          this._layout = layout;
      }
      Object.defineProperty(EDialogActionExtensionContainer.prototype, "value", {
          get: function () {
              var selected = this._selected;
              if (selected) {
                  return selected.value;
              }
              return null;
          },
          set: function (value) {
              if (value != null) {
                  var datum = this._data.get(value.type);
                  if (datum != null) {
                      datum.value = value;
                  }
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionExtensionContainer.prototype.get = function (type) {
          var data = this._data;
          var result = data.get(type);
          if (result != null) {
              return result;
          }
          var e = EShapeActionExtensions.get(type);
          if (e == null) {
              return null;
          }
          result = new EDialogActionExtension(e, this._dialog, this._condition, this._layout);
          data.set(type, result);
          return result;
      };
      EDialogActionExtensionContainer.prototype.show = function (type) {
          if (type != null) {
              var datum = this.get(type);
              if (datum != null) {
                  var selected = this._selected;
                  if (selected !== datum) {
                      if (selected != null) {
                          selected.hide();
                      }
                      this._selected = datum;
                      datum.show();
                  }
              }
              else {
                  this.hide();
              }
          }
          else {
              this.hide();
          }
      };
      EDialogActionExtensionContainer.prototype.hide = function () {
          var selected = this._selected;
          if (selected != null) {
              selected.hide();
              this._selected = null;
          }
      };
      EDialogActionExtensionContainer.prototype.reset = function () {
          this._data.forEach(function (datum) {
              datum.reset();
          });
      };
      EDialogActionExtensionContainer.prototype.onChange = function (type) {
          this.show(type);
      };
      return EDialogActionExtensionContainer;
  }());

  var toIconName$1 = function (index) {
      return "extension_icon_".concat(index);
  };
  var EShapeExtensions = /** @class */ (function () {
      function EShapeExtensions() {
      }
      EShapeExtensions.add = function (extension) {
          var _a, _b;
          if ("type" in extension) {
              var type = extension.type;
              // Name
              ((_a = this._typeToExtension) !== null && _a !== void 0 ? _a : (this._typeToExtension = new Map())).set(type, extension);
              // Deserializer
              var deserializer = extension.deserializer;
              if (deserializer != null) {
                  wcardinalUi.EShapeDeserializers[type] = deserializer;
              }
              // OnDeserialized
              var onDeserialized = extension.onDeserialized;
              if (onDeserialized != null) {
                  wcardinalUi.EShapeOnDeserializeds[type] = onDeserialized;
              }
              // Runtime
              var runtime = extension.runtime;
              if (runtime) {
                  wcardinalUi.EShapeRuntimes[type] = runtime;
              }
              // Capability
              var capability = extension.capability;
              if (capability != null) {
                  wcardinalUi.EShapeCapabilities.set(type, capability);
              }
              // Uploaded
              var uploaded = extension.uploaded;
              if (uploaded != null) {
                  wcardinalUi.EShapeUploadeds[type] = uploaded;
              }
              else {
                  if (wcardinalUi.EShapeUploadeds[type] == null) {
                      wcardinalUi.EShapeUploadeds[type] = wcardinalUi.createGroupUploaded;
                  }
              }
          }
          ((_b = this._extensions) !== null && _b !== void 0 ? _b : (this._extensions = [])).push(extension);
      };
      EShapeExtensions.get = function (type) {
          var typeToExtension = this._typeToExtension;
          if (typeToExtension != null) {
              return typeToExtension.get(type);
          }
      };
      EShapeExtensions.each = function (iteratee) {
          var extensions = this._extensions;
          if (extensions != null) {
              for (var i = 0, imax = extensions.length; i < imax; ++i) {
                  var extension = extensions[i];
                  iteratee(extension);
              }
          }
      };
      EShapeExtensions.merge = function (iconBuilder) {
          var extensions = this._extensions;
          if (extensions != null) {
              for (var i = 0, imax = extensions.length; i < imax; ++i) {
                  var extension = extensions[i];
                  if ("icon" in extension) {
                      var icon = extension.icon;
                      iconBuilder.add(toIconName$1(i), icon.width, icon.height, icon.svg);
                  }
              }
          }
      };
      EShapeExtensions.build = function (icons) {
          var extensions = this._extensions;
          if (extensions != null) {
              for (var i = 0, imax = extensions.length; i < imax; ++i) {
                  var extension = extensions[i];
                  if ("icon" in extension) {
                      extension.icon.texture = icons[toIconName$1(i)];
                  }
              }
          }
      };
      return EShapeExtensions;
  }());

  var ECommandShapeEmbeddedAcceptorEdgePropertySide = /** @class */ (function (_super) {
      __extends(ECommandShapeEmbeddedAcceptorEdgePropertySide, _super);
      function ECommandShapeEmbeddedAcceptorEdgePropertySide() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeEmbeddedAcceptorEdgePropertySide.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              return shape.side;
          }
          return wcardinalUi.EShapeAcceptorEdgeSide.NONE;
      };
      ECommandShapeEmbeddedAcceptorEdgePropertySide.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              shape.side = property;
          }
      };
      return ECommandShapeEmbeddedAcceptorEdgePropertySide;
  }(ECommandShapePropertySimple));

  var ECommandShapeEmbeddedAcceptorEdgePropertySubtype = /** @class */ (function (_super) {
      __extends(ECommandShapeEmbeddedAcceptorEdgePropertySubtype, _super);
      function ECommandShapeEmbeddedAcceptorEdgePropertySubtype() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeEmbeddedAcceptorEdgePropertySubtype.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              return shape.subtype;
          }
          return wcardinalUi.EShapeAcceptorEdgeType.HEAD;
      };
      ECommandShapeEmbeddedAcceptorEdgePropertySubtype.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              shape.subtype = property;
          }
      };
      return ECommandShapeEmbeddedAcceptorEdgePropertySubtype;
  }(ECommandShapePropertySimple));

  var ECommandShapeEmbeddedAcceptorEdgePropertyVvisible = /** @class */ (function (_super) {
      __extends(ECommandShapeEmbeddedAcceptorEdgePropertyVvisible, _super);
      function ECommandShapeEmbeddedAcceptorEdgePropertyVvisible() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeEmbeddedAcceptorEdgePropertyVvisible.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              return shape.vvisible;
          }
          return false;
      };
      ECommandShapeEmbeddedAcceptorEdgePropertyVvisible.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              shape.vvisible = property;
          }
      };
      return ECommandShapeEmbeddedAcceptorEdgePropertyVvisible;
  }(ECommandShapePropertySimple));

  var EEditorShapeEmbeddedAcceptorEdge = /** @class */ (function (_super) {
      __extends(EEditorShapeEmbeddedAcceptorEdge, _super);
      function EEditorShapeEmbeddedAcceptorEdge(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var selection = options.selection;
          _this._selection = selection;
          _this._diagram = options.diagram;
          // Layout
          _this.initLayout();
          return _this;
      }
      EEditorShapeEmbeddedAcceptorEdge.prototype.initLayout = function () {
          var _this = this;
          // Content height
          this.content.setHeight("padding");
          // Layout
          new wcardinalUi.DLayoutVertical({
              parent: this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              children: [this.newTextLabel(), this.selectSubtype, this.selectSide, this.checkVvisible]
          });
          // Selection
          var selection = this._selection;
          this.state.isDisabled = selection.isEmpty();
          selection.on("change", function () {
              _this.state.isDisabled = selection.isEmpty();
              _this.onSelectionChange(selection);
          });
          this.onSelectionChange(selection);
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.subtheme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorShapeEmbeddedAcceptorEdge.prototype, "selectSubtype", {
          get: function () {
              var _a;
              return ((_a = this._selectSubtype) !== null && _a !== void 0 ? _a : (this._selectSubtype = this.newSelectSubtype()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeEmbeddedAcceptorEdge.prototype.newSelectSubtype = function () {
          var _this = this;
          var subtheme = this.subtheme;
          return new wcardinalUi.DSelect({
              width: "padding",
              value: wcardinalUi.EShapeAcceptorEdgeType.HEAD,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeType.HEAD,
                          text: {
                              value: subtheme.toSelectSubtypeLabel(wcardinalUi.EShapeAcceptorEdgeType.HEAD)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeType.TAIL,
                          text: {
                              value: subtheme.toSelectSubtypeLabel(wcardinalUi.EShapeAcceptorEdgeType.TAIL)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeType.ALL,
                          text: {
                              value: subtheme.toSelectSubtypeLabel(wcardinalUi.EShapeAcceptorEdgeType.ALL)
                          }
                      }
                  ]
              },
              on: {
                  change: function (value) {
                      _this.onSelectSubtypeChanged(value);
                  }
              }
          });
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.onSelectSubtypeChanged = function (value) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeEmbeddedAcceptorEdgePropertySubtype(this._selection, value));
      };
      Object.defineProperty(EEditorShapeEmbeddedAcceptorEdge.prototype, "selectSide", {
          get: function () {
              var _a;
              return ((_a = this._selectSide) !== null && _a !== void 0 ? _a : (this._selectSide = this.newSelectSide()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeEmbeddedAcceptorEdge.prototype.newSelectSide = function () {
          var _this = this;
          var subtheme = this.subtheme;
          return new wcardinalUi.DSelectMultiple({
              width: "padding",
              values: [wcardinalUi.EShapeAcceptorEdgeSide.LEFT],
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeSide.LEFT,
                          text: {
                              value: subtheme.toSelectSideLabel(wcardinalUi.EShapeAcceptorEdgeSide.LEFT)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeSide.TOP,
                          text: {
                              value: subtheme.toSelectSideLabel(wcardinalUi.EShapeAcceptorEdgeSide.TOP)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeSide.RIGHT,
                          text: {
                              value: subtheme.toSelectSideLabel(wcardinalUi.EShapeAcceptorEdgeSide.RIGHT)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeAcceptorEdgeSide.BOTTOM,
                          text: {
                              value: subtheme.toSelectSideLabel(wcardinalUi.EShapeAcceptorEdgeSide.BOTTOM)
                          },
                          check: true
                      }
                  ]
              },
              on: {
                  change: function (values) {
                      _this.onSelectSideChange(values);
                  }
              }
          });
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.onSelectSideChange = function (values) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeEmbeddedAcceptorEdgePropertySide(this._selection, this.fromSelectSideValues(values)));
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.toSelectSideValues = function (value) {
          var result = [];
          if (value & wcardinalUi.EShapeAcceptorEdgeSide.LEFT) {
              result.push(wcardinalUi.EShapeAcceptorEdgeSide.LEFT);
          }
          if (value & wcardinalUi.EShapeAcceptorEdgeSide.TOP) {
              result.push(wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          }
          if (value & wcardinalUi.EShapeAcceptorEdgeSide.RIGHT) {
              result.push(wcardinalUi.EShapeAcceptorEdgeSide.RIGHT);
          }
          if (value & wcardinalUi.EShapeAcceptorEdgeSide.BOTTOM) {
              result.push(wcardinalUi.EShapeAcceptorEdgeSide.BOTTOM);
          }
          return result;
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.fromSelectSideValues = function (values) {
          var result = wcardinalUi.EShapeAcceptorEdgeSide.NONE;
          for (var i = 0, imax = values.length; i < imax; ++i) {
              result |= values[i];
          }
          return result;
      };
      Object.defineProperty(EEditorShapeEmbeddedAcceptorEdge.prototype, "checkVvisible", {
          get: function () {
              var _a;
              return ((_a = this._checkVvisible) !== null && _a !== void 0 ? _a : (this._checkVvisible = this.newCheckIsVvisible()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeEmbeddedAcceptorEdge.prototype.newCheckIsVvisible = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.subtheme.getCheckIsVvisibleLabel()
              },
              on: {
                  active: function () {
                      _this.onCheckVvisibleChanged(true);
                  },
                  inactive: function () {
                      _this.onCheckVvisibleChanged(false);
                  }
              }
          });
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.onCheckVvisibleChanged = function (isVvisible) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeEmbeddedAcceptorEdgePropertyVvisible(this._selection, isVvisible));
      };
      EEditorShapeEmbeddedAcceptorEdge.prototype.onSelectionChange = function (selection) {
          var selectSubtype = this.selectSubtype;
          var selectSide = this.selectSide;
          var checkVvisible = this.checkVvisible;
          var last = selection.last();
          if (last instanceof wcardinalUi.EShapeEmbeddedAcceptorEdge) {
              selectSubtype.value = last.subtype;
              selectSubtype.state.isEnabled = true;
              selectSide.values = this.toSelectSideValues(last.side);
              selectSide.state.isEnabled = true;
              checkVvisible.state.isActive = last.vvisible;
              checkVvisible.state.isEnabled = true;
          }
          else {
              selectSubtype.state.isEnabled = false;
              selectSide.state.isEnabled = false;
              checkVvisible.state.isEnabled = false;
          }
      };
      Object.defineProperty(EEditorShapeEmbeddedAcceptorEdge.prototype, "subtheme", {
          get: function () {
              var _a;
              return ((_a = this._subtheme) !== null && _a !== void 0 ? _a : (this._subtheme = this.newSubtheme()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeEmbeddedAcceptorEdge.prototype.newSubtheme = function () {
          return wcardinalUi.DThemes.get("EEditorShapeEmbeddedAcceptorEdge");
      };
      return EEditorShapeEmbeddedAcceptorEdge;
  }(wcardinalUi.DPane));

  var EShapeEmbeddedAcceptorEdges = /** @class */ (function () {
      function EShapeEmbeddedAcceptorEdges() {
      }
      EShapeEmbeddedAcceptorEdges.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeEmbeddedAcceptorEdge");
      };
      EShapeEmbeddedAcceptorEdges.create = function (existing) {
          var result = new wcardinalUi.EShapeEmbeddedAcceptorEdge();
          if (existing) {
              result.copy(existing);
          }
          else {
              result.subtype = wcardinalUi.EShapeAcceptorEdgeType.HEAD; // Connectable to heads only
              result.side = wcardinalUi.EShapeAcceptorEdgeSide.LEFT; // Connectable from the left side
              result.vvisible = true; // True if visible in the viewer mode
              result.stroke.set(false, 0x3399ff, 1);
              result.fill.set(true, 0x3399ff, 1);
          }
          return result;
      };
      EShapeEmbeddedAcceptorEdges.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              type: wcardinalUi.EShapeType.EMBEDDED_ACCEPTOR_EDGE,
              name: name,
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(0.667,0.667) translate(480, 480) rotate(+90) translate(-480, 480)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M480-640 280-440l56 56 104-103v407h80v-407l104 103 56-56-200-200ZM146-260q-32-49-49-105T80-480q0-83 31.5" +
                      "-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 59-17 115t-49 105l-58-58q22-37" +
                      " 33-78t11-84q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 43 11 84t33 78l-58 58Z\"/>" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeEmbeddedAcceptorEdges.create(existing); },
              editor: EEditorShapeEmbeddedAcceptorEdge
          });
      };
      return EShapeEmbeddedAcceptorEdges;
  }());

  var loadShapeExtensionEmbeddedAcceptorEdge = function () {
      EShapeEmbeddedAcceptorEdges.load();
  };

  var ECommandShapeButtonPropertyIsActive = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonPropertyIsActive, _super);
      function ECommandShapeButtonPropertyIsActive() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeButtonPropertyIsActive.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              return shape.state.isActive;
          }
          return false;
      };
      ECommandShapeButtonPropertyIsActive.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              shape.state.isActive = property;
          }
      };
      return ECommandShapeButtonPropertyIsActive;
  }(ECommandShapePropertySimple));

  var ECommandShapeButtonPropertyIsGrouped = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonPropertyIsGrouped, _super);
      function ECommandShapeButtonPropertyIsGrouped() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeButtonPropertyIsGrouped.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              return shape.isGrouped;
          }
          return false;
      };
      ECommandShapeButtonPropertyIsGrouped.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              shape.isGrouped = property;
          }
      };
      return ECommandShapeButtonPropertyIsGrouped;
  }(ECommandShapePropertySimple));

  var ECommandShapeButtonPropertyIsToggle = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonPropertyIsToggle, _super);
      function ECommandShapeButtonPropertyIsToggle() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapeButtonPropertyIsToggle.prototype.getProperty = function (shape, capability) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              return shape.isToggle;
          }
          return false;
      };
      ECommandShapeButtonPropertyIsToggle.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof wcardinalUi.EShapeButton) {
              shape.isToggle = property;
          }
      };
      return ECommandShapeButtonPropertyIsToggle;
  }(ECommandShapePropertySimple));

  var EEditorShapeButton = /** @class */ (function (_super) {
      __extends(EEditorShapeButton, _super);
      function EEditorShapeButton(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var selection = options.selection;
          _this._selection = selection;
          _this._diagram = options.diagram;
          // Layout
          _this.initLayout();
          return _this;
      }
      EEditorShapeButton.prototype.initLayout = function () {
          var _this = this;
          // Content height
          this.content.setHeight("padding");
          // Layout
          new wcardinalUi.DLayoutVertical({
              parent: this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              children: [
                  this.newTextLabel(),
                  this.checkIsToggle,
                  this.checkIsGrouped,
                  this.checkIsActive
              ]
          });
          // Selection
          var selection = this._selection;
          this.state.isDisabled = selection.isEmpty();
          selection.on("change", function () {
              _this.state.isDisabled = selection.isEmpty();
              _this.onSelectionChange(selection);
          });
          this.onSelectionChange(selection);
      };
      EEditorShapeButton.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.subtheme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorShapeButton.prototype, "checkIsToggle", {
          get: function () {
              var _a;
              return ((_a = this._checkIsToggle) !== null && _a !== void 0 ? _a : (this._checkIsToggle = this.newCheckIsToggle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButton.prototype.newCheckIsToggle = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.subtheme.getCheckIsToggleLabel()
              },
              on: {
                  active: function () {
                      _this.onCheckIsToggleChanged(true);
                  },
                  inactive: function () {
                      _this.onCheckIsToggleChanged(false);
                  }
              }
          });
      };
      EEditorShapeButton.prototype.onCheckIsToggleChanged = function (isActive) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonPropertyIsToggle(this._selection, isActive));
      };
      EEditorShapeButton.prototype.onSelectionChangeCheckIsToggle = function (selection) {
          var state = this.checkIsToggle.state;
          var last = selection.last();
          if (last instanceof wcardinalUi.EShapeButton) {
              state.lock();
              state.isActive = last.isToggle;
              state.isDisabled = false;
              state.unlock();
          }
          else {
              state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorShapeButton.prototype, "checkIsGrouped", {
          get: function () {
              var _a;
              return ((_a = this._checkIsGrouped) !== null && _a !== void 0 ? _a : (this._checkIsGrouped = this.newCheckIsGrouped()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButton.prototype.newCheckIsGrouped = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.subtheme.getCheckIsGroupedLabel()
              },
              on: {
                  active: function () {
                      _this.onCheckIsGroupedChanged(true);
                  },
                  inactive: function () {
                      _this.onCheckIsGroupedChanged(false);
                  }
              }
          });
      };
      EEditorShapeButton.prototype.onCheckIsGroupedChanged = function (isActive) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonPropertyIsGrouped(this._selection, isActive));
      };
      EEditorShapeButton.prototype.onSelectionChangeCheckIsGrouped = function (selection) {
          var state = this.checkIsGrouped.state;
          var last = selection.last();
          if (last instanceof wcardinalUi.EShapeButton) {
              state.lock();
              state.isActive = last.isGrouped;
              state.isDisabled = false;
              state.unlock();
          }
          else {
              state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorShapeButton.prototype, "checkIsActive", {
          get: function () {
              var _a;
              return ((_a = this._checkIsActive) !== null && _a !== void 0 ? _a : (this._checkIsActive = this.newCheckIsActive()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButton.prototype.newCheckIsActive = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.subtheme.getCheckIsActiveLabel()
              },
              on: {
                  active: function () {
                      _this.onCheckIsActiveChanged(true);
                  },
                  inactive: function () {
                      _this.onCheckIsActiveChanged(false);
                  }
              }
          });
      };
      EEditorShapeButton.prototype.onCheckIsActiveChanged = function (isActive) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonPropertyIsActive(this._selection, isActive));
      };
      EEditorShapeButton.prototype.onSelectionChangeCheckIsActive = function (selection) {
          var state = this.checkIsActive.state;
          var last = selection.last();
          if (last instanceof wcardinalUi.EShapeButton) {
              state.lock();
              state.isActive = last.state.isActive;
              state.isDisabled = false;
              state.unlock();
          }
          else {
              state.isDisabled = true;
          }
      };
      EEditorShapeButton.prototype.onSelectionChange = function (selection) {
          this.onSelectionChangeCheckIsToggle(selection);
          this.onSelectionChangeCheckIsGrouped(selection);
          this.onSelectionChangeCheckIsActive(selection);
      };
      Object.defineProperty(EEditorShapeButton.prototype, "subtheme", {
          get: function () {
              var _a;
              return ((_a = this._subtheme) !== null && _a !== void 0 ? _a : (this._subtheme = this.newSubtheme()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButton.prototype.newSubtheme = function () {
          return wcardinalUi.DThemes.get("EEditorShapeButton");
      };
      return EEditorShapeButton;
  }(wcardinalUi.DPane));

  var EShapeButtons = /** @class */ (function () {
      function EShapeButtons() {
      }
      EShapeButtons.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeButton");
      };
      EShapeButtons.create = function (existing) {
          var result = new wcardinalUi.EShapeButton();
          if (existing) {
              result.copy(existing);
          }
          else {
              var label = this.getTheme().getLabel();
              result.stroke.set(false, 0x3399ff, 1);
              result.fill.set(true, 0x3399ff, 1);
              result.text.set(label, 0xffffff, 1);
              result.cursor = "pointer";
              result.state.isFocusable = true;
              result.interactive = true;
          }
          return result;
      };
      EShapeButtons.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              type: wcardinalUi.EShapeType.BUTTON,
              name: name,
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(26.6666)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M22,9v6c0,1.1-0.9,2-2,2h-1l0-2h1V9H4v6h6v2H4c-1.1,0-2" +
                      "-0.9-2-2V9c0-1.1,0.9-2,2-2h16C21.1,7,22,7.9,22,9z M14.5,19 l1." +
                      "09-2.41L18,15.5l-2.41-1.09L14.5,12l-1.09,2.41L11,15.5l2.41,1.0" +
                      "9L14.5,19z M17,14l0.62-1.38L19,12l-1.38-0.62L17,10l-0.62,1.38 " +
                      "L15,12l1.38,0.62L17,14z M14.5,19l1.09-2.41L18,15.5l-2.41-1.09L" +
                      "14.5,12l-1.09,2.41L11,15.5l2.41,1.09L14.5,19z M17,14l0.62-1.38" +
                      " L19,12l-1.38-0.62L17,10l-0.62,1.38L15,12l1.38,0.62L17,14z\"/>" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeButtons.create(existing); },
              editor: EEditorShapeButton
          });
      };
      return EShapeButtons;
  }());

  var loadShapeExtensionButton = function () {
      EShapeButtons.load();
  };

  var EShapeButtonLayerButtonValue = /** @class */ (function () {
      function EShapeButtonLayerButtonValue(label, weight, layers, bringToFront, isGrouped, isActive) {
          this.label = label;
          this.weight = weight;
          this.layers = layers;
          this.bringToFront = bringToFront;
          this.isGrouped = isGrouped;
          this.isActive = isActive;
          this.action = new wcardinalUi.EShapeActionValueShowHideLayer("isActive", layers, bringToFront);
      }
      EShapeButtonLayerButtonValue.prototype.isEquals = function (target) {
          if (this.label !== target.label) {
              return false;
          }
          if (this.weight !== target.weight) {
              return false;
          }
          if (this.bringToFront !== target.bringToFront) {
              return false;
          }
          if (this.isGrouped !== target.isGrouped) {
              return false;
          }
          if (this.isActive !== target.isActive) {
              return false;
          }
          var layers = this.layers;
          var layersLength = layers.length;
          var targetLayers = target.layers;
          if (layersLength !== targetLayers.length) {
              return false;
          }
          for (var i = 0; i < layersLength; ++i) {
              if (layers[i] !== targetLayers[i]) {
                  return false;
              }
          }
          return true;
      };
      EShapeButtonLayerButtonValue.prototype.serizlize = function (manager) {
          var layersId = this.serializedLayers(manager);
          var bringToFront = this.bringToFront ? 1 : 0;
          var isGrouped = this.isGrouped ? 2 : 0;
          var isActive = this.isActive ? 4 : 0;
          var type = bringToFront | isGrouped | isActive;
          return manager.addResource("[".concat(manager.addResource(this.label), ",").concat(this.weight, ",").concat(layersId, ",").concat(type, "]"));
      };
      EShapeButtonLayerButtonValue.prototype.serializedLayers = function (manager) {
          var layers = this.layers;
          var serialized = "[";
          var delimiter = "";
          for (var i = 0, imax = layers.length; i < imax; ++i) {
              serialized += delimiter + layers[i];
              delimiter = ",";
          }
          serialized += "]";
          return manager.addResource(serialized);
      };
      EShapeButtonLayerButtonValue.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              return new EShapeButtonLayerButtonValue(resources[parsed[0]], parsed[1], this.deserializeLayers(parsed[2], manager), !!(parsed[3] & 0x1), !!(parsed[3] & 0x2), !!(parsed[3] & 0x4));
          }
          return null;
      };
      EShapeButtonLayerButtonValue.deserializeLayers = function (target, manager) {
          var result = [];
          var resources = manager.resources;
          var resourcesLength = resources.length;
          if (0 <= target && target < resourcesLength) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              for (var i = 0, imax = parsed.length; i < imax; ++i) {
                  result.push(parsed[i]);
              }
          }
          return result;
      };
      return EShapeButtonLayerButtonValue;
  }());

  var EShapeButtonLayerButtonValueContainer = /** @class */ (function () {
      function EShapeButtonLayerButtonValueContainer(onChange) {
          this._values = [];
          this._sizeX = 1;
          this._margin = 2;
          this._onChange = onChange;
      }
      Object.defineProperty(EShapeButtonLayerButtonValueContainer.prototype, "values", {
          get: function () {
              return this._values;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EShapeButtonLayerButtonValueContainer.prototype, "margin", {
          get: function () {
              return this._margin;
          },
          set: function (margin) {
              if (this._margin !== margin) {
                  this._margin = margin;
                  this._onChange();
              }
          },
          enumerable: false,
          configurable: true
      });
      EShapeButtonLayerButtonValueContainer.prototype.add = function (value, at) {
          if (at != null) {
              this._values.splice(at, 0, value);
          }
          else {
              this._values.push(value);
          }
          this._onChange();
      };
      EShapeButtonLayerButtonValueContainer.prototype.remove = function (index) {
          var values = this._values;
          if (0 <= index && index < values.length) {
              var result = values.splice(index, 1)[0];
              this._onChange();
              return result;
          }
          return null;
      };
      EShapeButtonLayerButtonValueContainer.prototype.indexOf = function (target) {
          var values = this._values;
          // Instance-based matching
          for (var i = 0, imax = values.length; i < imax; ++i) {
              var value = values[i];
              if (value === target) {
                  return i;
              }
          }
          // Data-based matching
          for (var i = 0, imax = values.length; i < imax; ++i) {
              var value = values[i];
              if (value.isEquals(target)) {
                  return i;
              }
          }
          return -1;
      };
      EShapeButtonLayerButtonValueContainer.prototype.get = function (index) {
          var result = this._values[index];
          if (result != null) {
              return result;
          }
          return null;
      };
      EShapeButtonLayerButtonValueContainer.prototype.set = function (index, value) {
          this._values[index] = value;
          this._onChange();
      };
      EShapeButtonLayerButtonValueContainer.prototype.swap = function (indexA, indexB) {
          var values = this._values;
          var tmp = values[indexB];
          values[indexB] = values[indexA];
          values[indexA] = tmp;
          this._onChange();
      };
      EShapeButtonLayerButtonValueContainer.prototype.size = function () {
          return this._values.length;
      };
      EShapeButtonLayerButtonValueContainer.prototype.copy = function (source) {
          // Values
          var values = this._values;
          var sourceValues = source._values;
          var sourceValuesLength = sourceValues.length;
          for (var i = 0; i < sourceValuesLength; ++i) {
              values[i] = sourceValues[i];
          }
          if (values.length !== sourceValuesLength) {
              values.length = sourceValuesLength;
          }
          //
          this._sizeX = source._sizeX;
          this._onChange();
          return this;
      };
      EShapeButtonLayerButtonValueContainer.prototype.serialize = function (manager) {
          var serialized = "";
          var delimiter = "[";
          var values = this._values;
          for (var i = 0, imax = values.length; i < imax; ++i) {
              serialized += delimiter + values[i].serizlize(manager);
              delimiter = ",";
          }
          serialized += delimiter + this._margin + "]";
          return manager.addResource(serialized);
      };
      EShapeButtonLayerButtonValueContainer.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              var isChanged = false;
              var values = this._values;
              if (0 < values.length) {
                  values.length = 0;
                  isChanged = true;
              }
              for (var i = 0, imax = parsed.length - 1; i < imax; ++i) {
                  var value = EShapeButtonLayerButtonValue.deserialize(parsed[i], manager);
                  if (value != null) {
                      values.push(value);
                  }
              }
              var margin = parsed[parsed.length - 1];
              if (this._margin !== margin) {
                  this._margin = margin;
                  isChanged = true;
              }
              if (0 < values.length) {
                  isChanged = true;
              }
              if (isChanged) {
                  this._onChange();
              }
          }
      };
      return EShapeButtonLayerButtonValueContainer;
  }());

  var EShapeButtonLayerIds = /** @class */ (function () {
      function EShapeButtonLayerIds() {
      }
      EShapeButtonLayerIds.ID = wcardinalUi.EShapeType.EXTENSION + 200;
      return EShapeButtonLayerIds;
  }());

  var EShapeButtonLayer = /** @class */ (function (_super) {
      __extends(EShapeButtonLayer, _super);
      function EShapeButtonLayer(mode, type) {
          if (type === void 0) { type = EShapeButtonLayerIds.ID; }
          var _this = _super.call(this, mode, type) || this;
          _this._button = new EShapeButtonLayerButtonValueContainer(function () {
              _this.onButtonValueChange();
          });
          _this._corner = wcardinalUi.EShapeCorner.ALL;
          return _this;
      }
      Object.defineProperty(EShapeButtonLayer.prototype, "button", {
          get: function () {
              return this._button;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EShapeButtonLayer.prototype, "corner", {
          get: function () {
              return this._corner;
          },
          set: function (corner) {
              if (this._corner !== corner) {
                  this._corner = corner;
                  this.updateUploaded();
              }
          },
          enumerable: false,
          configurable: true
      });
      EShapeButtonLayer.prototype.onButtonValueChange = function () {
          this.newButtons();
          this.layoutButtons();
      };
      EShapeButtonLayer.prototype.onSizeChange = function () {
          _super.prototype.onSizeChange.call(this);
          this.layoutButtons();
      };
      EShapeButtonLayer.prototype.newButtons = function () {
          var shapeButton = this.button;
          var buttonCount = shapeButton.size();
          var values = shapeButton.values;
          var children = this.children;
          var childrenLength = children.length;
          // Create / delete children
          if (childrenLength < buttonCount) {
              var master = 0 < childrenLength ? children[childrenLength - 1] : null;
              for (var i = childrenLength; i < buttonCount; ++i) {
                  var button = new wcardinalUi.EShapeButton();
                  var value = values[i];
                  if (master != null) {
                      button.copy(master);
                      button.text.value = value.label;
                  }
                  else {
                      button.stroke.set(false, 0x3399ff, 1);
                      button.fill.set(true, 0x3399ff, 1);
                      button.text.set(value.label, 0xffffff, 1);
                      button.state.isFocusable = true;
                      button.interactive = true;
                  }
                  if (0 < button.action.size()) {
                      button.action.set(0, value.action);
                  }
                  else {
                      button.action.add(value.action);
                  }
                  button.isToggle = true;
                  button.isGrouped = true;
                  button.attach(this);
              }
          }
          else if (buttonCount < childrenLength) {
              for (var i = childrenLength - 1; buttonCount <= i; --i) {
                  children[i].detach();
              }
          }
          // Update corner, action and state
          var corner = this.corner;
          for (var i = 0; i < buttonCount; ++i) {
              var child = children[i];
              var value = values[i];
              child.corner = this.toCorner(i, buttonCount, corner);
              child.text.value = value.label;
              if (0 < child.action.size()) {
                  child.action.set(0, value.action);
              }
              else {
                  child.action.add(value.action);
              }
              child.state.isActive = value.isActive;
          }
      };
      EShapeButtonLayer.prototype.layoutButtons = function () {
          var button = this.button;
          var buttonValues = button.values;
          var buttonValuesLength = buttonValues.length;
          var buttonMargin = button.margin;
          var size = this.size;
          var sizeX = size.x;
          var sizeY = size.y;
          var children = this.children;
          var childrenLength = children.length;
          // Total weight
          var totalWeight = 0;
          for (var i = 0; i < buttonValuesLength; ++i) {
              totalWeight += buttonValues[i].weight;
          }
          totalWeight = Math.max(0.0001, totalWeight);
          var buttonSpace = Math.max(0, sizeX - (buttonValuesLength - 1) * buttonMargin);
          var buttonSpaceFactor = buttonSpace / totalWeight;
          // Update
          var x = -sizeX * 0.5;
          for (var i = 0; i < childrenLength; ++i) {
              var buttonValue = buttonValues[i];
              var width = buttonValue.weight * buttonSpaceFactor;
              var child = children[i];
              child.lock(wcardinalUi.EShapeLockPart.ALL);
              child.size.set(width, sizeY);
              child.transform.position.set(x + width * 0.5, 0);
              child.unlock(wcardinalUi.EShapeLockPart.ALL, true);
              x += width + buttonMargin;
          }
      };
      EShapeButtonLayer.prototype.toCorner = function (index, size, corner) {
          var result = wcardinalUi.EShapeCorner.NONE;
          if (index === 0) {
              result |= wcardinalUi.EShapeCorner.LEFT & corner;
          }
          if (index === size - 1) {
              result |= wcardinalUi.EShapeCorner.RIGHT & corner;
          }
          return result;
      };
      EShapeButtonLayer.prototype.copy = function (source, part) {
          if (part === void 0) { part = wcardinalUi.EShapeCopyPart.ALL; }
          var result = _super.prototype.copy.call(this, source, part);
          if (source instanceof EShapeButtonLayer) {
              this._button.copy(source.button);
          }
          return result;
      };
      EShapeButtonLayer.prototype.serialize = function (manager) {
          var result = _super.prototype.serialize.call(this, manager);
          var resource = result[15];
          result[15] = manager.addResource("[".concat(this._button.serialize(manager), ",").concat(resource, "]"));
          return result;
      };
      return EShapeButtonLayer;
  }(wcardinalUi.EShapeGroupShadowed));

  var ECommandShapeButtonLayerValueAdd = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueAdd, _super);
      function ECommandShapeButtonLayerValueAdd(value, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._value = value;
          return _this;
      }
      ECommandShapeButtonLayerValueAdd.prototype.execute = function () {
          return this.redo();
      };
      ECommandShapeButtonLayerValueAdd.prototype.redo = function () {
          var value = this._value;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  shape.button.add(value);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueAdd.prototype.undo = function () {
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  shape.button.remove(shape.button.size() - 1);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeButtonLayerValueAdd;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeButtonLayerValueBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueBringForward, _super);
      function ECommandShapeButtonLayerValueBringForward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = shape.button.indexOf(target);
                  indices.push(index);
                  if (0 < index) {
                      shape.button.swap(index - 1, index);
                  }
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeButtonLayerValueBringForward.prototype.execute = function () {
          return true;
      };
      ECommandShapeButtonLayerValueBringForward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = indices[i];
                  if (0 < index) {
                      shape.button.swap(index - 1, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeButtonLayerValueBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeButtonLayerValueMargin = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueMargin, _super);
      function ECommandShapeButtonLayerValueMargin(value, selection) {
          var _this = _super.call(this) || this;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  values.push(shape.button.margin);
                  shape.button.margin = value;
              }
              else {
                  values.push(0);
              }
          }
          _this._values = values;
          _this._selection = selection;
          return _this;
      }
      ECommandShapeButtonLayerValueMargin.prototype.execute = function () {
          return true;
      };
      ECommandShapeButtonLayerValueMargin.prototype.redo = function () {
          var selection = this._selection;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var value = values[i];
                  values[i] = shape.button.margin;
                  shape.button.margin = value;
              }
          }
          selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueMargin.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeButtonLayerValueMargin;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeButtonLayerValueRemove = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueRemove, _super);
      function ECommandShapeButtonLayerValueRemove(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = shape.button.indexOf(target);
                  indices.push(index);
                  if (0 <= index) {
                      shape.button.remove(index);
                  }
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeButtonLayerValueRemove.prototype.execute = function () {
          return true;
      };
      ECommandShapeButtonLayerValueRemove.prototype.redo = function () {
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.button.remove(index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueRemove.prototype.undo = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.button.add(target, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeButtonLayerValueRemove;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeButtonLayerValueReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueReplace, _super);
      function ECommandShapeButtonLayerValueReplace(oldValue, newValue, selection, list) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._list = list;
          var indices = [];
          var oldValues = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = shape.button.indexOf(oldValue);
                  indices.push(index);
                  if (0 <= index) {
                      oldValues.push(shape.button.get(index));
                      shape.button.set(index, newValue);
                  }
                  else {
                      oldValues.push(newValue);
                  }
              }
              else {
                  indices.push(-1);
                  oldValues.push(newValue);
              }
          }
          _this._indices = indices;
          _this._oldValues = oldValues;
          if (list.data.selection.contains(oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeButtonLayerValueReplace.prototype.execute = function () {
          return true;
      };
      ECommandShapeButtonLayerValueReplace.prototype.redo = function () {
          var newValue = this._newValue;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.button.set(index, newValue);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueReplace.prototype.undo = function () {
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.button.set(index, oldValues[i]);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._newValue)) {
              list.data.selection.clearAndAdd(this._oldValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeButtonLayerValueReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeButtonLayerValueSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeButtonLayerValueSendBackward, _super);
      function ECommandShapeButtonLayerValueSendBackward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var button = shape.button;
                  var index = button.indexOf(target);
                  indices.push(index);
                  if (0 <= index && index < button.size() - 1) {
                      button.swap(index + 1, index);
                  }
              }
              else {
                  indices.push(-1);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeButtonLayerValueSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeButtonLayerValueSendBackward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeButtonLayer) {
                  var button = shape.button;
                  var index = indices[i];
                  if (0 <= index && index < button.size() - 1) {
                      button.swap(index + 1, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeButtonLayerValueSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeButtonLayerValueSendBackward;
  }(wcardinalUi.DCommandBase));

  var EDialogShapeButtonLayerValue = /** @class */ (function (_super) {
      __extends(EDialogShapeButtonLayerValue, _super);
      function EDialogShapeButtonLayerValue() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogShapeButtonLayerValue.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.inputLabel, this.inputWidth, this.newLayoutOf(theme.getSelectLayerLabel(), this.selectLayer), this.newLayoutOf(null, this.checkBringToFront), this.newLayoutOf(null, this.checkIsGrouped), this.newLayoutOf(null, this.checkIsActive));
          return result;
      };
      EDialogShapeButtonLayerValue.prototype.newLayoutOf = function (label, target) {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [this.newLayoutLabel(label), target, this.newLayoutSpace()]
          });
      };
      EDialogShapeButtonLayerValue.prototype.newLayoutLabel = function (label) {
          if (label != null) {
              return new wcardinalUi.DInputLabel({
                  width: 60,
                  text: {
                      value: label
                  }
              });
          }
          else {
              return this.newLayoutSpace();
          }
      };
      EDialogShapeButtonLayerValue.prototype.newLayoutSpace = function () {
          return new wcardinalUi.DLayoutSpace({
              width: 60
          });
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "inputLabel", {
          get: function () {
              var _a;
              return ((_a = this._inputLabel) !== null && _a !== void 0 ? _a : (this._inputLabel = this.newInputLabel()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newInputLabel = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputLabelLabel()
                  }
              },
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "inputWidth", {
          get: function () {
              var _a;
              return ((_a = this._inputWidth) !== null && _a !== void 0 ? _a : (this._inputWidth = this.newInputWidth()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newInputWidth = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputWidthLabel()
                  }
              },
              input: {
                  weight: 1,
                  text: {
                      value: 0
                  },
                  min: 0,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "selectLayer", {
          get: function () {
              var _a;
              return ((_a = this._selectLayer) !== null && _a !== void 0 ? _a : (this._selectLayer = this.newSelectLayer()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newSelectLayer = function () {
          return new wcardinalUi.DSelectMultiple({
              weight: 1
          });
      };
      EDialogShapeButtonLayerValue.prototype.newSelectLayerMenuItemOptions = function () {
          var _a;
          var diagram = (_a = this.options) === null || _a === void 0 ? void 0 : _a.diagram;
          if (diagram != null) {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  var result = [];
                  var layers = canvas.layer.children;
                  for (var i = layers.length - 1; 0 <= i; --i) {
                      var layer = layers[i];
                      result.push({
                          value: i,
                          text: {
                              value: layer.name
                          },
                          check: true
                      });
                  }
                  return result;
              }
          }
          return [];
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "checkBringToFront", {
          get: function () {
              var _a;
              return ((_a = this._checkBringToFront) !== null && _a !== void 0 ? _a : (this._checkBringToFront = this.newCheckBringToFront()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newCheckBringToFront = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckBringToFromLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "checkIsGrouped", {
          get: function () {
              var _a;
              return ((_a = this._checkIsGrouped) !== null && _a !== void 0 ? _a : (this._checkIsGrouped = this.newCheckIsGrouped()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newCheckIsGrouped = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckIsGroupedLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "checkIsActive", {
          get: function () {
              var _a;
              return ((_a = this._checkIsActive) !== null && _a !== void 0 ? _a : (this._checkIsActive = this.newCheckIsActive()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.newCheckIsActive = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckIsActiveLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      EDialogShapeButtonLayerValue.prototype.reset = function () {
          this.inputLabel.input.value = this.theme.newInputLabel();
          this.inputWidth.input.value = 1;
          this.selectLayer.values = [];
          this.selectLayer.menu = new wcardinalUi.DMenu({
              fit: true,
              items: this.newSelectLayerMenuItemOptions()
          });
          this.checkBringToFront.state.isActive = false;
          this.checkIsGrouped.state.isActive = true;
          return this;
      };
      Object.defineProperty(EDialogShapeButtonLayerValue.prototype, "value", {
          get: function () {
              return new EShapeButtonLayerButtonValue(this.inputLabel.input.value, this.inputWidth.input.value, this.selectLayer.values.slice(0), this.checkBringToFront.state.isActive, this.checkIsGrouped.state.isActive, this.checkIsActive.state.isActive);
          },
          set: function (value) {
              this.selectLayer.menu = new wcardinalUi.DMenu({
                  fit: true,
                  items: this.newSelectLayerMenuItemOptions()
              });
              if (value != null) {
                  this.inputLabel.input.value = value.label;
                  this.inputWidth.input.value = value.weight;
                  this.selectLayer.values = value.layers;
                  this.checkBringToFront.state.isActive = value.bringToFront;
                  this.checkIsGrouped.state.isActive = value.isGrouped;
                  this.checkIsActive.state.isActive = value.isActive;
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogShapeButtonLayerValue.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogShapeButtonLayerValue.prototype.getType = function () {
          return "EDialogShapeButtonLayerValue";
      };
      return EDialogShapeButtonLayerValue;
  }(wcardinalUi.DDialogLayered));

  var EEditorShapeButtonLayer = /** @class */ (function (_super) {
      __extends(EEditorShapeButtonLayer, _super);
      function EEditorShapeButtonLayer(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var selection = options.selection;
          _this._selection = selection;
          _this._diagram = options.diagram;
          // Layout
          _this.initLayout();
          return _this;
      }
      EEditorShapeButtonLayer.prototype.initLayout = function () {
          var _this = this;
          // Content height
          this.content.setHeight("padding");
          // Layout
          new wcardinalUi.DLayoutVertical({
              parent: this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              children: [
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      height: "auto",
                      children: [
                          this.newTextLabel(),
                          this.buttonNew,
                          this.buttonDelete,
                          this.buttonBringForward,
                          this.buttonSendBackward
                      ]
                  }),
                  this.columnList,
                  this.inputMargin
              ]
          });
          // Selection
          var selection = this._selection;
          this.state.isDisabled = selection.isEmpty();
          selection.on("change", function () {
              _this.state.isDisabled = selection.isEmpty();
              _this.onSelectionChange(selection);
          });
          var columnList = this.columnList;
          columnList.data.selection.on("change", function () {
              _this.onListSelectionChange(columnList);
          });
          this.onSelectionChange(selection);
      };
      EEditorShapeButtonLayer.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.subtheme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "buttonNew", {
          get: function () {
              var _a;
              return ((_a = this._buttonNew) !== null && _a !== void 0 ? _a : (this._buttonNew = this.newButtonNew()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.subtheme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          this.dialogButton
              .reset()
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueAdd(value, _this._selection));
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onSelectionChangeButtonNew = function (selection) {
          var buttonNew = this.buttonNew;
          if (selection.last() instanceof EShapeButtonLayer) {
              buttonNew.state.isDisabled = false;
          }
          else {
              buttonNew.state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "buttonDelete", {
          get: function () {
              var _a;
              return ((_a = this._buttonDelete) !== null && _a !== void 0 ? _a : (this._buttonDelete = this.newButtonDelete()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.subtheme.getButtonDeleteTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.data.selection.first;
                      if (first != null && 1 < columnList.data.size()) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueRemove(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onListSelectionChangeButtonDelete = function (columnList) {
          this.buttonDelete.state.isDisabled =
              columnList.data.size() <= 1 || columnList.data.selection.isEmpty();
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "buttonBringForward", {
          get: function () {
              var _a;
              return ((_a = this._buttonBringForward) !== null && _a !== void 0 ? _a : (this._buttonBringForward = this.newButtonBringForward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.subtheme.getButtonBringForwardTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.selection.first;
                      if (first != null && columnList.data.items[0] !== first) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueBringForward(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onListSelectionChangeButtonBringForward = function (columnList) {
          var first = columnList.data.selection.first;
          var items = columnList.data.items;
          this.buttonBringForward.state.isDisabled = first == null || items[0] === first;
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "buttonSendBackward", {
          get: function () {
              var _a;
              return ((_a = this._buttonSendBackward) !== null && _a !== void 0 ? _a : (this._buttonSendBackward = this.newButtonSendBackward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.subtheme.getButtonSendBackwardTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.selection.first;
                      var items = columnList.data.items;
                      if (first != null && items[items.length - 1] !== first) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueSendBackward(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onListSelectionChangeButtonSendBackward = function (columnList) {
          var first = columnList.selection.first;
          var items = columnList.data.items;
          this.buttonSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "dialogButton", {
          get: function () {
              var _a;
              return ((_a = this._dialogButton) !== null && _a !== void 0 ? _a : (this._dialogButton = this.newDialogButton()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newDialogButton = function () {
          return new EDialogShapeButtonLayerValue({
              diagram: this._diagram
          });
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "columnList", {
          get: function () {
              var _a;
              return ((_a = this._columnList) !== null && _a !== void 0 ? _a : (this._columnList = this.newColumnList()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newColumnList = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "100%",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      return value.label;
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onColumnListDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorShapeButtonLayer.prototype.onColumnListDblClick = function (e, _, item, list) {
          var _this = this;
          var oldValue = item.value;
          if (oldValue != null) {
              var columnDialog = this.dialogButton;
              columnDialog.value = oldValue;
              columnDialog.open(item).then(function (newValue) {
                  if (newValue != null) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueReplace(oldValue, newValue, _this._selection, list));
                  }
              });
          }
      };
      EEditorShapeButtonLayer.prototype.onSelectionChangeColumnList = function (selection) {
          var last = selection.last();
          var columnList = this.columnList;
          columnList.data.items = last instanceof EShapeButtonLayer ? last.button.values : [];
          this.onListSelectionChange(columnList);
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "inputMargin", {
          get: function () {
              var _a;
              return ((_a = this._inputMargin) !== null && _a !== void 0 ? _a : (this._inputMargin = this.newInputMargin()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newInputMargin = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.subtheme.getInputMarginLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeButtonLayerValueMargin(value, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeButtonLayer.prototype.onSelectionChangeInputRowHeight = function (selection) {
          var last = selection.last();
          var input = this.inputMargin;
          if (last instanceof EShapeButtonLayer) {
              input.input.value = last.button.margin;
              input.state.isDisabled = false;
          }
          else {
              input.state.isDisabled = true;
          }
      };
      EEditorShapeButtonLayer.prototype.onSelectionChange = function (selection) {
          this.onSelectionChangeButtonNew(selection);
          this.onSelectionChangeColumnList(selection);
      };
      EEditorShapeButtonLayer.prototype.onListSelectionChange = function (columnList) {
          this.onListSelectionChangeButtonDelete(columnList);
          this.onListSelectionChangeButtonBringForward(columnList);
          this.onListSelectionChangeButtonSendBackward(columnList);
      };
      Object.defineProperty(EEditorShapeButtonLayer.prototype, "subtheme", {
          get: function () {
              var _a;
              return ((_a = this._subtheme) !== null && _a !== void 0 ? _a : (this._subtheme = this.newSubtheme()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeButtonLayer.prototype.newSubtheme = function () {
          return wcardinalUi.DThemes.get("EEditorShapeButtonLayer");
      };
      return EEditorShapeButtonLayer;
  }(wcardinalUi.DPane));

  var EShapeButtonLayers = /** @class */ (function () {
      function EShapeButtonLayers() {
      }
      EShapeButtonLayers.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeButtonLayer");
      };
      EShapeButtonLayers.create = function (existing) {
          var result = new EShapeButtonLayer(wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR);
          if (existing) {
              result.copy(existing);
              if (!(existing instanceof EShapeButtonLayer)) {
                  var label = this.getTheme().getLabel();
                  result.button.add(new EShapeButtonLayerButtonValue(label, 1, [], false, true, false));
              }
          }
          else {
              var label = this.getTheme().getLabel();
              result.button.add(new EShapeButtonLayerButtonValue(label, 1, [], false, true, false));
          }
          result.onSizeChange();
          return result;
      };
      EShapeButtonLayers.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              type: EShapeButtonLayerIds.ID,
              name: name,
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(26.6666)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M22,9v6c0,1.1-0.9,2-2,2h-1l0-2h1V9H4v6h6v2H4c-1.1,0-2" +
                      "-0.9-2-2V9c0-1.1,0.9-2,2-2h16C21.1,7,22,7.9,22,9z\"/>" +
                      "<path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7" +
                      ".36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16zm0-11.47L17.74 9 12 13.47 6." +
                      "26 9 12 4.53z\" transform=\"translate(7.25,8) scale(0.6)\"/>" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeButtonLayers.create(existing); },
              deserializer: function (item, manager) { return EShapeButtonLayers.deserialize(item, manager); },
              editor: EEditorShapeButtonLayer,
              uploaded: wcardinalUi.createGroupUploaded,
              capability: (wcardinalUi.EShapeCapability.PRIMITIVE |
                  wcardinalUi.EShapeCapability.STROKE_SIDE |
                  wcardinalUi.EShapeCapability.BORDER_RADIUS) &
                  ~wcardinalUi.EShapeCapability.CHILDREN
          });
      };
      EShapeButtonLayers.deserialize = function (item, manager) {
          var shape = new EShapeButtonLayer(manager.mode);
          var index = item[15];
          var resources = manager.resources;
          if (0 <= index && index < resources.length) {
              var parsed = manager.getExtension(index);
              if (parsed == null) {
                  parsed = JSON.parse(resources[index]);
                  manager.setExtension(index, parsed);
              }
              shape.button.deserialize(parsed[0], manager);
              item[15] = parsed[parsed.length - 1];
          }
          var result = wcardinalUi.deserializeBase(item, manager, shape);
          shape.size.init();
          return result;
      };
      return EShapeButtonLayers;
  }());

  var loadShapeExtensionButtonLayer = function () {
      EShapeButtonLayers.load();
  };

  var EShapeChartTick = /** @class */ (function () {
      function EShapeChartTick(major, minor) {
          this.major = major;
          this.minor = minor;
      }
      EShapeChartTick.prototype.copy = function (source) {
          this.major.copy(source.major);
          this.minor.copy(source.minor);
          return this;
      };
      EShapeChartTick.prototype.serialize = function (manager) {
          return manager.addResource("[".concat(this.major.serialize(manager), ",").concat(this.minor.serialize(manager), "]"));
      };
      EShapeChartTick.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              this.major.deserialize(parsed[0], manager);
              this.minor.deserialize(parsed[1], manager);
          }
      };
      return EShapeChartTick;
  }());

  var EShapeChartTickMajor = /** @class */ (function () {
      function EShapeChartTickMajor(count) {
          this.count = count;
      }
      EShapeChartTickMajor.prototype.copy = function (source) {
          this.count = source.count;
          return this;
      };
      EShapeChartTickMajor.prototype.serialize = function (manager) {
          return manager.addResource("".concat(this.count));
      };
      EShapeChartTickMajor.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              this.count = parsed;
          }
      };
      return EShapeChartTickMajor;
  }());

  var EShapeChartTickMinor = /** @class */ (function () {
      function EShapeChartTickMinor(count) {
          this.count = count;
      }
      EShapeChartTickMinor.prototype.copy = function (source) {
          this.count = source.count;
          return this;
      };
      EShapeChartTickMinor.prototype.serialize = function (manager) {
          return manager.addResource("".concat(this.count));
      };
      EShapeChartTickMinor.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              this.count = parsed;
          }
      };
      return EShapeChartTickMinor;
  }());

  var EShapeChartAxisX = /** @class */ (function () {
      function EShapeChartAxisX() {
          this.padding = 10;
          this.tick = new EShapeChartTick(new EShapeChartTickMajor(3), new EShapeChartTickMinor(3));
      }
      EShapeChartAxisX.prototype.copy = function (source) {
          this.padding = source.padding;
          this.tick.copy(source.tick);
          return this;
      };
      EShapeChartAxisX.prototype.serialize = function (manager) {
          return manager.addResource("[".concat(this.padding, ",").concat(this.tick.serialize(manager), "]"));
      };
      EShapeChartAxisX.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              this.padding = parsed[0];
              this.tick.deserialize(parsed[1], manager);
          }
      };
      return EShapeChartAxisX;
  }());

  var EShapeChartAxisY = /** @class */ (function (_super) {
      __extends(EShapeChartAxisY, _super);
      function EShapeChartAxisY() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return EShapeChartAxisY;
  }(EShapeChartAxisX));

  var EShapeChartAxis = /** @class */ (function () {
      function EShapeChartAxis() {
          this.x = new EShapeChartAxisX();
          this.y = new EShapeChartAxisY();
      }
      EShapeChartAxis.prototype.copy = function (source) {
          this.x.copy(source.x);
          this.y.copy(source.y);
          return this;
      };
      EShapeChartAxis.prototype.serialize = function (manager) {
          return manager.addResource("[".concat(this.x.serialize(manager), ",").concat(this.y.serialize(manager), "]"));
      };
      EShapeChartAxis.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              this.x.deserialize(parsed[0], manager);
              this.y.deserialize(parsed[1], manager);
          }
      };
      return EShapeChartAxis;
  }());

  var EShapeChartLineIds = /** @class */ (function () {
      function EShapeChartLineIds() {
      }
      EShapeChartLineIds.ID = wcardinalUi.EShapeType.EXTENSION + 0;
      EShapeChartLineIds.PLOT_AREA_ID = "plot-area";
      EShapeChartLineIds.LINE_ID = "line";
      EShapeChartLineIds.X_AXIS_ID = "x-axis";
      EShapeChartLineIds.X_AXIS_TICK_MAJOR_ID = "x-axis-tick-major";
      EShapeChartLineIds.X_AXIS_TICK_MINOR_ID = "x-axis-tick-minor";
      EShapeChartLineIds.Y_AXIS_ID = "y-axis";
      EShapeChartLineIds.Y_AXIS_TICK_MAJOR_ID = "y-axis-tick-major";
      EShapeChartLineIds.Y_AXIS_TICK_MINOR_ID = "y-axis-tick-minor";
      return EShapeChartLineIds;
  }());

  var EShapeChartLine = /** @class */ (function (_super) {
      __extends(EShapeChartLine, _super);
      function EShapeChartLine(mode, type) {
          if (type === void 0) { type = EShapeChartLineIds.ID; }
          var _this = _super.call(this, mode, type) || this;
          _this.axis = new EShapeChartAxis();
          return _this;
      }
      EShapeChartLine.prototype.copy = function (source, part) {
          if (part === void 0) { part = wcardinalUi.EShapeCopyPart.ALL; }
          var result = _super.prototype.copy.call(this, source, part);
          if (source instanceof EShapeChartLine) {
              this.axis.copy(source.axis);
          }
          return result;
      };
      EShapeChartLine.prototype.serialize = function (manager) {
          var result = _super.prototype.serialize.call(this, manager);
          var resource = result[15];
          result[15] = manager.addResource("[".concat(this.axis.serialize(manager), ",").concat(resource, "]"));
          return result;
      };
      return EShapeChartLine;
  }(wcardinalUi.EShapeGroup));

  var ECommandChartAxisXPadding = /** @class */ (function (_super) {
      __extends(ECommandChartAxisXPadding, _super);
      function ECommandChartAxisXPadding() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartAxisXPadding.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.x.padding;
          }
          return 0;
      };
      ECommandChartAxisXPadding.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.x.padding = property;
          }
      };
      ECommandChartAxisXPadding.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartAxisXPadding;
  }(ECommandShapePropertySimple));

  var ECommandChartAxisYPadding = /** @class */ (function (_super) {
      __extends(ECommandChartAxisYPadding, _super);
      function ECommandChartAxisYPadding() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartAxisYPadding.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.y.padding;
          }
          return 0;
      };
      ECommandChartAxisYPadding.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.y.padding = property;
          }
      };
      ECommandChartAxisYPadding.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartAxisYPadding;
  }(ECommandShapePropertySimple));

  var ECommandChartTickXMajorCount = /** @class */ (function (_super) {
      __extends(ECommandChartTickXMajorCount, _super);
      function ECommandChartTickXMajorCount() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartTickXMajorCount.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.x.tick.major.count;
          }
          return 0;
      };
      ECommandChartTickXMajorCount.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.x.tick.major.count = property;
          }
      };
      ECommandChartTickXMajorCount.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartTickXMajorCount;
  }(ECommandShapePropertySimple));

  var ECommandChartTickXMinorCount = /** @class */ (function (_super) {
      __extends(ECommandChartTickXMinorCount, _super);
      function ECommandChartTickXMinorCount() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartTickXMinorCount.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.x.tick.minor.count;
          }
          return 0;
      };
      ECommandChartTickXMinorCount.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.x.tick.minor.count = property;
          }
      };
      ECommandChartTickXMinorCount.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartTickXMinorCount;
  }(ECommandShapePropertySimple));

  var ECommandChartTickYMajorCount = /** @class */ (function (_super) {
      __extends(ECommandChartTickYMajorCount, _super);
      function ECommandChartTickYMajorCount() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartTickYMajorCount.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.y.tick.major.count;
          }
          return 0;
      };
      ECommandChartTickYMajorCount.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.y.tick.major.count = property;
          }
      };
      ECommandChartTickYMajorCount.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartTickYMajorCount;
  }(ECommandShapePropertySimple));

  var ECommandChartTickYMinorCount = /** @class */ (function (_super) {
      __extends(ECommandChartTickYMinorCount, _super);
      function ECommandChartTickYMinorCount() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandChartTickYMinorCount.prototype.getProperty = function (shape, capability) {
          if (shape instanceof EShapeChartLine) {
              return shape.axis.y.tick.minor.count;
          }
          return 0;
      };
      ECommandChartTickYMinorCount.prototype.setProperty = function (shape, capability, property) {
          if (shape instanceof EShapeChartLine) {
              shape.axis.y.tick.minor.count = property;
          }
      };
      ECommandChartTickYMinorCount.prototype.isMergeable = function () {
          return true;
      };
      return ECommandChartTickYMinorCount;
  }(ECommandShapePropertySimple));

  var EShapeChartAxes = /** @class */ (function () {
      function EShapeChartAxes() {
      }
      EShapeChartAxes.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeChartLine");
      };
      EShapeChartAxes.getPlotArea = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.PLOT_AREA_ID);
      };
      EShapeChartAxes.newPlotArea = function (shape) {
          var result = new wcardinalUi.EShapeRectangle();
          result.id = EShapeChartLineIds.PLOT_AREA_ID;
          result.size.set(shape.size.x, shape.size.y);
          result.stroke.enable = false;
          result.fill.alpha = wcardinalUi.EShapeDefaults.FILL_ALPHA * 0.5;
          result.text.value = this.getTheme().newPlotAreaLabel();
          result.text.align.vertical = wcardinalUi.EShapeTextAlignVertical.OUTSIDE_TOP;
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.getLine = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.LINE_ID);
      };
      EShapeChartAxes.newLine = function (shape) {
          var sx = 0.8 * shape.size.x;
          var sy = 0.8 * shape.size.y;
          var sxh = sx * 0.5;
          var syh = sy * 0.5;
          var result = wcardinalUi.createLine([-sxh, +syh, +sxh, -syh], [], wcardinalUi.EShapeDefaults.STROKE_WIDTH, wcardinalUi.EShapePointsStyle.NONE);
          result.id = EShapeChartLineIds.LINE_ID;
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.getXAxis = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.X_AXIS_ID);
      };
      EShapeChartAxes.getXAxisTickMajor = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.X_AXIS_TICK_MAJOR_ID);
      };
      EShapeChartAxes.getXAxisTickMinor = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.X_AXIS_TICK_MINOR_ID);
      };
      EShapeChartAxes.newXAxis = function (shape) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.X_AXIS_ID;
          result.size.set(shape.size.x, 0);
          result.transform.position.set(0, shape.size.y * 0.5);
          result.points.position = wcardinalUi.EShapeBarPosition.LEFT;
          result.points.size = -1;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH;
          result.text.value = this.getTheme().newXAxisLabel();
          result.text.align.vertical = wcardinalUi.EShapeTextAlignVertical.OUTSIDE_BOTTOM;
          result.text.padding.set(50, 50);
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.createXAxis = function (selection) {
          selection.createChildren(function (shape) {
              return [EShapeChartAxes.newXAxis(shape)];
          });
      };
      EShapeChartAxes.deleteXAxis = function (selection) {
          selection.deleteChildren(function (shape) {
              var result = null;
              var axis = EShapeChartAxes.getXAxis(shape);
              if (axis != null) {
                  result = [axis];
              }
              var major = EShapeChartAxes.getXAxisTickMajor(shape);
              if (major != null) {
                  if (result == null) {
                      result = [major];
                  }
                  else {
                      result.push(major);
                  }
              }
              var minor = EShapeChartAxes.getXAxisTickMinor(shape);
              if (minor != null) {
                  if (result == null) {
                      result = [minor];
                  }
                  else {
                      result.push(minor);
                  }
              }
              return result;
          });
      };
      EShapeChartAxes.setXAxisPadding = function (padding, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartAxisXPadding(selection, padding));
      };
      EShapeChartAxes.newXAxisTickMajor = function (shape) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.X_AXIS_TICK_MAJOR_ID;
          result.size.set(0, 0);
          result.transform.position.set(0, shape.size.y * 0.5);
          result.points.position = wcardinalUi.EShapeBarPosition.TOP;
          result.points.size = 10;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH;
          result.text.value = "%YMD\n%Hms.%mi";
          result.text.align.vertical = wcardinalUi.EShapeTextAlignVertical.TOP;
          result.text.padding.set(12.5, 12.5);
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.newXAxisTickMinor = function (shape, x, y) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.X_AXIS_TICK_MINOR_ID;
          result.size.set(0, 0);
          result.transform.position.set(x, y);
          result.points.position = wcardinalUi.EShapeBarPosition.TOP;
          result.points.size = 5;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH * 0.5;
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.createXAxisTickMajor = function (selection) {
          var _this = this;
          selection.createChildren(function (shape) {
              var axis = EShapeChartAxes.getXAxis(shape);
              if (axis != null) {
                  return [_this.newXAxisTickMajor(shape)];
              }
              return null;
          });
      };
      EShapeChartAxes.deleteXAxisTickMajor = function (selection) {
          selection.deleteChildren(function (shape) {
              var result = null;
              var major = EShapeChartAxes.getXAxisTickMajor(shape);
              if (major != null) {
                  result = [major];
              }
              var minor = EShapeChartAxes.getXAxisTickMinor(shape);
              if (minor != null) {
                  if (result == null) {
                      result = [minor];
                  }
                  else {
                      result.push(minor);
                  }
              }
              return result;
          });
      };
      EShapeChartAxes.setXAxisTickMajorCount = function (count, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartTickXMajorCount(selection, count));
      };
      EShapeChartAxes.createXAxisTickMinor = function (selection) {
          var _this = this;
          selection.createChildren(function (shape) {
              var axis = EShapeChartAxes.getXAxis(shape);
              if (axis != null) {
                  var sizeX = axis.size.x;
                  var position = axis.transform.position;
                  return [_this.newXAxisTickMinor(shape, position.x - sizeX * 0.25, position.y)];
              }
              return null;
          });
      };
      EShapeChartAxes.deleteXAxisTickMinor = function (selection) {
          selection.deleteChildren(function (shape) {
              var minor = EShapeChartAxes.getXAxisTickMinor(shape);
              if (minor != null) {
                  return [minor];
              }
              return null;
          });
      };
      EShapeChartAxes.setXAxisTickMinorCount = function (count, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartTickXMinorCount(selection, count));
      };
      EShapeChartAxes.getYAxis = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.Y_AXIS_ID);
      };
      EShapeChartAxes.getYAxisTickMajor = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.Y_AXIS_TICK_MAJOR_ID);
      };
      EShapeChartAxes.getYAxisTickMinor = function (shape) {
          return UtilShapeSearch.findChildById(shape, EShapeChartLineIds.Y_AXIS_TICK_MINOR_ID);
      };
      EShapeChartAxes.newYAxis = function (shape) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.Y_AXIS_ID;
          result.size.set(0, shape.size.y);
          result.transform.position.set(-shape.size.x * 0.5, 0);
          result.points.position = wcardinalUi.EShapeBarPosition.TOP;
          result.points.size = -1;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH;
          result.text.value = this.getTheme().newYAxisLabel();
          result.text.align.horizontal = wcardinalUi.EShapeTextAlignHorizontal.OUTSIDE_LEFT;
          result.text.direction = wcardinalUi.EShapeTextDirection.BOTTOM_TO_TOP;
          result.text.padding.set(50, 50);
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.createYAxis = function (selection) {
          selection.createChildren(function (shape) {
              return [EShapeChartAxes.newYAxis(shape)];
          });
      };
      EShapeChartAxes.deleteYAxis = function (selection) {
          selection.deleteChildren(function (shape) {
              var result = null;
              var axis = EShapeChartAxes.getYAxis(shape);
              if (axis != null) {
                  result = [axis];
              }
              var major = EShapeChartAxes.getYAxisTickMajor(shape);
              if (major != null) {
                  if (result == null) {
                      result = [major];
                  }
                  else {
                      result.push(major);
                  }
              }
              var minor = EShapeChartAxes.getYAxisTickMinor(shape);
              if (minor != null) {
                  if (result == null) {
                      result = [minor];
                  }
                  else {
                      result.push(minor);
                  }
              }
              return result;
          });
      };
      EShapeChartAxes.setYAxisPadding = function (padding, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartAxisYPadding(selection, padding));
      };
      EShapeChartAxes.newYAxisTickMajor = function (shape) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.Y_AXIS_TICK_MAJOR_ID;
          result.size.set(0, 0);
          result.transform.position.set(-shape.size.x * 0.5, 0);
          result.points.position = wcardinalUi.EShapeBarPosition.RIGHT;
          result.points.size = 10;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH;
          result.text.value = "%ssi";
          result.text.align.horizontal = wcardinalUi.EShapeTextAlignHorizontal.RIGHT;
          result.text.padding.set(12.5, 12.5);
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.newYAxisTickMinor = function (shape, x, y) {
          var result = new wcardinalUi.EShapeBar();
          result.id = EShapeChartLineIds.Y_AXIS_TICK_MINOR_ID;
          result.size.set(0, 0);
          result.transform.position.set(x, y);
          result.points.position = wcardinalUi.EShapeBarPosition.RIGHT;
          result.points.size = 5;
          result.stroke.width = wcardinalUi.EShapeDefaults.STROKE_WIDTH * 0.5;
          result.attach(shape);
          return result;
      };
      EShapeChartAxes.createYAxisTickMajor = function (selection) {
          var _this = this;
          selection.createChildren(function (shape) {
              var axis = EShapeChartAxes.getYAxis(shape);
              if (axis != null) {
                  return [_this.newYAxisTickMajor(shape)];
              }
              return null;
          });
      };
      EShapeChartAxes.deleteYAxisTickMajor = function (selection) {
          selection.deleteChildren(function (shape) {
              var result = null;
              var major = EShapeChartAxes.getYAxisTickMajor(shape);
              if (major != null) {
                  result = [major];
              }
              var minor = EShapeChartAxes.getYAxisTickMinor(shape);
              if (minor != null) {
                  if (result == null) {
                      result = [minor];
                  }
                  else {
                      result.push(minor);
                  }
              }
              return result;
          });
      };
      EShapeChartAxes.setYAxisTickMajorCount = function (count, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartTickYMajorCount(selection, count));
      };
      EShapeChartAxes.createYAxisTickMinor = function (selection) {
          var _this = this;
          selection.createChildren(function (shape) {
              var axis = EShapeChartAxes.getYAxis(shape);
              if (axis != null) {
                  var sizeY = axis.size.y;
                  var position = axis.transform.position;
                  return [_this.newYAxisTickMinor(shape, position.x, position.y + sizeY * 0.25)];
              }
              return null;
          });
      };
      EShapeChartAxes.deleteYAxisTickMinor = function (selection) {
          selection.deleteChildren(function (shape) {
              var minor = EShapeChartAxes.getYAxisTickMinor(shape);
              if (minor != null) {
                  return [minor];
              }
              return null;
          });
      };
      EShapeChartAxes.setYAxisTickMinorCount = function (count, selection) {
          wcardinalUi.DControllers.getCommandController().push(new ECommandChartTickYMinorCount(selection, count));
      };
      return EShapeChartAxes;
  }());

  var EEditorShapeChartLine = /** @class */ (function (_super) {
      __extends(EEditorShapeChartLine, _super);
      function EEditorShapeChartLine(options) {
          var _this = _super.call(this, options) || this;
          var selection = options.selection;
          _this.state.isDisabled = selection.isEmpty();
          selection.on("change", function () {
              _this.state.isDisabled = selection.isEmpty();
          });
          var subtheme = _this.subtheme;
          new wcardinalUi.DLayoutVertical({
              parent: _this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "auto",
              children: [
                  _this.newTextLabel(),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckXAxisLabel()
                      },
                      padding: 0,
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      self.state.isActive = EShapeChartAxes.getXAxis(last) != null;
                                      self.state.isDisabled = false;
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createXAxis(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteXAxis(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckXAxisMajorTickLabel()
                      },
                      padding: {
                          top: 0,
                          right: 0,
                          left: 10,
                          bottom: 0
                      },
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      if (EShapeChartAxes.getXAxis(last) != null) {
                                          self.state.isActive =
                                              EShapeChartAxes.getXAxisTickMajor(last) != null;
                                          self.state.isDisabled = false;
                                      }
                                      else {
                                          self.state.isDisabled = true;
                                      }
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createXAxisTickMajor(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteXAxisTickMajor(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckXAxisMinorTickLabel()
                      },
                      padding: {
                          top: 0,
                          right: 0,
                          left: 10,
                          bottom: 0
                      },
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      if (EShapeChartAxes.getXAxis(last) != null) {
                                          self.state.isActive =
                                              EShapeChartAxes.getXAxisTickMinor(last) != null;
                                          self.state.isDisabled = false;
                                      }
                                      else {
                                          self.state.isDisabled = true;
                                      }
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createXAxisTickMinor(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteXAxisTickMinor(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckYAxisLabel()
                      },
                      padding: 0,
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      self.state.isActive = EShapeChartAxes.getYAxis(last) != null;
                                      self.state.isDisabled = false;
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createYAxis(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteYAxis(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckYAxisMajorTickLabel()
                      },
                      padding: {
                          top: 0,
                          right: 0,
                          left: 10,
                          bottom: 0
                      },
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      if (EShapeChartAxes.getYAxis(last) != null) {
                                          self.state.isActive =
                                              EShapeChartAxes.getYAxisTickMajor(last) != null;
                                          self.state.isDisabled = false;
                                      }
                                      else {
                                          self.state.isDisabled = true;
                                      }
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createYAxisTickMajor(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteYAxisTickMajor(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DButtonCheckRight({
                      width: "100%",
                      text: {
                          value: subtheme.getCheckYAxisMinorTickLabel()
                      },
                      padding: {
                          top: 0,
                          right: 0,
                          left: 10,
                          bottom: 0
                      },
                      background: {
                          color: null
                      },
                      on: {
                          init: function (self) {
                              var update = function () {
                                  var last = selection.last();
                                  if (last instanceof EShapeChartLine) {
                                      if (EShapeChartAxes.getYAxis(last) != null) {
                                          self.state.isActive =
                                              EShapeChartAxes.getYAxisTickMinor(last) != null;
                                          self.state.isDisabled = false;
                                      }
                                      else {
                                          self.state.isDisabled = true;
                                      }
                                  }
                                  else {
                                      self.state.isDisabled = true;
                                  }
                              };
                              update();
                              selection.on("change", update);
                          },
                          active: function () {
                              EShapeChartAxes.createYAxisTickMinor(selection);
                          },
                          inactive: function () {
                              EShapeChartAxes.deleteYAxisTickMinor(selection);
                          }
                      }
                  }),
                  new wcardinalUi.DText({
                      width: "100%",
                      text: {
                          value: subtheme.getTextMajorTickCountLabel()
                      }
                  }),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.x.tick.major.count;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (count) {
                                      EShapeChartAxes.setXAxisTickMajorCount(count, selection);
                                  }
                              }
                          }),
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.y.tick.major.count;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (count) {
                                      EShapeChartAxes.setYAxisTickMajorCount(count, selection);
                                  }
                              }
                          })
                      ]
                  }),
                  new wcardinalUi.DText({
                      width: "100%",
                      text: {
                          value: subtheme.getTextMinorTickCountLabel()
                      }
                  }),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.x.tick.minor.count;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (count) {
                                      EShapeChartAxes.setXAxisTickMinorCount(count, selection);
                                  }
                              }
                          }),
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.y.tick.minor.count;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (count) {
                                      EShapeChartAxes.setYAxisTickMinorCount(count, selection);
                                  }
                              }
                          })
                      ]
                  }),
                  new wcardinalUi.DText({
                      width: "100%",
                      text: {
                          value: subtheme.getTextPaddingLabel()
                      }
                  }),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.x.padding;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (padding) {
                                      EShapeChartAxes.setXAxisPadding(padding, selection);
                                  }
                              }
                          }),
                          new wcardinalUi.DInputInteger({
                              weight: 1,
                              min: 0,
                              on: {
                                  init: function (self) {
                                      var update = function () {
                                          var last = selection.last();
                                          if (last instanceof EShapeChartLine) {
                                              self.value = last.axis.y.padding;
                                          }
                                      };
                                      update();
                                      selection.on("change", update);
                                  },
                                  change: function (padding) {
                                      EShapeChartAxes.setYAxisPadding(padding, selection);
                                  }
                              }
                          })
                      ]
                  })
              ],
              on: {
                  init: function (self) {
                      var update = function () {
                          self.state.isDisabled = !(selection.last() instanceof EShapeChartLine);
                      };
                      update();
                      selection.on("change", update);
                  }
              }
          });
          return _this;
      }
      EEditorShapeChartLine.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.subtheme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorShapeChartLine.prototype, "subtheme", {
          get: function () {
              var _a;
              return ((_a = this._subtheme) !== null && _a !== void 0 ? _a : (this._subtheme = this.newSubtheme()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeChartLine.prototype.newSubtheme = function () {
          return wcardinalUi.DThemes.get("EEditorShapeChartLine");
      };
      return EEditorShapeChartLine;
  }(wcardinalUi.DPane));

  var EShapeChartLineActionRuntime = /** @class */ (function (_super) {
      __extends(EShapeChartLineActionRuntime, _super);
      function EShapeChartLineActionRuntime(shape) {
          var _this = _super.call(this) || this;
          // Lines
          var line = UtilShapeSearch.findChildById(shape, "line");
          if (line != null) {
              var data = shape.data;
              if (data.size() <= 0) {
                  line.detach();
                  _this.lines = [];
              }
              else {
                  var lines = [line];
                  for (var i = 1, imax = data.size(); i < imax; ++i) {
                      var cloned = line.clone();
                      cloned.attach(shape);
                      lines.push(cloned);
                  }
                  _this.lines = lines;
              }
          }
          else {
              _this.lines = [];
          }
          // Ticks
          var xmajorCount = 3;
          var ymajorCount = 3;
          var xminorCount = 3;
          var yminorCount = 3;
          if (shape instanceof EShapeChartLine) {
              xmajorCount = shape.axis.x.tick.major.count;
              ymajorCount = shape.axis.y.tick.major.count;
              xminorCount = shape.axis.x.tick.minor.count;
              yminorCount = shape.axis.y.tick.minor.count;
          }
          _this.xmajorCount = xmajorCount;
          _this.ymajorCount = ymajorCount;
          _this.xminorCount = xminorCount;
          _this.yminorCount = yminorCount;
          _this.xmajors = _this.initTicks(shape, EShapeChartLineIds.X_AXIS_TICK_MAJOR_ID, xmajorCount);
          _this.ymajors = _this.initTicks(shape, EShapeChartLineIds.Y_AXIS_TICK_MAJOR_ID, ymajorCount);
          _this.xminors = _this.initTicks(shape, EShapeChartLineIds.X_AXIS_TICK_MINOR_ID, (xmajorCount + 1) * xminorCount);
          _this.yminors = _this.initTicks(shape, EShapeChartLineIds.Y_AXIS_TICK_MINOR_ID, (ymajorCount + 1) * yminorCount);
          _this.workMajorPositions = new Float64Array(Math.max(xmajorCount, ymajorCount));
          // Tick format
          var xtick = UtilShapeSearch.findChildById(shape, EShapeChartLineIds.X_AXIS_TICK_MAJOR_ID);
          _this.xformatter = wcardinalUi.NumberFormatters.create(xtick != null ? xtick.text.value : "");
          var ytick = UtilShapeSearch.findChildById(shape, EShapeChartLineIds.Y_AXIS_TICK_MAJOR_ID);
          _this.yformatter = wcardinalUi.NumberFormatters.create(ytick != null ? ytick.text.value : "");
          // Plot area
          _this.plotArea = UtilShapeSearch.findChildById(shape, "plot-area");
          // Padding
          var xpadding = 10;
          var ypadding = 10;
          if (shape instanceof EShapeChartLine) {
              xpadding = shape.axis.x.padding;
              ypadding = shape.axis.y.padding;
          }
          _this.xpadding = xpadding;
          _this.ypadding = ypadding;
          return _this;
      }
      EShapeChartLineActionRuntime.prototype.initTicks = function (shape, id, count) {
          var tick = UtilShapeSearch.findChildById(shape, id);
          if (tick != null) {
              if (count <= 0) {
                  tick.detach();
                  return [];
              }
              else {
                  var ticks = [tick];
                  for (var i = 1; i < count; ++i) {
                      var cloned = tick.clone();
                      cloned.attach(shape);
                      ticks.push(cloned);
                  }
                  return ticks;
              }
          }
          else {
              return [];
          }
      };
      EShapeChartLineActionRuntime.prototype.toStepScale = function (scale) {
          if (5.5 <= scale) {
              return 10;
          }
          else if (2.2 <= scale) {
              return 5;
          }
          else if (1.1 <= scale) {
              return 2;
          }
          return 1;
      };
      EShapeChartLineActionRuntime.prototype.getStep = function (min, max, count) {
          if (count <= 0 || max <= min) {
              return -1;
          }
          // Calculate the step
          var span = (max - min) / count;
          var power = Math.floor(Math.log(span) / Math.LN10);
          var base = Math.pow(10, power);
          return this.toStepScale(span / base) * base;
      };
      EShapeChartLineActionRuntime.prototype.getTickPositions = function (min, max, count, step, padding, ratio, result) {
          if (count <= 0) {
              return result;
          }
          if (max <= min || step <= 0) {
              result[0] = min;
              for (var i = 1; i < count; ++i) {
                  result[i] = NaN;
              }
              return result;
          }
          // Set positions
          var start = min / step;
          var istart = Math.floor(start);
          var dstart = start - istart;
          if (padding < dstart * step * ratio) {
              istart = Math.ceil(start);
          }
          var stop = max / step;
          var istop = Math.ceil(stop);
          var dstop = istop - stop;
          if (padding < dstop * step * ratio) {
              istop = Math.floor(stop);
          }
          var nticks = Math.min(count, Math.ceil(istop - istart + 1));
          for (var i = 0; i < nticks; ++i) {
              result[i] = (istart + i) * step;
          }
          for (var i = nticks; i < count; ++i) {
              result[i] = NaN;
          }
          //
          return result;
      };
      EShapeChartLineActionRuntime.prototype.updateTicksXMinor = function (mstep, index, position, min, ratio, lmin, lmax) {
          var mticks = this.xminors;
          if (0 < mticks.length) {
              var minorCount = this.xminorCount;
              if (0 < mstep) {
                  var padding = this.xpadding;
                  if (index < 0) {
                      for (var i = 0, j = (index + 1) * minorCount; i < minorCount; i += 1, j += 1) {
                          var mtick = mticks[j];
                          var x = (position - (minorCount - i) * mstep - min) * ratio + lmin;
                          if (lmin - padding <= x) {
                              mtick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                              mtick.visible = true;
                              mtick.transform.position.x = x;
                              mtick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                          }
                          else {
                              mtick.visible = false;
                          }
                      }
                  }
                  else {
                      for (var i = 0, j = (index + 1) * minorCount; i < minorCount; i += 1, j += 1) {
                          var mtick = mticks[j];
                          var x = (position + (i + 1) * mstep - min) * ratio + lmin;
                          if (x <= lmax + padding) {
                              mtick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                              mtick.visible = true;
                              mtick.transform.position.x = x;
                              mtick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                          }
                          else {
                              mtick.visible = false;
                          }
                      }
                  }
              }
              else {
                  for (var i = (index + 1) * minorCount, imax = i + minorCount; i < imax; ++i) {
                      mticks[i].visible = false;
                  }
              }
          }
      };
      EShapeChartLineActionRuntime.prototype.toStepMinor = function (step, minorCount) {
          if (0 <= step) {
              return step / (minorCount + 1);
          }
          else {
              return -1;
          }
      };
      EShapeChartLineActionRuntime.prototype.updateTicksX = function (min, max, ratio, lmin, lmax) {
          var ticks = this.xmajors;
          var mticks = this.xminors;
          var minorCount = this.xminorCount;
          var padding = this.xpadding;
          // Major tick positions
          var step = this.getStep(min, max, ticks.length);
          var positions = this.getTickPositions(min, max, ticks.length, step, padding, ratio, this.workMajorPositions);
          // First minors
          var mstep = this.toStepMinor(step, minorCount);
          this.updateTicksXMinor(mstep, -1, positions[0], min, ratio, lmin, lmax);
          // Major and minor ticks
          for (var i = 0, imax = ticks.length; i < imax; ++i) {
              var tick = ticks[i];
              var position = positions[i];
              if (position === position) {
                  // Major tick
                  tick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                  tick.visible = true;
                  tick.transform.position.x = (position - min) * ratio + lmin;
                  tick.text.value = this.xformatter.format(position, step);
                  tick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                  // Minor ticks
                  this.updateTicksXMinor(mstep, i, positions[i], min, ratio, lmin, lmax);
              }
              else {
                  // Major tick
                  tick.visible = false;
                  // Minor ticks
                  if (0 < mticks.length) {
                      for (var j = (i + 1) * minorCount, jmax = j + minorCount; j < jmax; ++j) {
                          mticks[j].visible = false;
                      }
                  }
              }
          }
      };
      EShapeChartLineActionRuntime.prototype.updateTicksYMinor = function (mstep, index, position, min, ratio, lmin, lmax) {
          var mticks = this.yminors;
          if (0 < mticks.length) {
              var minorCount = this.yminorCount;
              if (0 < mstep) {
                  var padding = this.ypadding;
                  if (index < 0) {
                      for (var i = 0, j = (index + 1) * minorCount; i < minorCount; i += 1, j += 1) {
                          var mtick = mticks[j];
                          var y = lmax - (position - (minorCount - i) * mstep - min) * ratio;
                          if (y <= lmax + padding) {
                              mtick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                              mtick.visible = true;
                              mtick.transform.position.y = y;
                              mtick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                          }
                          else {
                              mtick.visible = false;
                          }
                      }
                  }
                  else {
                      for (var i = 0, j = (index + 1) * minorCount; i < minorCount; i += 1, j += 1) {
                          var mtick = mticks[j];
                          var y = lmax - (position + (i + 1) * mstep - min) * ratio;
                          if (lmin - padding <= y) {
                              mtick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                              mtick.visible = true;
                              mtick.transform.position.y = y;
                              mtick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                          }
                          else {
                              mtick.visible = false;
                          }
                      }
                  }
              }
              else {
                  for (var i = (index + 1) * minorCount, imax = i + minorCount; i < imax; ++i) {
                      mticks[i].visible = false;
                  }
              }
          }
      };
      EShapeChartLineActionRuntime.prototype.updateTicksY = function (min, max, ratio, lmin, lmax) {
          var ticks = this.ymajors;
          var mticks = this.yminors;
          var minorCount = this.yminorCount;
          var padding = this.ypadding;
          // Major tick positions
          var step = this.getStep(min, max, ticks.length);
          var positions = this.getTickPositions(min, max, ticks.length, step, padding, ratio, this.workMajorPositions);
          // First minors
          var mstep = this.toStepMinor(step, minorCount);
          this.updateTicksYMinor(mstep, -1, positions[0], min, ratio, lmin, lmax);
          // Major and minor ticks
          for (var i = 0, imax = ticks.length; i < imax; ++i) {
              var tick = ticks[i];
              var position = positions[i];
              if (position === position) {
                  // Major tick
                  tick.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                  tick.visible = true;
                  tick.transform.position.y = lmax - (position - min) * ratio;
                  tick.text.value = this.yformatter.format(position, step);
                  tick.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                  // Minor ticks
                  this.updateTicksYMinor(mstep, i, positions[i], min, ratio, lmin, lmax);
              }
              else {
                  // Major tick
                  tick.visible = false;
                  // Minor ticks
                  if (0 < mticks.length) {
                      for (var j = (i + 1) * minorCount, jmax = j + minorCount; j < jmax; ++j) {
                          mticks[j].visible = false;
                      }
                  }
              }
          }
      };
      EShapeChartLineActionRuntime.prototype.updateLines = function (data, xmin, xratio, lxmin, ymin, yratio, lymax) {
          var lines = this.lines;
          for (var i = 0, imax = Math.min(lines.length, data.size()); i < imax; ++i) {
              var value = data.get(i);
              if (value != null) {
                  var line = lines[i];
                  var points = line.points;
                  if (points != null) {
                      var pointsValues = points.values;
                      var valueValues = value.values;
                      var valueValuesLength = valueValues.length;
                      if (2 <= valueValuesLength) {
                          var valueTimes = value.times;
                          var valueTimesLength = valueTimes.length;
                          if (valueTimesLength < valueValuesLength) {
                              // Index mode
                              for (var j = 0; j < valueValuesLength; ++j) {
                                  var index = j << 1;
                                  pointsValues[index + 0] = (j + 1 - xmin) * xratio + lxmin;
                                  pointsValues[index + 1] = lymax - (valueValues[j] - ymin) * yratio;
                              }
                          }
                          else {
                              // Time mode
                              for (var j = 0; j < valueValuesLength; ++j) {
                                  var index = j << 1;
                                  pointsValues[index + 0] = (valueTimes[j] - xmin) * xratio + lxmin;
                                  pointsValues[index + 1] = lymax - (valueValues[j] - ymin) * yratio;
                              }
                          }
                          line.lock(wcardinalUi.EShapeLockPart.UPLOADED);
                          line.visible = true;
                          points.values = pointsValues;
                          line.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
                      }
                      else {
                          line.visible = false;
                      }
                  }
              }
          }
      };
      EShapeChartLineActionRuntime.prototype.execute = function (shape, runtime, time) {
          var data = shape.data;
          if (data.isChanged) {
              // Calculate the plot range in the time-value coordinate
              var xmin = +Infinity;
              var xmax = -Infinity;
              var ymin = +Infinity;
              var ymax = -Infinity;
              for (var i = 0, imax = data.size(); i < imax; ++i) {
                  var value = data.get(i);
                  if (value != null) {
                      var values = value.values;
                      var valuesLength = values.length;
                      var times = value.times;
                      var timesLength = times.length;
                      // X
                      if (timesLength < valuesLength) {
                          // Index mode
                          if (1 < xmin) {
                              xmin = 1;
                          }
                          if (xmax < valuesLength) {
                              xmax = valuesLength;
                          }
                      }
                      else {
                          // Time mode
                          for (var j = 0; j < timesLength; ++j) {
                              var t = times[j];
                              if (t < xmin) {
                                  xmin = t;
                              }
                              if (xmax < t) {
                                  xmax = t;
                              }
                          }
                      }
                      // Y
                      for (var j = 0; j < valuesLength; ++j) {
                          var v = values[j];
                          if (v < ymin) {
                              ymin = v;
                          }
                          if (ymax < v) {
                              ymax = v;
                          }
                      }
                  }
              }
              if (xmax < xmin) {
                  xmin = 0;
                  xmax = 1;
              }
              else if (xmax <= xmin) {
                  xmax = xmin + 1;
              }
              if (ymax < ymin) {
                  ymax = 1;
                  ymin = 0;
              }
              else if (ymax <= ymin) {
                  ymax = ymin + 1;
              }
              var xspan = xmax - xmin;
              var yspan = ymax - ymin;
              // Calculate plot range in the local coordinate
              var plotArea = this.plotArea;
              var size = plotArea != null ? plotArea.size : shape.size;
              var sx = size.x * 0.5;
              var sy = size.y * 0.5;
              var xpadding = this.xpadding;
              var ypadding = this.ypadding;
              var lxmin = -sx + xpadding;
              var lxmax = +sx - xpadding;
              var lymin = -sy + ypadding;
              var lymax = +sy - ypadding;
              if (lxmax <= lxmin) {
                  lxmax = lxmin + 1;
              }
              if (lymax <= lymin) {
                  lymax = lymin + 1;
              }
              var lxspan = lxmax - lxmin;
              var lyspan = lymax - lymin;
              // x (in the time-value coordinate)
              // lx (in the local coordinate)
              // lx = (x - xmin) / (xmax - xmin) * (lxmax - lxmin) + lxmin
              //    = (x - xmin) * xratio + lxmin
              // where xratio := (lxmax - lxmin) / (xmax - xmin)
              //
              // Please note thay the y coordinate in the local coordinate is upside down.
              // Namely, ly = lymax - (y - ymin) * yratio.
              var xratio = lxspan / xspan;
              var yratio = lyspan / yspan;
              // X ticks
              this.updateTicksX(xmin, xmax, xratio, lxmin, lxmax);
              // Y ticks
              this.updateTicksY(ymin, ymax, yratio, lymin, lymax);
              // Lines
              this.updateLines(data, xmin, xratio, lxmin, ymin, yratio, lymax);
          }
      };
      return EShapeChartLineActionRuntime;
  }(wcardinalUi.EShapeActionRuntimeBase));

  var EShapeChartLineRuntime = /** @class */ (function (_super) {
      __extends(EShapeChartLineRuntime, _super);
      function EShapeChartLineRuntime(shape) {
          var _this = _super.call(this, shape) || this;
          _this.actions.push(new EShapeChartLineActionRuntime(shape));
          return _this;
      }
      return EShapeChartLineRuntime;
  }(wcardinalUi.EShapeRuntimeImpl));

  var EShapeChartLines = /** @class */ (function () {
      function EShapeChartLines() {
      }
      EShapeChartLines.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeChartLine");
      };
      EShapeChartLines.deserialize = function (item, manager) {
          var shape = new EShapeChartLine(manager.mode);
          var index = item[15];
          var resources = manager.resources;
          if (0 <= index && index < resources.length) {
              var parsed = manager.getExtension(index);
              if (parsed == null) {
                  parsed = JSON.parse(resources[index]);
                  manager.setExtension(index, parsed);
              }
              shape.axis.deserialize(parsed[0], manager);
              item[15] = parsed[parsed.length - 1];
          }
          var result = wcardinalUi.deserializeBase(item, manager, shape);
          shape.size.init();
          return result;
      };
      EShapeChartLines.create = function (existing) {
          var result = new EShapeChartLine(wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR);
          if (existing) {
              result.copy(existing);
          }
          // Plot area
          EShapeChartAxes.newPlotArea(result);
          // Line
          EShapeChartAxes.newLine(result);
          // Axis
          EShapeChartAxes.newXAxis(result);
          EShapeChartAxes.newXAxisTickMajor(result);
          EShapeChartAxes.newYAxis(result);
          EShapeChartAxes.newYAxisTickMajor(result);
          if (existing instanceof EShapeChartLine) {
              result.axis.copy(existing.axis);
          }
          return result;
      };
      EShapeChartLines.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              type: EShapeChartLineIds.ID,
              name: name,
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(26.6666)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M23,8c0,1.1-0.9,2-2,2c-0.18,0-0.35-0.02-0.51-0.07l-3.56," +
                      "3.55C16.98,13.64,17,13.82,17,14c0,1.1-0.9,2-2,2s-2-0.9-2-2 c0-0.1" +
                      "8,0.02-0.36,0.07-0.52l-2.55-2.55C10.36,10.98,10.18,11,10,11c-0.18" +
                      ",0-0.36-0.02-0.52-0.07l-4.55,4.56 C4.98,15.65,5,15.82,5,16c0,1.1-" +
                      "0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2c0.18,0,0.35,0.02,0.51,0.07l4.56-4." +
                      "55C8.02,9.36,8,9.18,8,9 c0-1.1,0.9-2,2-2s2,0.9,2,2c0,0.18-0.02,0." +
                      "36-0.07,0.52l2.55,2.55C14.64,12.02,14.82,12,15,12c0.18,0,0.36,0.0" +
                      "2,0.52,0.07 l3.55-3.56C19.02,8.35,19,8.18,19,8c0-1.1,0.9-2,2-2S23" +
                      ",6.9,23,8z\"/>" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeChartLines.create(existing); },
              editor: EEditorShapeChartLine,
              deserializer: function (item, manager) { return EShapeChartLines.deserialize(item, manager); },
              runtime: EShapeChartLineRuntime
          });
      };
      return EShapeChartLines;
  }());

  var loadShapeExtensionChartLine = function () {
      EShapeChartLines.load();
  };

  var EShapeInputs = /** @class */ (function () {
      function EShapeInputs() {
      }
      EShapeInputs.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeInput");
      };
      EShapeInputs.create = function (existing) {
          var result = new wcardinalUi.EShapeRectangleRounded();
          if (existing) {
              result.copy(existing);
          }
          else {
              result.stroke.set(true, wcardinalUi.EShapeDefaults.STROKE_COLOR, 1, 1);
              result.fill.set(true, 0xffffff, 1);
              result.text.set(this.getTheme().getLabel());
              result.cursor = "text";
              result.state.isFocusable = true;
              result.interactive = true;
          }
          result.action.add(new wcardinalUi.EShapeActionValueMiscInput(wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT, '"ALWAYS"', "", wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT));
          result.action.add(new wcardinalUi.EShapeActionValueChangeColor(wcardinalUi.EShapeActionValueChangeColorType.STROKE, "inFocused", wcardinalUi.EShapeActionValueChangeColorTarget.COLOR, wcardinalUi.EShapeDefaults.HIGHLIGHT_COLOR, 0, ""));
          result.action.add(new wcardinalUi.EShapeActionValueChangeColor(wcardinalUi.EShapeActionValueChangeColorType.TEXT, "inDisabled", wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA, 0, 0.5, ""));
          return result;
      };
      EShapeInputs.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(26.6666)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M22,9v6c0,1.1-0.9,2-2,2h-1l0-2h1V9H4v6h6v2H4c-1.1,0-2" +
                      "-0.9-2-2V9c0-1.1,0.9-2,2-2h16C21.1,7,22,7.9,22,9z\"/>" +
                      "<path d=\"M5 4v3h5.5v12h3V7H19V4H5z\" transform=\"translate(7.25,8.5) scale(0.6)\" />" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeInputs.create(existing); }
          });
      };
      return EShapeInputs;
  }());

  var loadShapeExtensionInput = function () {
      EShapeInputs.load();
  };

  var EShapeTableCell = /** @class */ (function () {
      function EShapeTableCell(parent) {
          this._parent = parent;
      }
      Object.defineProperty(EShapeTableCell.prototype, "values", {
          get: function () {
              var parent = this._parent;
              var values = parent.data.values;
              var columnValues = parent.column.values;
              var result = [];
              for (var i = 0, imax = values.length; i < imax; ++i) {
                  var value = values[i];
                  var row = [];
                  for (var j = 0, jmax = columnValues.length; j < jmax; ++j) {
                      var columnValue = columnValues[j];
                      var columnValueRuntime = columnValue.runtime;
                      if (columnValueRuntime != null) {
                          row.push(columnValueRuntime.toValue(value, j, values));
                      }
                  }
                  result.push(row);
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      return EShapeTableCell;
  }());

  var EShapeTableColumnValueBody = /** @class */ (function () {
      function EShapeTableColumnValueBody() {
      }
      EShapeTableColumnValueBody.prototype.isEquals = function (target) {
          return true;
      };
      EShapeTableColumnValueBody.prototype.serialize = function (manager) {
          return -1;
      };
      EShapeTableColumnValueBody.deserialize = function (target, manager) {
          return new EShapeTableColumnValueBody();
      };
      return EShapeTableColumnValueBody;
  }());

  var EShapeTableColumnValueHeader = /** @class */ (function () {
      function EShapeTableColumnValueHeader(label) {
          this.label = label;
      }
      EShapeTableColumnValueHeader.prototype.isEquals = function (target) {
          return this.label === target.label;
      };
      EShapeTableColumnValueHeader.prototype.serialize = function (manager) {
          var labelId = manager.addResource(this.label);
          return manager.addResource("[".concat(labelId, "]"));
      };
      EShapeTableColumnValueHeader.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              return new EShapeTableColumnValueHeader(resources[parsed[0]]);
          }
          return new EShapeTableColumnValueHeader("");
      };
      return EShapeTableColumnValueHeader;
  }());

  var EShapeTableColumnValueType = {
      TEXT: 0,
      NUMBER: 1
  };
  var EShapeTableColumnValue = /** @class */ (function () {
      function EShapeTableColumnValue(weight, type, getter, setter, format, align, header, body) {
          this.weight = weight;
          this.type = type;
          this.getter = getter;
          this.setter = setter;
          this.format = format;
          this.align = align;
          this.header = header;
          this.body = body;
      }
      EShapeTableColumnValue.prototype.isEquals = function (target) {
          return (this.weight === target.weight &&
              this.type === target.type &&
              this.getter === target.getter &&
              this.setter === target.setter &&
              this.format === target.format &&
              this.align === target.align &&
              this.header.isEquals(target.header) &&
              this.body.isEquals(target.body));
      };
      EShapeTableColumnValue.prototype.toLabel = function () {
          return this.header.label;
      };
      EShapeTableColumnValue.prototype.serialize = function (manager) {
          var getterId = manager.addResource(this.getter);
          var setterId = manager.addResource(this.setter);
          var formatterId = manager.addResource(this.format);
          var headerId = this.header.serialize(manager);
          var bodyId = this.body.serialize(manager);
          return manager.addResource("[".concat(this.weight, ",").concat(this.type, ",").concat(getterId, ",").concat(setterId, ",") +
              "".concat(formatterId, ",").concat(this.align, ",-1,").concat(headerId, ",").concat(bodyId, "]"));
      };
      EShapeTableColumnValue.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              return new EShapeTableColumnValue(parsed[0], parsed[1], resources[parsed[2]], resources[parsed[3]], resources[parsed[4]], parsed[5], EShapeTableColumnValueHeader.deserialize(parsed[7], manager), EShapeTableColumnValueBody.deserialize(parsed[8], manager));
          }
          return null;
      };
      return EShapeTableColumnValue;
  }());

  var EShapeTableColumn = /** @class */ (function () {
      function EShapeTableColumn(onChange) {
          this.values = [];
          this._sizeX = 1;
          this._onChange = onChange;
      }
      EShapeTableColumn.prototype.add = function (value, at) {
          if (at != null) {
              this.values.splice(at, 0, value);
          }
          else {
              this.values.push(value);
          }
          this._onChange();
      };
      EShapeTableColumn.prototype.remove = function (index) {
          var values = this.values;
          if (0 <= index && index < values.length) {
              var result = values.splice(index, 1)[0];
              this._onChange();
              return result;
          }
          return null;
      };
      EShapeTableColumn.prototype.indexOf = function (target) {
          var values = this.values;
          // Instance-based matching
          for (var i = 0, imax = values.length; i < imax; ++i) {
              var value = values[i];
              if (value === target) {
                  return i;
              }
          }
          // Data-based matching
          for (var i = 0, imax = values.length; i < imax; ++i) {
              var value = values[i];
              if (value.isEquals(target)) {
                  return i;
              }
          }
          return -1;
      };
      EShapeTableColumn.prototype.get = function (index) {
          var result = this.values[index];
          if (result != null) {
              return result;
          }
          return null;
      };
      EShapeTableColumn.prototype.set = function (index, value) {
          this.values[index] = value;
          this._onChange();
      };
      EShapeTableColumn.prototype.swap = function (indexA, indexB) {
          var values = this.values;
          var tmp = values[indexB];
          values[indexB] = values[indexA];
          values[indexA] = tmp;
          this._onChange();
      };
      EShapeTableColumn.prototype.size = function () {
          return this.values.length;
      };
      EShapeTableColumn.prototype.copy = function (source) {
          // Values
          var values = this.values;
          var sourceValues = source.values;
          var sourceValuesLength = sourceValues.length;
          for (var i = 0; i < sourceValuesLength; ++i) {
              values.push(sourceValues[i]);
          }
          if (values.length !== sourceValuesLength) {
              values.length = sourceValuesLength;
          }
          //
          this._sizeX = source._sizeX;
          this._onChange();
          return this;
      };
      EShapeTableColumn.prototype.serialize = function (manager) {
          var serialized = "";
          var delimiter = "[";
          var values = this.values;
          for (var i = 0, imax = values.length; i < imax; ++i) {
              var value = values[i];
              serialized += delimiter + value.serialize(manager);
              delimiter = ",";
          }
          serialized += "]";
          return manager.addResource(serialized);
      };
      EShapeTableColumn.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              var isChanged = false;
              var values = this.values;
              if (0 < values.length) {
                  values.length = 0;
                  isChanged = true;
              }
              for (var i = 0, imax = parsed.length; i < imax; ++i) {
                  var value = EShapeTableColumnValue.deserialize(parsed[i], manager);
                  if (value != null) {
                      values.push(value);
                  }
              }
              if (0 < values.length) {
                  isChanged = true;
              }
              if (isChanged) {
                  this._onChange();
              }
          }
      };
      return EShapeTableColumn;
  }());

  var EShapeTableIds = /** @class */ (function () {
      function EShapeTableIds() {
      }
      EShapeTableIds.ID = wcardinalUi.EShapeType.EXTENSION + 100;
      EShapeTableIds.HEADER_ID = wcardinalUi.EShapeType.EXTENSION + 101;
      EShapeTableIds.BODY_ID = wcardinalUi.EShapeType.EXTENSION + 102;
      return EShapeTableIds;
  }());

  var EShapeTableRowSelectionType = {
      NONE: 0,
      SINGLE: 1,
      MULTIPLE: 2
  };
  var EShapeTableRowSelection = /** @class */ (function () {
      function EShapeTableRowSelection(parent) {
          this.parent = parent;
          this.type = EShapeTableRowSelectionType.NONE;
          this.indices = [];
          this.body = null;
      }
      Object.defineProperty(EShapeTableRowSelection.prototype, "values", {
          get: function () {
              var indices = this.indices;
              var values = this.parent.data.values;
              var result = (this._values = this._values || []);
              if (values != null) {
                  result.length = 0;
                  for (var i = 0, imax = indices.length; i < imax; ++i) {
                      var index = indices[i];
                      if (0 <= index && index < values.length) {
                          result.push(values[index]);
                      }
                  }
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EShapeTableRowSelection.prototype.size = function () {
          return this.indices.length;
      };
      EShapeTableRowSelection.prototype.isEmpty = function () {
          return this.indices.length <= 0;
      };
      EShapeTableRowSelection.prototype.toggle = function (index) {
          var indices = this.indices;
          var indexIndex = indices.indexOf(index);
          if (indexIndex < 0) {
              indices.push(index);
              var body = this.getBody();
              if (body != null) {
                  this.setRowActive(body, index, true);
              }
          }
          else {
              indices.splice(indexIndex, 1);
              var body = this.getBody();
              if (body != null) {
                  this.setRowActive(body, index, false);
              }
          }
      };
      EShapeTableRowSelection.prototype.add = function (index) {
          var indices = this.indices;
          var indexIndex = indices.indexOf(index);
          if (indexIndex < 0) {
              indices.push(index);
              var body = this.getBody();
              if (body != null) {
                  this.setRowActive(body, index, true);
              }
          }
      };
      EShapeTableRowSelection.prototype.addTo = function (index) {
          var indices = this.indices;
          var lastIndex = indices[indices.length - 1];
          if (lastIndex < index) {
              var body = this.getBody();
              for (var i = lastIndex + 1; i <= index; ++i) {
                  if (indices.indexOf(i) < 0) {
                      indices.push(i);
                      if (body != null) {
                          this.setRowActive(body, i, true);
                      }
                  }
              }
          }
          else if (index < lastIndex) {
              var body = this.getBody();
              for (var i = lastIndex - 1; index <= i; --i) {
                  if (indices.indexOf(i) < 0) {
                      indices.push(i);
                      if (body != null) {
                          this.setRowActive(body, i, true);
                      }
                  }
              }
          }
      };
      EShapeTableRowSelection.prototype.remove = function (index) {
          var indices = this.indices;
          var indexIndex = indices.indexOf(index);
          if (0 <= indexIndex) {
              indices.splice(indexIndex, 1);
              var body = this.getBody();
              if (body != null) {
                  this.setRowActive(body, index, false);
              }
          }
      };
      EShapeTableRowSelection.prototype.clear = function () {
          var indices = this.indices;
          var body = this.getBody();
          if (body != null) {
              for (var i = 0, imax = indices.length; i < imax; ++i) {
                  this.setRowActive(body, indices[i], false);
              }
          }
          indices.length = 0;
      };
      EShapeTableRowSelection.prototype.clearAndAdd = function (index) {
          var indices = this.indices;
          var body = this.getBody();
          if (body != null) {
              for (var i = 0, imax = indices.length; i < imax; ++i) {
                  var target = indices[i];
                  if (target !== index) {
                      this.setRowActive(body, target, false);
                  }
              }
              this.setRowActive(body, index, true);
          }
          indices.length = 0;
          indices.push(index);
      };
      EShapeTableRowSelection.prototype.getBody = function () {
          var body = this.body;
          if (body != null) {
              return body;
          }
          return (this.body = UtilShapeSearch.findChildByType(this.parent, EShapeTableIds.BODY_ID));
      };
      EShapeTableRowSelection.prototype.getRow = function (body, index) {
          var rows = body.children;
          if (0 <= index && index < rows.length) {
              return rows[index];
          }
          return null;
      };
      EShapeTableRowSelection.prototype.setRowActive = function (body, index, isActive) {
          var row = this.getRow(body, index);
          if (row != null) {
              var cells = row.children;
              for (var i = 0, imax = cells.length; i < imax; ++i) {
                  cells[i].state.isActive = isActive;
              }
          }
      };
      EShapeTableRowSelection.prototype.serialize = function (manager) {
          return manager.addResource("[".concat(this.type, "]"));
      };
      EShapeTableRowSelection.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              var type = parsed[0];
              if (this.type !== type) {
                  this.type = type;
              }
          }
      };
      return EShapeTableRowSelection;
  }());

  var EShapeTableRow = /** @class */ (function () {
      function EShapeTableRow(parent, onChange) {
          this._height = 40;
          this._onChange = onChange;
          this._isCellUpdateAllowed = true;
          this._isCellUpdateCalled = false;
          this.selection = new EShapeTableRowSelection(parent);
      }
      EShapeTableRow.prototype.toDirty = function () {
          this.updateCells();
      };
      EShapeTableRow.prototype.disallowCellUpdate = function () {
          this._isCellUpdateAllowed = false;
          this._isCellUpdateCalled = false;
      };
      EShapeTableRow.prototype.allowCellUpdate = function (invoke) {
          this._isCellUpdateAllowed = true;
          var isCellUpdatedCalled = this._isCellUpdateCalled;
          if (invoke && isCellUpdatedCalled) {
              this.updateCells();
          }
      };
      EShapeTableRow.prototype.updateCells = function () {
          if (this._isCellUpdateAllowed) {
              this._onChange();
          }
          else {
              this._isCellUpdateCalled = true;
          }
      };
      Object.defineProperty(EShapeTableRow.prototype, "height", {
          get: function () {
              return this._height;
          },
          set: function (height) {
              height = Math.max(5, height);
              if (this._height !== height) {
                  this._height = height;
                  this.updateCells();
              }
          },
          enumerable: false,
          configurable: true
      });
      EShapeTableRow.prototype.copy = function (source) {
          this.disallowCellUpdate();
          this._height = source._height;
          this.allowCellUpdate(false);
          this.updateCells();
          return this;
      };
      EShapeTableRow.prototype.serialize = function (manager) {
          var selectionId = this.selection.serialize(manager);
          return manager.addResource("[".concat(this._height, ",").concat(selectionId, "]"));
      };
      EShapeTableRow.prototype.deserialize = function (target, manager) {
          var resources = manager.resources;
          if (0 <= target && target < resources.length) {
              var parsed = manager.getExtension(target);
              if (parsed == null) {
                  parsed = JSON.parse(resources[target]);
                  manager.setExtension(target, parsed);
              }
              var isChanged = false;
              var height = parsed[0];
              if (this._height !== height) {
                  this._height = height;
                  isChanged = true;
              }
              this.selection.deserialize(parsed[1], manager);
              if (isChanged) {
                  this._onChange();
              }
          }
      };
      return EShapeTableRow;
  }());

  var EShapeTable = /** @class */ (function (_super) {
      __extends(EShapeTable, _super);
      function EShapeTable(mode, type) {
          if (type === void 0) { type = EShapeTableIds.ID; }
          var _this = _super.call(this, mode, type) || this;
          _this._columnWidths = [];
          _this._columnXs = [];
          _this.column = new EShapeTableColumn(function () {
              _this.onColumnChange();
          });
          _this.row = new EShapeTableRow(_this, function () {
              _this.onRowChange();
          });
          _this.cell = new EShapeTableCell(_this);
          return _this;
      }
      EShapeTable.prototype.onColumnChange = function () {
          this.newCellsHeader();
          this.newCellsBody(true);
          this.layoutCells();
      };
      EShapeTable.prototype.onRowChange = function () {
          this.newCellsBody(false);
          this.layoutCells();
      };
      EShapeTable.prototype.onSizeChange = function () {
          _super.prototype.onSizeChange.call(this);
          this.newCellsBody(false);
          this.layoutCells();
      };
      EShapeTable.prototype.newCellsHeader = function () {
          if (this.children.length <= 0) {
              return;
          }
          var header = this.children[0];
          var column = this.column;
          var columnCount = column.size();
          var values = column.values;
          // Create / delete children
          var children = header.children;
          var childrenLength = children.length;
          if (childrenLength < columnCount) {
              var master = children[childrenLength - 1] || this;
              for (var i = childrenLength; i < columnCount; ++i) {
                  var cell = new wcardinalUi.EShapeRectangle().copy(master);
                  cell.text.value = values[i].header.label;
                  cell.attach(header);
              }
          }
          else if (columnCount < childrenLength) {
              for (var i = childrenLength - 1; columnCount <= i; --i) {
                  children[i].detach();
              }
          }
          // Update text
          for (var i = 0; i < columnCount; ++i) {
              children[i].text.value = values[i].header.label;
          }
      };
      EShapeTable.prototype.toRowCountRequired = function () {
          return Math.min(1000, Math.max(1, Math.floor(Math.abs(this.size.y) / this.row.height))) - 1;
      };
      EShapeTable.prototype.newCellsBody = function (isColumnDirty) {
          // Rows
          if (this.children.length <= 1) {
              return;
          }
          var body = this.children[1];
          var rows = body.children;
          var rowsLength = rows.length;
          var rowCountRequired = this.toRowCountRequired();
          var rowCount = Math.max(2, rowCountRequired);
          if (rowsLength < rowCount) {
              var masterEven = (0 < rowsLength ? rows[0] : null) || this;
              var masterOdd = (1 < rowsLength ? rows[1] : null) || this;
              var mode = this.mode;
              for (var irow = rowsLength; irow < rowCount; ++irow) {
                  var master = irow % 2 === 0 ? masterEven : masterOdd;
                  new wcardinalUi.EShapeGroupShadowed(mode).copy(master, wcardinalUi.EShapeCopyPart.ACTION).attach(body);
              }
          }
          else if (rowCount < rowsLength) {
              for (var i = rowsLength - 1; rowCount <= i; --i) {
                  rows[i].detach();
              }
          }
          if (0 < rows.length) {
              rows[0].visible = 0 < rowCountRequired;
          }
          if (1 < rows.length) {
              rows[1].visible = 1 < rowCountRequired;
          }
          // Cells
          var masterCellEven = (0 < rows.length ? rows[0].children[0] : null) || this;
          var masterCellOdd = (1 < rows.length ? rows[1].children[0] : null) || this;
          var column = this.column;
          var columnValues = column.values;
          var columnCount = column.size();
          for (var irow = 0; irow < rowCount; ++irow) {
              var columnCountRequired = irow <= 1 ? Math.max(1, columnCount) : columnCount;
              var row = rows[irow];
              var cells = row.children;
              var cellsLength = cells.length;
              var master = irow % 2 === 0 ? masterCellEven : masterCellOdd;
              if (cellsLength < columnCountRequired) {
                  for (var icolumn = cellsLength; icolumn < columnCountRequired; ++icolumn) {
                      new wcardinalUi.EShapeRectangle().copy(master).attach(row);
                  }
              }
              else if (columnCountRequired < cellsLength) {
                  for (var i = cellsLength - 1; columnCountRequired <= i; --i) {
                      cells[i].detach();
                  }
              }
              if (0 < cells.length) {
                  cells[0].visible = 0 < columnCount;
              }
              if (1 < cells.length) {
                  cells[1].visible = 1 < columnCount;
              }
              if (isColumnDirty) {
                  for (var i = 0; i < columnCount; ++i) {
                      cells[i].text.align.horizontal = columnValues[i].align;
                  }
              }
          }
      };
      EShapeTable.prototype.layoutCells = function () {
          if (this.children.length <= 1) {
              return;
          }
          var rowHeight = this.row.height;
          var rowHeightHalf = rowHeight * 0.5;
          var column = this.column;
          var size = this.size;
          var sizeX = size.x;
          var sizeY = size.y;
          var sxh = -sizeX * 0.5;
          var syh = -sizeY * 0.5;
          var columnValues = column.values;
          var columnValuesLength = columnValues.length;
          // Total weight
          var totalWeight = 0;
          for (var i = 0; i < columnValuesLength; ++i) {
              totalWeight += columnValues[i].weight;
          }
          totalWeight = Math.max(0.00001, totalWeight);
          // Column width and x position
          var columnWidths = this._columnWidths;
          var columnXs = this._columnXs;
          var columnWidthFactor = sizeX / totalWeight;
          var columnX = 0;
          for (var i = 0; i < columnValuesLength; ++i) {
              var columnWidth = columnValues[i].weight * columnWidthFactor;
              columnWidths[i] = columnWidth;
              columnXs[i] = columnX + columnWidth * 0.5;
              columnX += columnWidth;
          }
          // Header
          var header = this.children[0];
          header.lock(wcardinalUi.EShapeLockPart.ALL);
          header.size.set(sizeX, rowHeight);
          header.transform.position.set(0, syh + rowHeightHalf);
          header.unlock(wcardinalUi.EShapeLockPart.ALL, true);
          var hcells = header.children;
          var hcellsLength = hcells.length;
          for (var icolumn = 0; icolumn < hcellsLength; ++icolumn) {
              var hcell = hcells[icolumn];
              hcell.lock(wcardinalUi.EShapeLockPart.ALL);
              hcell.size.set(columnWidths[icolumn], rowHeight);
              hcell.transform.position.set(sxh + columnXs[icolumn], 0);
              hcell.unlock(wcardinalUi.EShapeLockPart.ALL, true);
          }
          // Body
          var body = this.children[1];
          body.lock(wcardinalUi.EShapeLockPart.ALL);
          body.size.set(sizeX, sizeY - rowHeight);
          body.transform.position.set(0, rowHeightHalf);
          body.unlock(wcardinalUi.EShapeLockPart.ALL, true);
          var rows = body.children;
          var rowsLength = rows.length;
          for (var irow = 0, y = syh + rowHeight; irow < rowsLength; ++irow, y += rowHeight) {
              var row = rows[irow];
              row.lock(wcardinalUi.EShapeLockPart.ALL);
              row.size.set(sizeX, rowHeight);
              row.transform.position.set(0, y);
              row.unlock(wcardinalUi.EShapeLockPart.ALL, true);
              var cells = row.children;
              var cellsLength = cells.length;
              for (var icolumn = 0; icolumn < cellsLength; ++icolumn) {
                  var cell = cells[icolumn];
                  cell.lock(wcardinalUi.EShapeLockPart.ALL);
                  cell.size.set(columnWidths[icolumn], rowHeight);
                  cell.transform.position.set(sxh + columnXs[icolumn], 0);
                  cell.unlock(wcardinalUi.EShapeLockPart.ALL, true);
              }
          }
      };
      EShapeTable.prototype.copy = function (source, part) {
          if (part === void 0) { part = wcardinalUi.EShapeCopyPart.ALL; }
          var result = _super.prototype.copy.call(this, source, part);
          if (source instanceof EShapeTable) {
              this.column.copy(source.column);
              this.row.copy(source.row);
          }
          return result;
      };
      EShapeTable.prototype.serialize = function (manager) {
          var result = _super.prototype.serialize.call(this, manager);
          var resource = result[15];
          result[15] = manager.addResource("[".concat(this.column.serialize(manager), ",").concat(this.row.serialize(manager), ",").concat(resource, "]"));
          return result;
      };
      return EShapeTable;
  }(wcardinalUi.EShapeGroupShadowed));

  var ECommandShapeTableColumnValueAdd = /** @class */ (function (_super) {
      __extends(ECommandShapeTableColumnValueAdd, _super);
      function ECommandShapeTableColumnValueAdd(value, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._value = value;
          return _this;
      }
      ECommandShapeTableColumnValueAdd.prototype.execute = function () {
          return this.redo();
      };
      ECommandShapeTableColumnValueAdd.prototype.redo = function () {
          var value = this._value;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  shape.column.add(value);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableColumnValueAdd.prototype.undo = function () {
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  shape.column.remove(shape.column.size() - 1);
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeTableColumnValueAdd;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableColumnValueBringForward = /** @class */ (function (_super) {
      __extends(ECommandShapeTableColumnValueBringForward, _super);
      function ECommandShapeTableColumnValueBringForward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = shape.column.indexOf(target);
                  indices.push(index);
                  if (0 < index) {
                      shape.column.swap(index - 1, index);
                  }
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeTableColumnValueBringForward.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableColumnValueBringForward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = indices[i];
                  if (0 < index) {
                      shape.column.swap(index - 1, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableColumnValueBringForward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeTableColumnValueBringForward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableColumnValueRemove = /** @class */ (function (_super) {
      __extends(ECommandShapeTableColumnValueRemove, _super);
      function ECommandShapeTableColumnValueRemove(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = shape.column.indexOf(target);
                  indices.push(index);
                  if (0 <= index) {
                      shape.column.remove(index);
                  }
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeTableColumnValueRemove.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableColumnValueRemove.prototype.redo = function () {
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.column.remove(index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableColumnValueRemove.prototype.undo = function () {
          var target = this._target;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.column.add(target, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeTableColumnValueRemove;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableColumnValueReplace = /** @class */ (function (_super) {
      __extends(ECommandShapeTableColumnValueReplace, _super);
      function ECommandShapeTableColumnValueReplace(oldValue, newValue, selection, list) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._oldValue = oldValue;
          _this._newValue = newValue;
          _this._list = list;
          var indices = [];
          var oldValues = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = shape.column.indexOf(oldValue);
                  indices.push(index);
                  if (0 <= index) {
                      oldValues.push(shape.column.get(index));
                      shape.column.set(index, newValue);
                  }
                  else {
                      oldValues.push(newValue);
                  }
              }
              else {
                  indices.push(-1);
                  oldValues.push(newValue);
              }
          }
          _this._indices = indices;
          _this._oldValues = oldValues;
          if (list.data.selection.contains(oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeTableColumnValueReplace.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableColumnValueReplace.prototype.redo = function () {
          var newValue = this._newValue;
          var indices = this._indices;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.column.set(index, newValue);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._oldValue)) {
              list.data.selection.clearAndAdd(newValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableColumnValueReplace.prototype.undo = function () {
          var indices = this._indices;
          var oldValues = this._oldValues;
          var shapes = this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var index = indices[i];
                  if (0 <= index) {
                      shape.column.set(index, oldValues[i]);
                  }
              }
          }
          var list = this._list;
          if (list.data.selection.contains(this._newValue)) {
              list.data.selection.clearAndAdd(this._oldValue);
          }
          this._selection.update("PROPERTY");
          return true;
      };
      return ECommandShapeTableColumnValueReplace;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableColumnValueSendBackward = /** @class */ (function (_super) {
      __extends(ECommandShapeTableColumnValueSendBackward, _super);
      function ECommandShapeTableColumnValueSendBackward(target, selection) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._target = target;
          var indices = [];
          var shapes = _this._selection.get();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var column = shape.column;
                  var index = column.indexOf(target);
                  indices.push(index);
                  if (0 <= index && index < column.size() - 1) {
                      column.swap(index + 1, index);
                  }
              }
              else {
                  indices.push(-1);
              }
          }
          _this._indices = indices;
          _this._selection.update("PROPERTY");
          return _this;
      }
      ECommandShapeTableColumnValueSendBackward.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableColumnValueSendBackward.prototype.redo = function () {
          var shapes = this._selection.get();
          var indices = this._indices;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var column = shape.column;
                  var index = indices[i];
                  if (0 <= index && index < column.size() - 1) {
                      column.swap(index + 1, index);
                  }
              }
          }
          this._selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableColumnValueSendBackward.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeTableColumnValueSendBackward;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableRowHeight = /** @class */ (function (_super) {
      __extends(ECommandShapeTableRowHeight, _super);
      function ECommandShapeTableRowHeight(value, selection) {
          var _this = _super.call(this) || this;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  values.push(shape.row.height);
                  shape.row.height = value;
              }
              else {
                  values.push(35);
              }
          }
          _this._values = values;
          _this._selection = selection;
          return _this;
      }
      ECommandShapeTableRowHeight.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableRowHeight.prototype.redo = function () {
          var selection = this._selection;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var value = values[i];
                  values[i] = shape.row.height;
                  shape.row.height = value;
              }
          }
          selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableRowHeight.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeTableRowHeight;
  }(wcardinalUi.DCommandBase));

  var ECommandShapeTableRowSelectionType = /** @class */ (function (_super) {
      __extends(ECommandShapeTableRowSelectionType, _super);
      function ECommandShapeTableRowSelectionType(value, selection) {
          var _this = _super.call(this) || this;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  values.push(shape.row.selection.type);
                  shape.row.selection.type = value;
              }
              else {
                  values.push(EShapeTableRowSelectionType.NONE);
              }
          }
          _this._values = values;
          _this._selection = selection;
          return _this;
      }
      ECommandShapeTableRowSelectionType.prototype.execute = function () {
          return true;
      };
      ECommandShapeTableRowSelectionType.prototype.redo = function () {
          var selection = this._selection;
          var shapes = selection.get();
          var values = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (shape instanceof EShapeTable) {
                  var value = values[i];
                  values[i] = shape.row.selection.type;
                  shape.row.selection.type = value;
              }
          }
          selection.update("PROPERTY");
          return true;
      };
      ECommandShapeTableRowSelectionType.prototype.undo = function () {
          return this.redo();
      };
      return ECommandShapeTableRowSelectionType;
  }(wcardinalUi.DCommandBase));

  var EDialogTableColumn = /** @class */ (function (_super) {
      __extends(EDialogTableColumn, _super);
      function EDialogTableColumn() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogTableColumn.prototype.newContentChildren = function (theme, options) {
          var _this = this;
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          // Type
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getSelectColumnValueTypeLabel()
                      }
                  }),
                  new wcardinalUi.DSelect({
                      weight: 1,
                      value: EShapeTableColumnValueType.TEXT,
                      menu: {
                          items: [
                              {
                                  value: EShapeTableColumnValueType.TEXT,
                                  text: {
                                      value: theme.toSelectColumnValueTypeLabel(EShapeTableColumnValueType.TEXT)
                                  }
                              },
                              {
                                  value: EShapeTableColumnValueType.NUMBER,
                                  text: {
                                      value: theme.toSelectColumnValueTypeLabel(EShapeTableColumnValueType.NUMBER)
                                  }
                              }
                          ]
                      },
                      on: {
                          init: function (self) {
                              _this._selectType = self;
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          // Label
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputLabelLabel()
                      }
                  }),
                  new wcardinalUi.DInputText({
                      weight: 1,
                      text: {
                          value: ""
                      },
                      on: {
                          init: function (self) {
                              _this._inputLabel = self;
                          },
                          enter: function () {
                              _this.ok();
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          // Width Weight
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputWidthLabel()
                      }
                  }),
                  new wcardinalUi.DInputReal({
                      weight: 1,
                      text: {
                          value: 0
                      },
                      min: 0,
                      on: {
                          init: function (self) {
                              _this._inputWidth = self;
                          },
                          enter: function () {
                              _this.ok();
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          // Getter / setter
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputGetterLabel()
                      }
                  }),
                  new wcardinalUi.DInputText({
                      weight: 1,
                      text: {
                          value: ""
                      },
                      on: {
                          init: function (self) {
                              _this._inputGetter = self;
                          },
                          enter: function () {
                              _this.ok();
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputSetterLabel()
                      }
                  }),
                  new wcardinalUi.DInputText({
                      weight: 1,
                      text: {
                          value: ""
                      },
                      on: {
                          init: function (self) {
                              _this._inputSetter = self;
                          },
                          enter: function () {
                              _this.ok();
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          // Format
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputFormatLabel()
                      }
                  }),
                  new wcardinalUi.DInputText({
                      weight: 1,
                      text: {
                          value: ""
                      },
                      on: {
                          init: function (self) {
                              _this._inputFormat = self;
                          },
                          enter: function () {
                              _this.ok();
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          // Align
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getSelectTextAlignLabel()
                      }
                  }),
                  new wcardinalUi.DSelect({
                      weight: 1,
                      value: wcardinalUi.EShapeTextAlignHorizontal.CENTER,
                      menu: {
                          items: [
                              {
                                  value: wcardinalUi.EShapeTextAlignHorizontal.LEFT,
                                  text: {
                                      value: theme.toTextAlignLabel(wcardinalUi.EShapeTextAlignHorizontal.LEFT)
                                  }
                              },
                              {
                                  value: wcardinalUi.EShapeTextAlignHorizontal.CENTER,
                                  text: {
                                      value: theme.toTextAlignLabel(wcardinalUi.EShapeTextAlignHorizontal.CENTER)
                                  }
                              },
                              {
                                  value: wcardinalUi.EShapeTextAlignHorizontal.RIGHT,
                                  text: {
                                      value: theme.toTextAlignLabel(wcardinalUi.EShapeTextAlignHorizontal.RIGHT)
                                  }
                              }
                          ]
                      },
                      on: {
                          init: function (self) {
                              _this._selectAlign = self;
                          }
                      }
                  }),
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          return result;
      };
      EDialogTableColumn.prototype.reset = function () {
          this._selectType.value = EShapeTableColumnValueType.TEXT;
          this._inputLabel.value = this.theme.newInputLabel();
          this._inputWidth.value = 1;
          this._inputGetter.value = "";
          this._inputSetter.value = "";
          this._inputFormat.value = "";
          this._selectAlign.value = wcardinalUi.EShapeTextAlignHorizontal.CENTER;
          return this;
      };
      Object.defineProperty(EDialogTableColumn.prototype, "value", {
          get: function () {
              return new EShapeTableColumnValue(this._inputWidth.value, this._selectType.value || EShapeTableColumnValueType.TEXT, this._inputGetter.value, this._inputSetter.value, this._inputFormat.value, this._selectAlign.value || wcardinalUi.EShapeTextAlignHorizontal.LEFT, new EShapeTableColumnValueHeader(this._inputLabel.value), new EShapeTableColumnValueBody());
          },
          set: function (value) {
              if (value != null) {
                  this._selectType.value = value.type;
                  this._inputLabel.value = value.header.label;
                  this._inputWidth.value = value.weight;
                  this._inputGetter.value = value.getter;
                  this._inputSetter.value = value.setter;
                  this._inputFormat.value = value.format;
                  this._selectAlign.value = value.align;
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogTableColumn.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogTableColumn.prototype.getType = function () {
          return "EDialogShapeTableColumn";
      };
      return EDialogTableColumn;
  }(wcardinalUi.DDialogLayered));

  var EEditorShapeTable = /** @class */ (function (_super) {
      __extends(EEditorShapeTable, _super);
      function EEditorShapeTable(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var selection = options.selection;
          _this._selection = selection;
          _this.state.isDisabled = selection.isEmpty();
          selection.on("change", function () {
              _this.state.isDisabled = selection.isEmpty();
          });
          _this.content.setHeight("padding");
          new wcardinalUi.DLayoutVertical({
              parent: _this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              children: [
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      height: "auto",
                      children: [
                          _this.newTextLabel(),
                          _this.buttonNew,
                          _this.buttonDelete,
                          _this.buttonBringForward,
                          _this.buttonSendBackward
                      ]
                  }),
                  _this.columnList,
                  new wcardinalUi.DText({
                      width: "100%",
                      text: {
                          value: _this.subtheme.getInputRowHeightLabel()
                      }
                  }),
                  _this.inputRowHeight,
                  new wcardinalUi.DText({
                      width: "100%",
                      text: {
                          value: _this.subtheme.getSelectRowSelectionTypeLabel()
                      }
                  }),
                  _this.selectRowSelectionType
              ]
          });
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          var columnList = _this.columnList;
          columnList.data.selection.on("change", function () {
              _this.onListSelectionChange(columnList);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorShapeTable.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.subtheme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorShapeTable.prototype, "buttonNew", {
          get: function () {
              var _a;
              return ((_a = this._buttonNew) !== null && _a !== void 0 ? _a : (this._buttonNew = this.newButtonNew()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.subtheme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          this.columnDialog
              .reset()
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableColumnValueAdd(value, _this._selection));
              }
          });
      };
      EEditorShapeTable.prototype.onSelectionChangeButtonNew = function (selection) {
          var buttonNew = this.buttonNew;
          if (selection.last() instanceof EShapeTable) {
              buttonNew.state.isDisabled = false;
          }
          else {
              buttonNew.state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorShapeTable.prototype, "buttonDelete", {
          get: function () {
              var _a;
              return ((_a = this._buttonDelete) !== null && _a !== void 0 ? _a : (this._buttonDelete = this.newButtonDelete()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.subtheme.getButtonDeleteTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.data.selection.first;
                      if (first != null && 1 < columnList.data.size()) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableColumnValueRemove(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onListSelectionChangeButtonDelete = function (columnList) {
          this.buttonDelete.state.isDisabled =
              columnList.data.size() <= 1 || columnList.data.selection.isEmpty();
      };
      Object.defineProperty(EEditorShapeTable.prototype, "buttonBringForward", {
          get: function () {
              var _a;
              return ((_a = this._buttonBringForward) !== null && _a !== void 0 ? _a : (this._buttonBringForward = this.newButtonBringForward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.subtheme.getButtonBringForwardTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.selection.first;
                      if (first != null && columnList.data.items[0] !== first) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableColumnValueBringForward(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onListSelectionChangeButtonBringForward = function (columnList) {
          var first = columnList.data.selection.first;
          var items = columnList.data.items;
          this.buttonBringForward.state.isDisabled = first == null || items[0] === first;
      };
      Object.defineProperty(EEditorShapeTable.prototype, "buttonSendBackward", {
          get: function () {
              var _a;
              return ((_a = this._buttonSendBackward) !== null && _a !== void 0 ? _a : (this._buttonSendBackward = this.newButtonSendBackward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.subtheme.getButtonSendBackwardTitle(),
              on: {
                  active: function () {
                      var columnList = _this.columnList;
                      var first = columnList.selection.first;
                      var items = columnList.data.items;
                      if (first != null && items[items.length - 1] !== first) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableColumnValueSendBackward(first, _this._selection));
                      }
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onListSelectionChangeButtonSendBackward = function (columnList) {
          var first = columnList.selection.first;
          var items = columnList.data.items;
          this.buttonSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      Object.defineProperty(EEditorShapeTable.prototype, "columnDialog", {
          get: function () {
              var _a;
              return ((_a = this._columnDialog) !== null && _a !== void 0 ? _a : (this._columnDialog = this.newColumnDialog()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newColumnDialog = function () {
          return new EDialogTableColumn();
      };
      Object.defineProperty(EEditorShapeTable.prototype, "columnList", {
          get: function () {
              var _a;
              return ((_a = this._columnList) !== null && _a !== void 0 ? _a : (this._columnList = this.newColumnList()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newColumnList = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "100%",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      return value.toLabel();
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onColumnListDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorShapeTable.prototype.onColumnListDblClick = function (e, _, item, list) {
          var _this = this;
          var oldValue = item.value;
          if (oldValue != null) {
              var columnDialog_1 = this.columnDialog;
              columnDialog_1.value = oldValue;
              columnDialog_1.open(item).then(function () {
                  var newValue = columnDialog_1.value;
                  if (newValue != null) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableColumnValueReplace(oldValue, newValue, _this._selection, list));
                  }
              });
          }
      };
      EEditorShapeTable.prototype.onSelectionChangeColumnList = function (selection) {
          var last = selection.last();
          var columnList = this.columnList;
          columnList.data.items = last instanceof EShapeTable ? last.column.values : [];
          this.onListSelectionChange(columnList);
      };
      Object.defineProperty(EEditorShapeTable.prototype, "inputRowHeight", {
          get: function () {
              var _a;
              return ((_a = this._inputRowHeight) !== null && _a !== void 0 ? _a : (this._inputRowHeight = this.newInputRowHeight()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newInputRowHeight = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              width: "100%",
              min: 5,
              step: 1,
              on: {
                  change: function (value) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableRowHeight(value, _this._selection));
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onSelectionChangeInputRowHeight = function (selection) {
          var last = selection.last();
          var input = this.inputRowHeight;
          if (last instanceof EShapeTable) {
              input.value = last.row.height;
              input.state.isDisabled = false;
          }
          else {
              input.state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorShapeTable.prototype, "selectRowSelectionType", {
          get: function () {
              var _a;
              return ((_a = this._selectRowSelectionType) !== null && _a !== void 0 ? _a : (this._selectRowSelectionType = this.newSelectRowSelectionType()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newSelectRowSelectionType = function () {
          var _this = this;
          var subtheme = this.subtheme;
          return new wcardinalUi.DSelect({
              width: "100%",
              value: EShapeTableRowSelectionType.SINGLE,
              menu: {
                  items: [
                      {
                          value: EShapeTableRowSelectionType.NONE,
                          text: {
                              value: subtheme.toSelectRowSelectionTypeLabel(EShapeTableRowSelectionType.NONE)
                          }
                      },
                      {
                          value: EShapeTableRowSelectionType.SINGLE,
                          text: {
                              value: subtheme.toSelectRowSelectionTypeLabel(EShapeTableRowSelectionType.SINGLE)
                          }
                      },
                      {
                          value: EShapeTableRowSelectionType.MULTIPLE,
                          text: {
                              value: subtheme.toSelectRowSelectionTypeLabel(EShapeTableRowSelectionType.MULTIPLE)
                          }
                      }
                  ]
              },
              on: {
                  change: function (value) {
                      if (value == null) {
                          value = EShapeTableRowSelectionType.SINGLE;
                      }
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTableRowSelectionType(value, _this._selection));
                  }
              }
          });
      };
      EEditorShapeTable.prototype.onSelectionChangeSelectRowSelectionType = function (selection) {
          var last = selection.last();
          var select = this.selectRowSelectionType;
          if (last instanceof EShapeTable) {
              select.value = last.row.selection.type;
              select.state.isDisabled = false;
          }
          else {
              select.state.isDisabled = true;
          }
      };
      EEditorShapeTable.prototype.onSelectionChange = function (selection) {
          this.onSelectionChangeButtonNew(selection);
          this.onSelectionChangeColumnList(selection);
          this.onSelectionChangeInputRowHeight(selection);
          this.onSelectionChangeSelectRowSelectionType(selection);
      };
      EEditorShapeTable.prototype.onListSelectionChange = function (columnList) {
          this.onListSelectionChangeButtonDelete(columnList);
          this.onListSelectionChangeButtonBringForward(columnList);
          this.onListSelectionChangeButtonSendBackward(columnList);
      };
      Object.defineProperty(EEditorShapeTable.prototype, "subtheme", {
          get: function () {
              var _a;
              return ((_a = this._subtheme) !== null && _a !== void 0 ? _a : (this._subtheme = this.newSubtheme()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShapeTable.prototype.newSubtheme = function () {
          return wcardinalUi.DThemes.get("EEditorShapeTable");
      };
      return EEditorShapeTable;
  }(wcardinalUi.DPane));

  var EShapeTableActionRuntime = /** @class */ (function (_super) {
      __extends(EShapeTableActionRuntime, _super);
      function EShapeTableActionRuntime(table) {
          var _this = _super.call(this) || this;
          _this.body = UtilShapeSearch.findChildByType(table, EShapeTableIds.BODY_ID);
          _this.column = table.column;
          return _this;
      }
      EShapeTableActionRuntime.prototype.execute = function (shape, runtime, time) {
          var body = this.body;
          var column = this.column;
          if (body != null && column != null) {
              var data = shape.data;
              if (data.isChanged) {
                  var rows = body.children;
                  var rowsLength = rows.length;
                  var first = data.get(0);
                  if (first != null) {
                      var columnValues = column.values;
                      var values = first.values;
                      var valuesLength = values.length;
                      var imin = Math.min(rowsLength, valuesLength);
                      for (var i = 0; i < imin; ++i) {
                          var value = values[i];
                          var row = rows[i];
                          var cells = row.children;
                          var cellsLength = cells.length;
                          var jmin = Math.min(cellsLength, columnValues.length);
                          for (var j = 0; j < jmin; ++j) {
                              var cell = cells[j];
                              var columnValue = columnValues[j];
                              var columnRuntime = columnValue.runtime;
                              if (columnRuntime != null) {
                                  cell.state.isFocusable = true;
                                  cell.text.value = columnRuntime.formatter(columnRuntime.toValue(value, j, values), j);
                              }
                          }
                          for (var j = jmin; j < cellsLength; ++j) {
                              var cell = cells[j];
                              cell.state.isFocusable = false;
                              cell.text.value = "";
                          }
                      }
                      for (var i = imin; i < rowsLength; ++i) {
                          var row = rows[i];
                          var cells = row.children;
                          var cellsLength = cells.length;
                          for (var j = 0; j < cellsLength; ++j) {
                              var cell = cells[j];
                              cell.state.isFocusable = false;
                              cell.text.value = "";
                          }
                      }
                  }
                  else {
                      for (var i = 0; i < rowsLength; ++i) {
                          var row = rows[i];
                          var cells = row.children;
                          var cellsLength = cells.length;
                          for (var j = 0; j < cellsLength; ++j) {
                              var cell = cells[j];
                              cell.state.isFocusable = false;
                              cell.text.value = "";
                          }
                      }
                  }
              }
          }
      };
      return EShapeTableActionRuntime;
  }(wcardinalUi.EShapeActionRuntimeBase));

  var EShapeTableCellActionValueChangeColor = /** @class */ (function (_super) {
      __extends(EShapeTableCellActionValueChangeColor, _super);
      function EShapeTableCellActionValueChangeColor() {
          return _super.call(this, wcardinalUi.EShapeActionValueChangeColorType.FILL, "", EShapeTableCellActionValueChangeColor.getColorCode(), "", "") || this;
      }
      EShapeTableCellActionValueChangeColor.getColorCode = function () {
          var activeHoverColor = wcardinalUi.UtilRgb.brighten(wcardinalUi.EShapeDefaults.HIGHLIGHT_COLOR, 0.8);
          var activeColor = wcardinalUi.UtilRgb.brighten(wcardinalUi.EShapeDefaults.HIGHLIGHT_COLOR, 0.75);
          var hoverColor = wcardinalUi.UtilRgb.brighten(wcardinalUi.EShapeDefaults.HIGHLIGHT_COLOR, 0.85);
          var disabledColor = wcardinalUi.UtilRgb.darken(wcardinalUi.EShapeDefaults.FILL_COLOR, 0.25);
          return ("inDisabled ? ".concat(disabledColor, " : ( isActive ?") +
              "\t( isHovered ? ".concat(activeHoverColor, " : ").concat(activeColor, " ) :") +
              "\t( isHovered ? ".concat(hoverColor, " : null )") +
              ")");
      };
      return EShapeTableCellActionValueChangeColor;
  }(wcardinalUi.EShapeActionValueChangeColorCode));

  var EShapeTableBodyRuntime = /** @class */ (function (_super) {
      __extends(EShapeTableBodyRuntime, _super);
      function EShapeTableBodyRuntime(shape) {
          var _this = _super.call(this, shape) || this;
          _this.lastRowIndex = -1;
          _this.lastColumnIndex = -1;
          _this.init(shape);
          return _this;
      }
      EShapeTableBodyRuntime.prototype.init = function (shape) {
          var parent = shape.parent;
          if (parent instanceof EShapeTable) {
              this.selection = parent.row.selection;
              var rows = shape.children;
              for (var i = 0, imax = rows.length; i < imax; ++i) {
                  var row = rows[i];
                  var cells = row.children;
                  for (var j = 0, jmax = cells.length; j < jmax; ++j) {
                      cells[j].action.add(new EShapeTableCellActionValueChangeColor());
                  }
              }
          }
      };
      EShapeTableBodyRuntime.prototype.onClick = function (shape, e) {
          _super.prototype.onClick.call(this, shape, e);
          // Update the selection
          var selection = this.selection;
          if (e != null && selection != null && selection.type !== EShapeTableRowSelectionType.NONE) {
              var lastRowIndex = this.lastRowIndex;
              if (0 <= lastRowIndex) {
                  var indices = selection.indices;
                  var isSingle = selection.type === EShapeTableRowSelectionType.SINGLE;
                  var isNotSingle = !isSingle;
                  var originalEvent = "data" in e ? e.data.originalEvent : e;
                  var ctrlKey = originalEvent.ctrlKey;
                  var shiftKey = originalEvent.shiftKey;
                  if (isSingle || indices.length <= 0 || !(isNotSingle && (ctrlKey || shiftKey))) {
                      selection.clearAndAdd(lastRowIndex);
                  }
                  else if (ctrlKey) {
                      selection.toggle(lastRowIndex);
                  }
                  else if (shiftKey) {
                      selection.addTo(lastRowIndex);
                  }
              }
          }
      };
      EShapeTableBodyRuntime.prototype.onDblClick = function (shape, e, interactionManager) {
          var result = _super.prototype.onDblClick.call(this, shape, e, interactionManager);
          // Focus on clicked cell
          var cell = this.getCell(shape, this.lastRowIndex, this.lastColumnIndex);
          if (cell != null) {
              cell.focus();
          }
          return result;
      };
      EShapeTableBodyRuntime.prototype.onOut = function (shape, e) {
          _super.prototype.onOut.call(this, shape, e);
          // Clear highlight
          var lastRowIndex = this.lastRowIndex;
          if (0 <= lastRowIndex) {
              this.setRowHovered(shape, lastRowIndex, false);
              this.lastRowIndex = -1;
          }
      };
      EShapeTableBodyRuntime.prototype.onCellTouched = function (shape, rowIndex, columnIndex) {
          var isChanged = false;
          var lastRowTouched = this.lastRowIndex;
          if (lastRowTouched !== rowIndex) {
              this.setRowHovered(shape, lastRowTouched, false);
              this.setRowHovered(shape, rowIndex, true);
              this.lastRowIndex = rowIndex;
              isChanged = true;
          }
          var lastColumnIndex = this.lastColumnIndex;
          if (lastColumnIndex !== columnIndex) {
              this.lastColumnIndex = columnIndex;
              isChanged = true;
          }
          if (isChanged) {
              var cell = this.getCell(shape, rowIndex, columnIndex);
              shape.title = (cell && cell.text.value) || "";
              var layer = wcardinalUi.DApplications.getLayer(shape);
              if (layer) {
                  layer.view.title = shape.title;
              }
          }
      };
      EShapeTableBodyRuntime.prototype.getRow = function (shape, index) {
          var rows = shape.children;
          if (0 <= index && index < rows.length) {
              return rows[index];
          }
          return null;
      };
      EShapeTableBodyRuntime.prototype.getCell = function (shape, rowIndex, columnIndex) {
          var row = this.getRow(shape, rowIndex);
          if (row != null) {
              var cells = row.children;
              if (0 <= columnIndex && columnIndex < cells.length) {
                  return cells[columnIndex];
              }
          }
          return null;
      };
      EShapeTableBodyRuntime.prototype.setRowHovered = function (shape, index, isHovered) {
          var row = this.getRow(shape, index);
          if (row != null) {
              var cells = row.children;
              for (var i = 0, imax = cells.length; i < imax; ++i) {
                  cells[i].state.isHovered = isHovered;
              }
          }
      };
      EShapeTableBodyRuntime.WORK_POINT = new pixi_js.Point();
      return EShapeTableBodyRuntime;
  }(wcardinalUi.EShapeRuntimeImpl));

  var EShapeTableBody = /** @class */ (function (_super) {
      __extends(EShapeTableBody, _super);
      function EShapeTableBody(mode, type) {
          if (type === void 0) { type = EShapeTableIds.BODY_ID; }
          return _super.call(this, mode, type) || this;
      }
      EShapeTableBody.prototype.containsAbs = function (x, y, ax, ay) {
          if (this.containsAbsBBox(x, y, ax, ay)) {
              var children = this.children;
              if (0 < children.length) {
                  var first = children[0];
                  var rowIndex = ((ay + y) / first.size.y) | 0;
                  if (rowIndex < children.length) {
                      var cells = first.children;
                      for (var i = 0, imax = cells.length; i < imax; ++i) {
                          var cell = cells[i];
                          var cx = cell.transform.position.x;
                          var csx = 0.5 * cell.size.x;
                          if (x < cx + csx) {
                              var runtime = this.runtime;
                              if (runtime instanceof EShapeTableBodyRuntime) {
                                  runtime.onCellTouched(this, rowIndex, i);
                              }
                              return true;
                          }
                      }
                      return true;
                  }
                  else {
                      return false;
                  }
              }
          }
          return false;
      };
      EShapeTableBody.prototype.containsText = function (x, y) {
          return null;
      };
      EShapeTableBody.prototype.containsChildren = function (x, y) {
          return null;
      };
      return EShapeTableBody;
  }(wcardinalUi.EShapeGroupShadowed));

  var toValueDefault = function (row, index) { return row[index]; };
  var fromValueDefault = function (row, index, rows, value) {
      row[index] = value;
  };
  var formatterDefault = function (value) { return String(value); };
  var EShapeTableColumnValueRuntime = /** @class */ (function () {
      function EShapeTableColumnValueRuntime(value) {
          this.toValue = this.parseToValue(value.getter, toValueDefault, '""');
          this.fromValue = this.parseFromValue(value.setter, fromValueDefault);
          if (value.type === EShapeTableColumnValueType.TEXT) {
              this.formatter = this.parseFormat(value.format, formatterDefault, '""');
          }
          else {
              var format = value.format;
              if (0 < format.trim().length) {
                  var formatter_1 = wcardinalUi.NumberFormatters.create(format);
                  this.formatter = function (v) {
                      return formatter_1.format(v, 1);
                  };
              }
              else {
                  this.formatter = formatterDefault;
              }
          }
      }
      EShapeTableColumnValueRuntime.prototype.parseToValue = function (expression, def, defLiteral) {
          if (expression.trim().length <= 0) {
              return def;
          }
          try {
              return Function("row", "index", "rows", "try{ return (".concat(expression, "); } catch( e ) { return ").concat(defLiteral, "; }"));
          }
          catch (_a) {
              return def;
          }
      };
      EShapeTableColumnValueRuntime.prototype.parseFromValue = function (expression, def) {
          if (expression.trim().length <= 0) {
              return def;
          }
          try {
              return Function("row", "index", "rows", "value", "try{ ".concat(expression, " = value; } catch( e ) {}"));
          }
          catch (_a) {
              return def;
          }
      };
      EShapeTableColumnValueRuntime.prototype.parseFormat = function (expression, def, defLiteral) {
          if (expression.trim().length <= 0) {
              return def;
          }
          try {
              return Function("value", "index", "try{ return (".concat(expression, "); } catch( e ) { return ").concat(defLiteral, "; }"));
          }
          catch (_a) {
              return def;
          }
      };
      return EShapeTableColumnValueRuntime;
  }());

  var EShapeTableHeaderRuntime = /** @class */ (function (_super) {
      __extends(EShapeTableHeaderRuntime, _super);
      function EShapeTableHeaderRuntime() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return EShapeTableHeaderRuntime;
  }(wcardinalUi.EShapeRuntimeImpl));

  var EShapeTableHeader = /** @class */ (function (_super) {
      __extends(EShapeTableHeader, _super);
      function EShapeTableHeader(mode, type) {
          if (type === void 0) { type = EShapeTableIds.HEADER_ID; }
          return _super.call(this, mode, type) || this;
      }
      return EShapeTableHeader;
  }(wcardinalUi.EShapeGroupShadowed));

  var EShapeTableRuntime = /** @class */ (function (_super) {
      __extends(EShapeTableRuntime, _super);
      function EShapeTableRuntime(shape) {
          var _this = _super.call(this, shape) || this;
          if (shape instanceof EShapeTable) {
              // Columns
              var values = shape.column.values;
              for (var i = 0, imax = values.length; i < imax; ++i) {
                  var value = values[i];
                  value.runtime = new EShapeTableColumnValueRuntime(value);
              }
              // Action
              _this.actions.push(new EShapeTableActionRuntime(shape));
          }
          return _this;
      }
      return EShapeTableRuntime;
  }(wcardinalUi.EShapeRuntimeImpl));

  var EShapeTables = /** @class */ (function () {
      function EShapeTables() {
      }
      EShapeTables.getTheme = function () {
          return wcardinalUi.DThemes.get("EShapeTable");
      };
      EShapeTables.create = function (existing) {
          var mode = wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR;
          var result = new EShapeTable(mode);
          var header = new EShapeTableHeader(mode).attach(result);
          var headerCell = new wcardinalUi.EShapeRectangle().attach(header);
          headerCell.stroke.side = wcardinalUi.EShapeStrokeSide.BOTTOM;
          headerCell.stroke.width = 1;
          headerCell.stroke.color = wcardinalUi.UtilRgb.brighten(wcardinalUi.EShapeDefaults.STROKE_COLOR, 0.65);
          var body = new EShapeTableBody(mode).attach(result);
          body.state.isFocusable = true;
          body.interactive = true;
          var even = new wcardinalUi.EShapeGroupShadowed(mode).attach(body);
          var odd = new wcardinalUi.EShapeGroupShadowed(mode).attach(body);
          var cellEven = new wcardinalUi.EShapeRectangle().attach(even);
          cellEven.stroke.enable = false;
          cellEven.text.value = "-";
          cellEven.text.clipping = true;
          var cellOdd = new wcardinalUi.EShapeRectangle().attach(odd);
          cellOdd.fill.color = wcardinalUi.UtilRgb.darken(wcardinalUi.EShapeDefaults.FILL_COLOR, 0.05);
          cellOdd.stroke.enable = false;
          cellOdd.text.value = "-";
          cellOdd.text.clipping = true;
          result.column.add(new EShapeTableColumnValue(1, EShapeTableColumnValueType.TEXT, "", "", "", wcardinalUi.EShapeTextAlignHorizontal.CENTER, new EShapeTableColumnValueHeader(this.getTheme().newHeaderLabel()), new EShapeTableColumnValueBody()));
          if (existing) {
              result.copy(existing);
          }
          result.onSizeChange();
          return result;
      };
      EShapeTables.load = function () {
          var theme = this.getTheme();
          var name = theme.getName();
          EShapeExtensions.add({
              type: EShapeTableIds.ID,
              name: name,
              icon: {
                  width: 24,
                  height: 24,
                  // Material Icons https://material.io/tools/icons/
                  // Available under Apache license version 2.0
                  svg: "<g transform=\"scale(26.6666)\" fill=\"#fff\" stroke=\"none\">" +
                      "<path d=\"M20 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 2v3H5V5h15z" +
                      "m-5 14h-5v-9h5v9zM5 10h3v9H5v-9zm12 9v-9h3v9h-3z\"/>" +
                      "</g>"
              },
              title: name,
              creator: function (existing) { return EShapeTables.create(existing); },
              deserializer: function (item, manager) { return EShapeTables.deserialize(item, manager); },
              editor: EEditorShapeTable,
              runtime: EShapeTableRuntime,
              uploaded: wcardinalUi.createGroupUploaded
          });
          EShapeExtensions.add({
              type: EShapeTableIds.HEADER_ID,
              name: theme.getHeaderName(),
              deserializer: function (item, manager) { return EShapeTables.deserializeHeader(item, manager); },
              runtime: EShapeTableHeaderRuntime,
              capability: wcardinalUi.EShapeCapability.PRIMITIVE & ~wcardinalUi.EShapeCapability.CHILDREN
          });
          EShapeExtensions.add({
              type: EShapeTableIds.BODY_ID,
              name: theme.getBodyName(),
              deserializer: function (item, manager) { return EShapeTables.deserializeBody(item, manager); },
              runtime: EShapeTableBodyRuntime,
              capability: wcardinalUi.EShapeCapability.PRIMITIVE & ~wcardinalUi.EShapeCapability.CHILDREN
          });
      };
      EShapeTables.deserialize = function (item, manager) {
          var shape = new EShapeTable(manager.mode);
          var index = item[15];
          var resources = manager.resources;
          if (0 <= index && index < resources.length) {
              var parsed = manager.getExtension(index);
              if (parsed == null) {
                  parsed = JSON.parse(resources[index]);
                  manager.setExtension(index, parsed);
              }
              shape.column.deserialize(parsed[0], manager);
              shape.row.deserialize(parsed[1], manager);
              item[15] = parsed[parsed.length - 1];
          }
          var result = wcardinalUi.deserializeBase(item, manager, shape);
          shape.size.init();
          return result;
      };
      EShapeTables.deserializeHeader = function (item, manager) {
          var shape = new EShapeTableHeader(manager.mode);
          var result = wcardinalUi.deserializeBase(item, manager, shape);
          shape.size.init();
          return result;
      };
      EShapeTables.deserializeBody = function (item, manager) {
          var shape = new EShapeTableBody(manager.mode);
          var result = wcardinalUi.deserializeBase(item, manager, shape);
          shape.size.init();
          return result;
      };
      return EShapeTables;
  }());

  var loadShapeExtensionTable = function () {
      EShapeTables.load();
  };

  var toIconName = function (index) {
      return "extension_factory_icon_".concat(index);
  };
  var EShapeExtensionFactories = /** @class */ (function () {
      function EShapeExtensionFactories() {
      }
      EShapeExtensionFactories.add = function (factory) {
          this._factories.push(factory);
      };
      EShapeExtensionFactories.each = function (iteratee) {
          var factories = this._factories;
          for (var i = 0, imax = factories.length; i < imax; ++i) {
              iteratee(factories[i]);
          }
      };
      EShapeExtensionFactories.merge = function (iconBuilder) {
          var factories = this._factories;
          for (var i = 0, imax = factories.length; i < imax; ++i) {
              var factory = factories[i];
              var icon = factory.icon;
              iconBuilder.add(toIconName(i), icon.width, icon.height, icon.svg);
          }
      };
      EShapeExtensionFactories.build = function (icons) {
          var factories = this._factories;
          for (var i = 0, imax = factories.length; i < imax; ++i) {
              var factory = factories[i];
              factory.icon.texture = icons[toIconName(i)];
          }
      };
      EShapeExtensionFactories._factories = [];
      return EShapeExtensionFactories;
  }());

  var EDialogActionKeywordInput = /** @class */ (function (_super) {
      __extends(EDialogActionKeywordInput, _super);
      function EDialogActionKeywordInput() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogActionKeywordInput.prototype.getClipperRect = function (resolution, point, result) {
          return wcardinalUi.UtilHtmlElement.getClipperRect(null, this, resolution, point, result);
      };
      return EDialogActionKeywordInput;
  }(wcardinalUi.DInputSearch));

  var EDialogActionKeywordBoard = /** @class */ (function (_super) {
      __extends(EDialogActionKeywordBoard, _super);
      function EDialogActionKeywordBoard(options) {
          var _this = _super.call(this, options) || this;
          _this.addChild(new wcardinalUi.DLayoutVertical({
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              children: [_this.input, _this.list, _this.text]
          }));
          _this.onInputChange("");
          return _this;
      }
      Object.defineProperty(EDialogActionKeywordBoard.prototype, "input", {
          // Input
          get: function () {
              var result = this._input;
              if (result == null) {
                  result = this.newInput();
                  this._input = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionKeywordBoard.prototype.newInput = function () {
          var _this = this;
          return new EDialogActionKeywordInput({
              width: "padding",
              on: {
                  input: function (value) {
                      _this.onInputChange(value);
                  }
              }
          });
      };
      EDialogActionKeywordBoard.prototype.onInputChange = function (word) {
          this.list.data.clearAndAddAll(this.newKeywords(word));
      };
      EDialogActionKeywordBoard.prototype.newKeywords = function (word) {
          var _a;
          var keywords = ((_a = this._keywords) !== null && _a !== void 0 ? _a : (this._keywords = wcardinalUi.DThemes.get("EDialogAction").newKeywords()));
          if (0 < word.trim().length) {
              var filtered = [];
              for (var i = 0, imax = keywords.length; i < imax; ++i) {
                  var keyword = keywords[i];
                  if (0 <= keyword.keyword.indexOf(word)) {
                      filtered.push(keyword);
                  }
              }
              return filtered;
          }
          else {
              return keywords;
          }
      };
      Object.defineProperty(EDialogActionKeywordBoard.prototype, "list", {
          // List
          get: function () {
              var result = this._list;
              if (result == null) {
                  result = this.newList();
                  this._list = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionKeywordBoard.prototype.newList = function () {
          var _this = this;
          return new wcardinalUi.DList({
              weight: 1,
              width: "padding",
              data: {
                  selection: {
                      on: {
                          change: function () {
                              _this.onListSelectionChange();
                          }
                      }
                  },
                  toLabel: function (keyword) {
                      return keyword.keyword;
                  },
                  toId: function (keyword) {
                      return keyword.keyword;
                  }
              }
          });
      };
      EDialogActionKeywordBoard.prototype.onListSelectionChange = function () {
          var first = this.list.data.selection.first;
          if (first) {
              this.text.text = "".concat(first.keyword, ": ").concat(first.type, "\n").concat(first.description);
          }
          else {
              this.text.text = "";
          }
      };
      Object.defineProperty(EDialogActionKeywordBoard.prototype, "text", {
          // Text
          get: function () {
              var result = this._text;
              if (result == null) {
                  result = this.newText();
                  this._text = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogActionKeywordBoard.prototype.newText = function () {
          return new wcardinalUi.DText({
              width: "padding",
              height: 120,
              state: "READ_ONLY",
              text: {
                  style: {
                      wordWrap: "NORMAL"
                  }
              },
              theme: "DInputTextArea"
          });
      };
      EDialogActionKeywordBoard.prototype.getType = function () {
          return "DDialog";
      };
      return EDialogActionKeywordBoard;
  }(wcardinalUi.DBoard));

  var EDialogAction = /** @class */ (function (_super) {
      __extends(EDialogAction, _super);
      function EDialogAction() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogAction.prototype.newContentChildren = function (theme, options) {
          var _this = this;
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.selectLayout, this.showHideTypeLayout, this.blinkTypeLayout, this.transformTypeLayout, this.changeColorTypeLayout, this.changeColorTargetLayout, this.rotateTypeLayout, this.resizeTypeLayout, this.originXLayout, this.originYLayout, this.moveTypeLayout, this.openTypeLayout, this.openDialogTypeLayout, this.changeTextTypeLayout, this.miscTypeLayout, this.onInputActionLayout, this.whenTypeLayout, this.gestureTypeLayout, this.gestureOperationTypeLayout, this.selectLayerLayout, this.condition, this.intervalLayout, this.size, this.amount, this.targetName, this.colorLayout, this.target, this.argument, this.contents, this.initialization, this.pointerEventsLayout, this.colorCode, this.alphaCode, this.brightness, this.blend, this.initial, this.step, this.min, this.max, this.scaleLayout, this.checkBringToFrontLayout, this.inNewWindowLayout);
          var onChangeBound = function () {
              _this.onChange();
          };
          this.select.on("change", onChangeBound);
          this.showHideType.on("change", onChangeBound);
          this.blinkType.on("change", onChangeBound);
          this.transformType.on("change", onChangeBound);
          this.resizeType.on("change", onChangeBound);
          this.changeColorTarget.on("change", onChangeBound);
          this.openType.on("change", onChangeBound);
          this.openDialogType.on("change", onChangeBound);
          this.miscType.on("change", onChangeBound);
          return result;
      };
      EDialogAction.prototype.newLabel = function (label) {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: label
              }
          });
      };
      EDialogAction.prototype.newSpace = function () {
          return new wcardinalUi.DLayoutSpace({
              width: 60
          });
      };
      EDialogAction.prototype.newLabeled = function (label, input) {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  label != null ? this.newLabel(label) : this.newSpace(),
                  input,
                  this.newSpace()
              ]
          });
      };
      Object.defineProperty(EDialogAction.prototype, "themeShape", {
          // Theme
          get: function () {
              var _a;
              return ((_a = this._themeShape) !== null && _a !== void 0 ? _a : (this._themeShape = this.newThemeShape()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newThemeShape = function () {
          return wcardinalUi.DThemes.get("EShapeActionValue");
      };
      Object.defineProperty(EDialogAction.prototype, "select", {
          // Select
          get: function () {
              var _a;
              return ((_a = this._select) !== null && _a !== void 0 ? _a : (this._select = this.newSelect()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newSelect = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueType.SHOW_HIDE,
              menu: {
                  items: this.newSelectMenuItems()
              }
          });
      };
      EDialogAction.prototype.newSelectMenuItems = function () {
          var themeShape = this.themeShape;
          var result = [
              {
                  value: wcardinalUi.EShapeActionValueType.SHOW_HIDE,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.SHOW_HIDE)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.BLINK,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.BLINK)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.TRANSFORM,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.TRANSFORM)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.CHANGE_COLOR,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.CHANGE_COLOR)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.CHANGE_TEXT,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.CHANGE_TEXT)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.CHANGE_CURSOR,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.CHANGE_CURSOR)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.OPEN,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.OPEN)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.GESTURE,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.GESTURE)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueType.MISC,
                  text: {
                      value: themeShape.toTypeLabel(wcardinalUi.EShapeActionValueType.MISC)
                  }
              }
          ];
          EShapeActionExtensions.each(function (extension) {
              result.push({
                  value: extension.type,
                  text: {
                      value: extension.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "selectLayout", {
          get: function () {
              var _a;
              return ((_a = this._selectLayout) !== null && _a !== void 0 ? _a : (this._selectLayout = this.newSelectLayout()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newSelectLayout = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newLabel(this.theme.getSelectActionLabel()),
                  this.select,
                  new wcardinalUi.DLayoutHorizontal({
                      width: 60,
                      height: "auto",
                      children: [
                          new wcardinalUi.DLayoutSpace({
                              weight: 1
                          }),
                          this.buttonKeyword
                      ]
                  })
              ]
          });
      };
      Object.defineProperty(EDialogAction.prototype, "buttonKeyword", {
          // Keyword button
          get: function () {
              var _a;
              return ((_a = this._buttonKeyword) !== null && _a !== void 0 ? _a : (this._buttonKeyword = this.newButtonKeyword()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newButtonKeyword = function () {
          var _this = this;
          var _a;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              toggle: true,
              image: {
                  source: (_a = this.options) === null || _a === void 0 ? void 0 : _a.icons.action_keyword
              },
              title: this.theme.getButtonKeywordTitle(),
              on: {
                  active: function () {
                      _this.onButtonKeywordActive();
                  },
                  inactive: function () {
                      _this.onButtonKeywordInactive();
                  }
              }
          });
      };
      EDialogAction.prototype.onButtonKeywordActive = function () {
          var boardKeyword = this.boardKeyword;
          var offset = this.getBoardKeywordOffset();
          var width = this.width;
          var layer = wcardinalUi.DApplications.getLayer(this);
          if (layer != null) {
              var boardKeywordWidth = boardKeyword.width;
              if (layer.width < this.position.x + width + offset + boardKeywordWidth) {
                  boardKeyword.position.x = -boardKeywordWidth - offset;
              }
              else {
                  boardKeyword.position.x = width + offset;
              }
          }
          else {
              boardKeyword.position.x = width + offset;
          }
          boardKeyword.show();
      };
      EDialogAction.prototype.onButtonKeywordInactive = function () {
          this.boardKeyword.hide();
      };
      Object.defineProperty(EDialogAction.prototype, "boardKeyword", {
          // Keyword board
          get: function () {
              var _a;
              return ((_a = this._boardKeyword) !== null && _a !== void 0 ? _a : (this._boardKeyword = this.newBoardKeyword()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newBoardKeyword = function () {
          // To exclude this board from the automatic height calculation targets,
          // The width and the height must be functions.
          return new EDialogActionKeywordBoard({
              parent: this,
              x: 0,
              y: 0,
              width: function () { return 300; },
              height: function () { return 400; },
              padding: 16
          });
      };
      EDialogAction.prototype.getBoardKeywordOffset = function () {
          return 16;
      };
      Object.defineProperty(EDialogAction.prototype, "showHideType", {
          // Select show / hide type
          get: function () {
              var _a;
              return ((_a = this._showHideType) !== null && _a !== void 0 ? _a : (this._showHideType = this.newShowHideType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newShowHideType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueShowHideType.SHAPE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueShowHideType.SHAPE,
                          text: {
                              value: themeShape.toShowHideTypeLabel(wcardinalUi.EShapeActionValueShowHideType.SHAPE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueShowHideType.LAYER,
                          text: {
                              value: themeShape.toShowHideTypeLabel(wcardinalUi.EShapeActionValueShowHideType.LAYER)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "showHideTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._showHideTypeLayout) !== null && _a !== void 0 ? _a : (this._showHideTypeLayout = this.newLabeled(null, this.showHideType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeShowHideTypeLayout = function (select) {
          var showHideTypeLayout = this.showHideTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.SHOW_HIDE) {
              showHideTypeLayout.show();
          }
          else {
              showHideTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "blinkType", {
          // Select blink type
          get: function () {
              var _a;
              return ((_a = this._blinkType) !== null && _a !== void 0 ? _a : (this._blinkType = this.newBlinkType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newBlinkType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueBlinkType.VISIBILITY,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.VISIBILITY,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.VISIBILITY)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.BRIGHTEN,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.BRIGHTEN)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.DARKEN,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.DARKEN)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.OPACITY,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.OPACITY)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.COLOR_FILL,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.COLOR_FILL)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueBlinkType.COLOR_STROKE,
                          text: {
                              value: themeShape.toBlinkTypeLabel(wcardinalUi.EShapeActionValueBlinkType.COLOR_STROKE)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "blinkTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._blinkTypeLayout) !== null && _a !== void 0 ? _a : (this._blinkTypeLayout = this.newLabeled(null, this.blinkType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeBlinkTypeLayout = function (select) {
          var blinkTypeLayout = this.blinkTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.BLINK) {
              blinkTypeLayout.show();
          }
          else {
              blinkTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "transformType", {
          // Transform type
          get: function () {
              var _a;
              return ((_a = this._transformType) !== null && _a !== void 0 ? _a : (this._transformType = this.newTransformType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newTransformType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueTransformType.MOVE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueTransformType.MOVE,
                          text: {
                              value: themeShape.toTransformTypeLabel(wcardinalUi.EShapeActionValueTransformType.MOVE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformType.ROTATE,
                          text: {
                              value: themeShape.toTransformTypeLabel(wcardinalUi.EShapeActionValueTransformType.ROTATE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformType.RESIZE,
                          text: {
                              value: themeShape.toTransformTypeLabel(wcardinalUi.EShapeActionValueTransformType.RESIZE)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "transformTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._transformTypeLayout) !== null && _a !== void 0 ? _a : (this._transformTypeLayout = this.newLabeled(null, this.transformType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeTransformTypeLayout = function (select) {
          var transformTypeLayout = this.transformTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              transformTypeLayout.show();
          }
          else {
              transformTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "changeColorType", {
          // Select color type
          get: function () {
              var _a;
              return ((_a = this._changeColorType) !== null && _a !== void 0 ? _a : (this._changeColorType = this.newChangeColorType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newChangeColorType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelectMultiple({
              weight: 1,
              values: [wcardinalUi.EShapeActionValueChangeColorType.FILL],
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorType.FILL,
                          text: {
                              value: themeShape.toChangeColorTypeLabel(wcardinalUi.EShapeActionValueChangeColorType.FILL)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorType.STROKE,
                          text: {
                              value: themeShape.toChangeColorTypeLabel(wcardinalUi.EShapeActionValueChangeColorType.STROKE)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorType.TEXT,
                          text: {
                              value: themeShape.toChangeColorTypeLabel(wcardinalUi.EShapeActionValueChangeColorType.TEXT)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorType.TEXT_OUTLINE,
                          text: {
                              value: themeShape.toChangeColorTypeLabel(wcardinalUi.EShapeActionValueChangeColorType.TEXT_OUTLINE)
                          },
                          check: true
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "changeColorTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._changeColorTypeLayout) !== null && _a !== void 0 ? _a : (this._changeColorTypeLayout = this.newLabeled(null, this.changeColorType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeChangeColorTypeLayout = function (select) {
          var changeColorTypeLayout = this.changeColorTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              changeColorTypeLayout.show();
          }
          else {
              changeColorTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "changeColorTarget", {
          // Select color target
          get: function () {
              var _a;
              return ((_a = this._changeColorTarget) !== null && _a !== void 0 ? _a : (this._changeColorTarget = this.newChangeColorTarget()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newChangeColorTarget = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA,
                          text: {
                              value: themeShape.toChangeColorTargetLabel(wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorTarget.COLOR,
                          text: {
                              value: themeShape.toChangeColorTargetLabel(wcardinalUi.EShapeActionValueChangeColorTarget.COLOR)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA,
                          text: {
                              value: themeShape.toChangeColorTargetLabel(wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorTarget.CODE,
                          text: {
                              value: themeShape.toChangeColorTargetLabel(wcardinalUi.EShapeActionValueChangeColorTarget.CODE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeColorTarget.BRIGHTNESS,
                          text: {
                              value: themeShape.toChangeColorTargetLabel(wcardinalUi.EShapeActionValueChangeColorTarget.BRIGHTNESS)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "changeColorTargetLayout", {
          get: function () {
              var _a;
              return ((_a = this._changeColorTargetLayout) !== null && _a !== void 0 ? _a : (this._changeColorTargetLayout = this.newLabeled(null, this.changeColorTarget)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeChangeColorTargetLayout = function (select) {
          var changeColorTargetLayout = this.changeColorTargetLayout;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              changeColorTargetLayout.show();
          }
          else {
              changeColorTargetLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "rotateType", {
          // Select rotate type
          get: function () {
              var _a;
              return ((_a = this._rotateType) !== null && _a !== void 0 ? _a : (this._rotateType = this.newRotateType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newRotateType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueTransformRotateType.RELATIVE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueTransformRotateType.RELATIVE,
                          text: {
                              value: themeShape.toTransformRotateTypeLabel(wcardinalUi.EShapeActionValueTransformRotateType.RELATIVE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformRotateType.ABSOLUTE,
                          text: {
                              value: themeShape.toTransformRotateTypeLabel(wcardinalUi.EShapeActionValueTransformRotateType.ABSOLUTE)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "rotateTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._rotateTypeLayout) !== null && _a !== void 0 ? _a : (this._rotateTypeLayout = this.newLabeled(null, this.rotateType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeRotateTypeLayout = function (select) {
          var rotateTypeLayout = this.rotateTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              if (this.transformType.value === wcardinalUi.EShapeActionValueTransformType.ROTATE) {
                  rotateTypeLayout.show();
              }
              else {
                  rotateTypeLayout.hide();
              }
          }
          else {
              rotateTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "resizeType", {
          // Select resize type
          get: function () {
              var _a;
              return ((_a = this._resizeType) !== null && _a !== void 0 ? _a : (this._resizeType = this.newResizeType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newResizeType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_SIZE,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_SIZE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_HEIGHT,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_HEIGHT)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_HEIGHT,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_HEIGHT)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_WIDTH,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_WIDTH)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_WIDTH,
                          text: {
                              value: themeShape.toTransformResizeTypeLabel(wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_WIDTH)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "resizeTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._resizeTypeLayout) !== null && _a !== void 0 ? _a : (this._resizeTypeLayout = this.newLabeled(null, this.resizeType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeResizeTypeLayout = function (select) {
          var resizeTypeLayout = this.resizeTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              if (this.transformType.value === wcardinalUi.EShapeActionValueTransformType.RESIZE) {
                  resizeTypeLayout.show();
              }
              else {
                  resizeTypeLayout.hide();
              }
          }
          else {
              resizeTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "originX", {
          // X Origin
          get: function () {
              var _a;
              return ((_a = this._originX) !== null && _a !== void 0 ? _a : (this._originX = this.newOriginX()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newOriginX = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              text: {
                  value: 0.5
              },
              step: 0.1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "originXLayout", {
          get: function () {
              var _a;
              return ((_a = this._originXLayout) !== null && _a !== void 0 ? _a : (this._originXLayout = this.newLabeled(this.theme.getInputOriginXLabel(), this.originX)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeOriginXLayout = function (select) {
          var originXLayout = this.originXLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              var transformType = this.transformType.value;
              if (transformType === wcardinalUi.EShapeActionValueTransformType.RESIZE) {
                  var resizeType = this.resizeType.value;
                  if (resizeType === wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_SIZE ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_WIDTH ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_WIDTH) {
                      originXLayout.show();
                  }
                  else {
                      originXLayout.hide();
                  }
              }
              else if (transformType === wcardinalUi.EShapeActionValueTransformType.ROTATE) {
                  originXLayout.show();
              }
              else {
                  originXLayout.hide();
              }
          }
          else {
              originXLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "originY", {
          // Y Origin
          get: function () {
              var _a;
              return ((_a = this._originY) !== null && _a !== void 0 ? _a : (this._originY = this.newOriginY()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newOriginY = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              text: {
                  value: 0.5
              },
              step: 0.1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "originYLayout", {
          get: function () {
              var _a;
              return ((_a = this._originYLayout) !== null && _a !== void 0 ? _a : (this._originYLayout = this.newLabeled(this.theme.getInputOriginYLabel(), this.originY)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeOriginYLayout = function (select) {
          var originYLayout = this.originYLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              var transformType = this.transformType.value;
              if (transformType === wcardinalUi.EShapeActionValueTransformType.RESIZE) {
                  var resizeType = this.resizeType.value;
                  if (resizeType === wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_SIZE ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.ABSOLUTE_HEIGHT ||
                      resizeType === wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_HEIGHT) {
                      originYLayout.show();
                  }
                  else {
                      originYLayout.hide();
                  }
              }
              else if (transformType === wcardinalUi.EShapeActionValueTransformType.ROTATE) {
                  originYLayout.show();
              }
              else {
                  originYLayout.hide();
              }
          }
          else {
              originYLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "moveType", {
          // Select move type
          get: function () {
              var _a;
              return ((_a = this._moveType) !== null && _a !== void 0 ? _a : (this._moveType = this.newMoveType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newMoveType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_X,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_X,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_X)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_Y,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_Y)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.ABSOLUTE_X,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.ABSOLUTE_X)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.ABSOLUTE_Y,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.ABSOLUTE_Y)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.FORWARD_OR_BACKWARD,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.FORWARD_OR_BACKWARD)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueTransformMoveType.LEFT_OR_RIGHT,
                          text: {
                              value: themeShape.toTransformMoveTypeLabel(wcardinalUi.EShapeActionValueTransformMoveType.LEFT_OR_RIGHT)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "moveTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._moveTypeLayout) !== null && _a !== void 0 ? _a : (this._moveTypeLayout = this.newLabeled(null, this.moveType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeMoveTypeLayout = function (select) {
          var moveTypeLayout = this.moveTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              if (this.transformType.value === wcardinalUi.EShapeActionValueTransformType.MOVE) {
                  moveTypeLayout.show();
              }
              else {
                  moveTypeLayout.hide();
              }
          }
          else {
              moveTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "openType", {
          // Select open type
          get: function () {
              var _a;
              return ((_a = this._openType) !== null && _a !== void 0 ? _a : (this._openType = this.newOpenType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newOpenType = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueOpenType.DIAGRAM,
              menu: {
                  items: this.newOpenTypeMenuItems()
              }
          });
      };
      EDialogAction.prototype.newOpenTypeMenuItems = function () {
          var themeShape = this.themeShape;
          var result = [
              {
                  value: wcardinalUi.EShapeActionValueOpenType.DIAGRAM,
                  text: {
                      value: themeShape.toOpenTypeLabel(wcardinalUi.EShapeActionValueOpenType.DIAGRAM)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenType.PAGE,
                  text: {
                      value: themeShape.toOpenTypeLabel(wcardinalUi.EShapeActionValueOpenType.PAGE)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenType.DIALOG,
                  text: {
                      value: themeShape.toOpenTypeLabel(wcardinalUi.EShapeActionValueOpenType.DIALOG)
                  }
              }
          ];
          wcardinalUi.EShapeActionOpenExtensions.each(function (extension) {
              result.push({
                  value: extension.type,
                  text: {
                      value: extension.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "openTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._openTypeLayout) !== null && _a !== void 0 ? _a : (this._openTypeLayout = this.newLabeled(null, this.openType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeOpenTypeLayout = function (select) {
          var openTypeLayout = this.openTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              openTypeLayout.show();
          }
          else {
              openTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "openDialogType", {
          // Select open dialog type
          get: function () {
              var _a;
              return ((_a = this._openDialogType) !== null && _a !== void 0 ? _a : (this._openDialogType = this.newOpenDialogType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newOpenDialogType = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueOpenDialogType.TEXT,
              menu: {
                  items: this.newOpenDialogTypeMenuItems()
              }
          });
      };
      EDialogAction.prototype.newOpenDialogTypeMenuItems = function () {
          var themeShape = this.themeShape;
          var result = [
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.TEXT,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.TEXT)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.INTEGER,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.INTEGER)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.REAL,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.REAL)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.BOOLEAN,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.BOOLEAN)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.DATE,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.DATE)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.TIME,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.TIME)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueOpenDialogType.DATETIME,
                  text: {
                      value: themeShape.toOpenDialogTypeLabel(wcardinalUi.EShapeActionValueOpenDialogType.DATETIME)
                  }
              }
          ];
          wcardinalUi.EShapeActionOpenDialogExtensions.each(function (extension) {
              result.push({
                  value: extension.type,
                  text: {
                      value: extension.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "openDialogTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._openDialogTypeLayout) !== null && _a !== void 0 ? _a : (this._openDialogTypeLayout = this.newLabeled(null, this.openDialogType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeOpenDialogTypeLayout = function (select) {
          var openDialogTypeLayout = this.openDialogTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              if (this.openType.value === wcardinalUi.EShapeActionValueOpenType.DIALOG) {
                  openDialogTypeLayout.show();
              }
              else {
                  openDialogTypeLayout.hide();
              }
          }
          else {
              openDialogTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "changeTextType", {
          // Select change text type
          get: function () {
              var _a;
              return ((_a = this._changeTextType) !== null && _a !== void 0 ? _a : (this._changeTextType = this.newChangeTextType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newChangeTextType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueChangeTextType.TEXT,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueChangeTextType.TEXT,
                          text: {
                              value: themeShape.toChangeTextTypeLabel(wcardinalUi.EShapeActionValueChangeTextType.TEXT)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueChangeTextType.NUMBER,
                          text: {
                              value: themeShape.toChangeTextTypeLabel(wcardinalUi.EShapeActionValueChangeTextType.NUMBER)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "changeTextTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._changeTextTypeLayout) !== null && _a !== void 0 ? _a : (this._changeTextTypeLayout = this.newLabeled(null, this.changeTextType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeChangeTextTypeLayout = function (select) {
          var changeTextTypeLayout = this.changeTextTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_TEXT) {
              changeTextTypeLayout.show();
          }
          else {
              changeTextTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "miscType", {
          // Select misc. type
          get: function () {
              var _a;
              return ((_a = this._miscType) !== null && _a !== void 0 ? _a : (this._miscType = this.newMiscType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newMiscType = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT,
              menu: {
                  items: this.newMiscTypeMenuItems()
              }
          });
      };
      EDialogAction.prototype.newMiscTypeMenuItems = function () {
          var themeShape = this.themeShape;
          var result = [
              {
                  value: wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.INPUT_REAL,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.INPUT_REAL)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.EMIT_EVENT,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.EMIT_EVENT)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.WRITE_BOTH,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.WRITE_BOTH)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.WRITE_LOCAL,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.WRITE_LOCAL)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.WRITE_REMOTE,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.WRITE_REMOTE)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT)
                  }
              },
              {
                  value: wcardinalUi.EShapeActionValueMiscType.EXECUTE,
                  text: {
                      value: themeShape.toMiscTypeLabel(wcardinalUi.EShapeActionValueMiscType.EXECUTE)
                  }
              }
          ];
          wcardinalUi.EShapeActionMiscExtensions.each(function (extension) {
              result.push({
                  value: extension.type,
                  text: {
                      value: extension.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "miscTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._miscTypeLayout) !== null && _a !== void 0 ? _a : (this._miscTypeLayout = this.newLabeled(null, this.miscType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeMiscTypeLayout = function (select) {
          var miscTypeLayout = this.miscTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.MISC) {
              miscTypeLayout.show();
          }
          else {
              miscTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "onInputAction", {
          // OnInput Action type
          get: function () {
              var _a;
              return ((_a = this._onInputAction) !== null && _a !== void 0 ? _a : (this._onInputAction = this.newOnInputAction()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newOnInputAction = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueOnInputAction.WRITE_REMOTE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT,
                          text: {
                              value: themeShape.toOnInputActionLabel(wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueOnInputAction.WRITE_BOTH,
                          text: {
                              value: themeShape.toOnInputActionLabel(wcardinalUi.EShapeActionValueOnInputAction.WRITE_BOTH)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueOnInputAction.WRITE_LOCAL,
                          text: {
                              value: themeShape.toOnInputActionLabel(wcardinalUi.EShapeActionValueOnInputAction.WRITE_LOCAL)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueOnInputAction.WRITE_REMOTE,
                          text: {
                              value: themeShape.toOnInputActionLabel(wcardinalUi.EShapeActionValueOnInputAction.WRITE_REMOTE)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "onInputActionLayout", {
          get: function () {
              var _a;
              return ((_a = this._onInputActionLayout) !== null && _a !== void 0 ? _a : (this._onInputActionLayout = this.newLabeled(null, this.onInputAction)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeOnInputActionLayout = function (select) {
          var onInputActionLayout = this.onInputActionLayout;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG_TEXT:
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG_INTEGER:
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG_REAL:
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG_BOOLEAN:
                      onInputActionLayout.show();
                      break;
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      var openDialogType = this.openDialogType.value;
                      if (openDialogType == null) {
                          onInputActionLayout.hide();
                      }
                      else if (wcardinalUi.EShapeActionValueOpenDialogType.EXTENSION <= openDialogType) {
                          onInputActionLayout.hide();
                      }
                      else {
                          onInputActionLayout.show();
                      }
                      break;
                  default:
                      onInputActionLayout.hide();
                      break;
              }
          }
          else if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_REAL:
                      onInputActionLayout.show();
                      break;
                  default:
                      onInputActionLayout.hide();
                      break;
              }
          }
          else {
              onInputActionLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "whenType", {
          // Select when type
          get: function () {
              var _a;
              return ((_a = this._whenType) !== null && _a !== void 0 ? _a : (this._whenType = this.newWhenType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newWhenType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.UtilHtmlElementWhen.FOCUSED,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.UtilHtmlElementWhen.CLICKED,
                          text: {
                              value: themeShape.toHtmlElementWhenLabel(wcardinalUi.UtilHtmlElementWhen.CLICKED)
                          }
                      },
                      {
                          value: wcardinalUi.UtilHtmlElementWhen.DOUBLE_CLICKED,
                          text: {
                              value: themeShape.toHtmlElementWhenLabel(wcardinalUi.UtilHtmlElementWhen.DOUBLE_CLICKED)
                          }
                      },
                      {
                          value: wcardinalUi.UtilHtmlElementWhen.FOCUSED,
                          text: {
                              value: themeShape.toHtmlElementWhenLabel(wcardinalUi.UtilHtmlElementWhen.FOCUSED)
                          }
                      },
                      {
                          value: wcardinalUi.UtilHtmlElementWhen.ALWAYS,
                          text: {
                              value: themeShape.toHtmlElementWhenLabel(wcardinalUi.UtilHtmlElementWhen.ALWAYS)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "whenTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._whenTypeLayout) !== null && _a !== void 0 ? _a : (this._whenTypeLayout = this.newLabeled(this.theme.getSelectWhenLabel(), this.whenType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.toWhenTypeValue = function (whenType) {
          switch (whenType) {
              case wcardinalUi.UtilHtmlElementWhen.CLICKED:
                  return '"CLICKED"';
              case wcardinalUi.UtilHtmlElementWhen.DOUBLE_CLICKED:
                  return '"DOUBLE_CLICKED"';
              case wcardinalUi.UtilHtmlElementWhen.FOCUSED:
                  return '"FOCUSED"';
              case wcardinalUi.UtilHtmlElementWhen.ALWAYS:
                  return '"ALWAYS"';
          }
          return '"FOCUSED"';
      };
      EDialogAction.prototype.toWhenType = function (whenTypeValue) {
          switch (whenTypeValue) {
              case '"CLICKED"':
                  return wcardinalUi.UtilHtmlElementWhen.CLICKED;
              case '"DOUBLE_CLICKED"':
                  return wcardinalUi.UtilHtmlElementWhen.DOUBLE_CLICKED;
              case '"FOCUSED"':
                  return wcardinalUi.UtilHtmlElementWhen.FOCUSED;
              case '"ALWAYS"':
                  return wcardinalUi.UtilHtmlElementWhen.ALWAYS;
          }
          return wcardinalUi.UtilHtmlElementWhen.FOCUSED;
      };
      EDialogAction.prototype.onChangeWhenTypeLayout = function (select) {
          var whenTypeLayout = this.whenTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_REAL:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                      whenTypeLayout.show();
                      break;
                  default:
                      whenTypeLayout.hide();
                      break;
              }
          }
          else {
              whenTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "gestureType", {
          get: function () {
              var _a;
              return ((_a = this._gestureType) !== null && _a !== void 0 ? _a : (this._gestureType = this.newGestureType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newGestureType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeActionValueGestureType.SHAPE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueGestureType.SHAPE,
                          text: {
                              value: themeShape.toGestureTypeLabel(wcardinalUi.EShapeActionValueGestureType.SHAPE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeActionValueGestureType.LAYER,
                          text: {
                              value: themeShape.toGestureTypeLabel(wcardinalUi.EShapeActionValueGestureType.LAYER)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "gestureTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._gestureTypeLayout) !== null && _a !== void 0 ? _a : (this._gestureTypeLayout = this.newLabeled("", this.gestureType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeGestureTypeLayout = function (select) {
          var gestureTypeLayout = this.gestureTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.GESTURE) {
              gestureTypeLayout.show();
          }
          else {
              gestureTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "gestureOperationType", {
          get: function () {
              var _a;
              return ((_a = this._gestureOperationType) !== null && _a !== void 0 ? _a : (this._gestureOperationType = this.newGestureOperationType()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newGestureOperationType = function () {
          var themeShape = this.themeShape;
          return new wcardinalUi.DSelectMultiple({
              weight: 1,
              values: this.fromGestureOperationType(wcardinalUi.EShapeActionValueGestureOperationType.ALL),
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueGestureOperationType.DRAG,
                          text: {
                              value: themeShape.toGestureOperationTypeLabel(wcardinalUi.EShapeActionValueGestureOperationType.DRAG)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeActionValueGestureOperationType.PINCH,
                          text: {
                              value: themeShape.toGestureOperationTypeLabel(wcardinalUi.EShapeActionValueGestureOperationType.PINCH)
                          },
                          check: true
                      }
                  ]
              }
          });
      };
      EDialogAction.prototype.toGestureOperationType = function (types) {
          var result = wcardinalUi.EShapeActionValueGestureOperationType.NONE;
          for (var i = 0, imax = types.length; i < imax; ++i) {
              result |= types[i];
          }
          return result;
      };
      EDialogAction.prototype.fromGestureOperationType = function (type) {
          var result = [];
          if (type & wcardinalUi.EShapeActionValueGestureOperationType.DRAG) {
              result.push(wcardinalUi.EShapeActionValueGestureOperationType.DRAG);
          }
          if (type & wcardinalUi.EShapeActionValueGestureOperationType.PINCH) {
              result.push(wcardinalUi.EShapeActionValueGestureOperationType.PINCH);
          }
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "gestureOperationTypeLayout", {
          get: function () {
              var _a;
              return ((_a = this._gestureOperationTypeLayout) !== null && _a !== void 0 ? _a : (this._gestureOperationTypeLayout = this.newLabeled("", this.gestureOperationType)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeGestureOperationTypeLayout = function (select) {
          var gestureOperationTypeLayout = this.gestureOperationTypeLayout;
          if (select === wcardinalUi.EShapeActionValueType.GESTURE) {
              gestureOperationTypeLayout.show();
          }
          else {
              gestureOperationTypeLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "selectLayer", {
          get: function () {
              var _a;
              return ((_a = this._selectLayer) !== null && _a !== void 0 ? _a : (this._selectLayer = this.newSelectLayer()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newSelectLayer = function () {
          return new wcardinalUi.DSelectMultiple({
              weight: 1
          });
      };
      EDialogAction.prototype.newSelectLayerMenuItemOptions = function () {
          var _a;
          var diagram = (_a = this.options) === null || _a === void 0 ? void 0 : _a.diagram;
          if (diagram != null) {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  var result = [];
                  var layers = canvas.layer.children;
                  for (var i = layers.length - 1; 0 <= i; --i) {
                      var layer = layers[i];
                      result.push({
                          value: i,
                          text: {
                              value: layer.name
                          },
                          check: true
                      });
                  }
                  return result;
              }
          }
          return [];
      };
      Object.defineProperty(EDialogAction.prototype, "selectLayerLayout", {
          get: function () {
              var _a;
              return ((_a = this._selectLayerLayout) !== null && _a !== void 0 ? _a : (this._selectLayerLayout = this.newLabeled(this.theme.getSelectLayerLabel(), this.selectLayer)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeSelectLayerLayout = function (select) {
          var selectLayerLayout = this.selectLayerLayout;
          if (select === wcardinalUi.EShapeActionValueType.SHOW_HIDE) {
              switch (this.showHideType.value) {
                  case wcardinalUi.EShapeActionValueShowHideType.LAYER:
                      selectLayerLayout.show();
                      break;
                  default:
                      selectLayerLayout.hide();
                      break;
              }
          }
          else {
              selectLayerLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "condition", {
          // Condition
          get: function () {
              var _a;
              return ((_a = this._condition) !== null && _a !== void 0 ? _a : (this._condition = this.newCondition()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newCondition = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputConditionLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeCondition = function (select) {
          var condition = this.condition;
          if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER:
                  case wcardinalUi.EShapeActionValueMiscType.INPUT_REAL:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                      condition.hide();
                      break;
                  default:
                      condition.show();
                      break;
              }
          }
          else {
              condition.show();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "interval", {
          // Interval
          get: function () {
              var _a;
              return ((_a = this._interval) !== null && _a !== void 0 ? _a : (this._interval = this.newInterval()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newInterval = function () {
          var _this = this;
          return new wcardinalUi.DInputInteger({
              weight: 1,
              text: {
                  value: 1000
              },
              min: 0,
              step: 100,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "intervalLayout", {
          get: function () {
              var _a;
              return ((_a = this._intervalLayout) !== null && _a !== void 0 ? _a : (this._intervalLayout = this.newIntervalLayout()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newIntervalLayout = function () {
          var theme = this.theme;
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newLabel(theme.getInputIntervalLabel()),
                  this.interval,
                  new wcardinalUi.DText({
                      width: 60,
                      text: {
                          value: theme.getInputIntervalUnitLabel(),
                          align: {
                              horizontal: wcardinalUi.DAlignHorizontal.LEFT
                          }
                      }
                  })
              ]
          });
      };
      EDialogAction.prototype.onChangeIntervalLayout = function (select) {
          var intervalLayout = this.intervalLayout;
          if (select === wcardinalUi.EShapeActionValueType.BLINK) {
              intervalLayout.show();
          }
          else {
              intervalLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "size", {
          // Size
          get: function () {
              var _a;
              return ((_a = this._size) !== null && _a !== void 0 ? _a : (this._size = this.newSize()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newSize = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputSizeLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeSize = function (select) {
          var size = this.size;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              if (this.transformType.value === wcardinalUi.EShapeActionValueTransformType.RESIZE) {
                  size.show();
              }
              else {
                  size.hide();
              }
          }
          else {
              size.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "amount", {
          // Move amount
          get: function () {
              var _a;
              return ((_a = this._amount) !== null && _a !== void 0 ? _a : (this._amount = this.newAmount()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newAmount = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputAmountLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeAmount = function (select) {
          var amount = this.amount;
          if (select === wcardinalUi.EShapeActionValueType.TRANSFORM) {
              var transformType = this.transformType.value;
              if (transformType === wcardinalUi.EShapeActionValueTransformType.MOVE ||
                  transformType === wcardinalUi.EShapeActionValueTransformType.ROTATE) {
                  amount.show();
              }
              else {
                  amount.hide();
              }
          }
          else {
              amount.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "contents", {
          // Value
          get: function () {
              var _a;
              return ((_a = this._contents) !== null && _a !== void 0 ? _a : (this._contents = this.newContents()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newContents = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputValueLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeContents = function (select) {
          var contents = this.contents;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_TEXT) {
              contents.show();
          }
          else if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.WRITE_BOTH:
                  case wcardinalUi.EShapeActionValueMiscType.WRITE_LOCAL:
                  case wcardinalUi.EShapeActionValueMiscType.WRITE_REMOTE:
                      contents.show();
                      break;
                  default:
                      contents.hide();
                      break;
              }
          }
          else {
              contents.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "initialization", {
          // Initialization
          get: function () {
              var _a;
              return ((_a = this._initialization) !== null && _a !== void 0 ? _a : (this._initialization = this.newInitialization()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newInitialization = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputInitializationLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeInitialization = function (select) {
          var initialization = this.initialization;
          if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                      initialization.show();
                      break;
                  default:
                      initialization.hide();
                      break;
              }
          }
          else {
              initialization.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "pointerEventsLayout", {
          // Pointer events layout
          get: function () {
              var _a;
              return ((_a = this._pointerEventsLayout) !== null && _a !== void 0 ? _a : (this._pointerEventsLayout = this.newLabeled(null, this.pointerEvents)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangePointerEventsLayout = function (select) {
          var pointerEventsLayout = this.pointerEventsLayout;
          if (select === wcardinalUi.EShapeActionValueType.MISC) {
              switch (this.miscType.value) {
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                  case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                      pointerEventsLayout.show();
                      break;
                  default:
                      pointerEventsLayout.hide();
                      break;
              }
          }
          else {
              pointerEventsLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "pointerEvents", {
          // Pointer events
          get: function () {
              var _a;
              return ((_a = this._pointerEvents) !== null && _a !== void 0 ? _a : (this._pointerEvents = this.newPointerEvents()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newPointerEvents = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckPointEventsLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "targetName", {
          // Event Name / Cursor name
          get: function () {
              var _a;
              return ((_a = this._targetName) !== null && _a !== void 0 ? _a : (this._targetName = this.newTargetName()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newTargetName = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputTargetNameLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeTargetName = function (select) {
          var targetName = this.targetName;
          if (select === wcardinalUi.EShapeActionValueType.EMIT_EVENT ||
              select === wcardinalUi.EShapeActionValueType.CHANGE_CURSOR) {
              targetName.show();
          }
          else {
              targetName.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "color", {
          // Color
          get: function () {
              var _a;
              return ((_a = this._color) !== null && _a !== void 0 ? _a : (this._color = this.newColor()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newColor = function () {
          var result = new wcardinalUi.DButtonColor({
              weight: 1
          });
          result.dialog.on("open", function () {
              var dialogNew = result.dialog.new;
              var dialogCurrent = result.dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EDialogAction.prototype, "colorLayout", {
          get: function () {
              var _a;
              return ((_a = this._colorLayout) !== null && _a !== void 0 ? _a : (this._colorLayout = this.newColorLayout()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newColorLayout = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getButtonColorLabel()
                      }
                  }),
                  this.color,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      EDialogAction.prototype.onChangeColorLayout = function (select) {
          var colorLayout = this.colorLayout;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              var changeColorTarget = this.changeColorTarget.value;
              if (changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA ||
                  changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.COLOR ||
                  changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA) {
                  colorLayout.show();
              }
              else {
                  colorLayout.hide();
              }
          }
          else if (select === wcardinalUi.EShapeActionValueType.BLINK) {
              var blinkType = this.blinkType.value;
              if (blinkType === wcardinalUi.EShapeActionValueBlinkType.COLOR_FILL ||
                  blinkType === wcardinalUi.EShapeActionValueBlinkType.COLOR_STROKE) {
                  colorLayout.show();
              }
              else {
                  colorLayout.hide();
              }
          }
          else {
              colorLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "target", {
          // Target
          get: function () {
              var _a;
              return ((_a = this._target) !== null && _a !== void 0 ? _a : (this._target = this.newTarget()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newTarget = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputTargetLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeTarget = function (select) {
          var target = this.target;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              target.show();
          }
          else if (select === wcardinalUi.EShapeActionValueType.MISC) {
              var miscType = this.miscType.value;
              if (miscType == null) {
                  target.show();
              }
              else if (miscType === wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT ||
                  miscType === wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS ||
                  wcardinalUi.EShapeActionValueMiscType.EXTENSION <= miscType) {
                  target.hide();
              }
              else {
                  target.show();
              }
          }
          else {
              target.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "argument", {
          // Argument
          get: function () {
              var _a;
              return ((_a = this._argument) !== null && _a !== void 0 ? _a : (this._argument = this.newArgument()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newArgument = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputArgumentLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeArgument = function (select) {
          var argument = this.argument;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              var openType = this.openType.value;
              if (openType === wcardinalUi.EShapeActionValueOpenType.DIALOG) {
                  var openDialogType = this.openDialogType.value;
                  if (openDialogType == null) {
                      argument.hide();
                  }
                  else if (wcardinalUi.EShapeActionValueOpenDialogType.EXTENSION <= openDialogType) {
                      argument.show();
                  }
                  else {
                      argument.hide();
                  }
              }
              else {
                  argument.hide();
              }
          }
          else if (select === wcardinalUi.EShapeActionValueType.MISC) {
              var miscType = this.miscType.value;
              if (miscType != null && wcardinalUi.EShapeActionValueMiscType.EXTENSION <= miscType) {
                  argument.show();
              }
              else {
                  argument.hide();
              }
          }
          else {
              argument.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "colorCode", {
          // Color code
          get: function () {
              var _a;
              return ((_a = this._colorCode) !== null && _a !== void 0 ? _a : (this._colorCode = this.newColorCode()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newColorCode = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputColorCodeLabel()
                  }
              },
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeColorCode = function (select) {
          var colorCode = this.colorCode;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              if (this.changeColorTarget.value === wcardinalUi.EShapeActionValueChangeColorTarget.CODE) {
                  colorCode.show();
              }
              else {
                  colorCode.hide();
              }
          }
          else {
              colorCode.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "alphaCode", {
          // Alpha code
          get: function () {
              var _a;
              return ((_a = this._alphaCode) !== null && _a !== void 0 ? _a : (this._alphaCode = this.newAlphaCode()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newAlphaCode = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputAlphaCodeLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeAlphaCode = function (select) {
          var alphaCode = this.alphaCode;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              if (this.changeColorTarget.value === wcardinalUi.EShapeActionValueChangeColorTarget.CODE) {
                  alphaCode.show();
              }
              else {
                  alphaCode.hide();
              }
          }
          else {
              alphaCode.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "brightness", {
          // Brightness
          get: function () {
              var _a;
              return ((_a = this._brightness) !== null && _a !== void 0 ? _a : (this._brightness = this.newBrightness()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newBrightness = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputBrightnessLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeBrightness = function (select) {
          var brightness = this.brightness;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              if (this.changeColorTarget.value === wcardinalUi.EShapeActionValueChangeColorTarget.BRIGHTNESS) {
                  brightness.show();
              }
              else {
                  brightness.hide();
              }
          }
          else {
              brightness.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "blend", {
          // Blend
          get: function () {
              var _a;
              return ((_a = this._blend) !== null && _a !== void 0 ? _a : (this._blend = this.newBlend()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newBlend = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputBlendLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeBlend = function (select) {
          var blend = this.blend;
          if (select === wcardinalUi.EShapeActionValueType.CHANGE_COLOR) {
              var changeColorTarget = this.changeColorTarget.value;
              if (changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA ||
                  changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.COLOR ||
                  changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA ||
                  changeColorTarget === wcardinalUi.EShapeActionValueChangeColorTarget.CODE) {
                  blend.show();
              }
              else {
                  blend.hide();
              }
          }
          else {
              blend.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "initial", {
          // Initial
          get: function () {
              var _a;
              return ((_a = this._initial) !== null && _a !== void 0 ? _a : (this._initial = this.newInitial()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newInitial = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputInitialLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeInitial = function (select) {
          var initial = this.initial;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      switch (this.openDialogType.value) {
                          case wcardinalUi.EShapeActionValueOpenDialogType.TEXT:
                          case wcardinalUi.EShapeActionValueOpenDialogType.INTEGER:
                          case wcardinalUi.EShapeActionValueOpenDialogType.REAL:
                          case wcardinalUi.EShapeActionValueOpenDialogType.BOOLEAN:
                          case wcardinalUi.EShapeActionValueOpenDialogType.DATE:
                          case wcardinalUi.EShapeActionValueOpenDialogType.TIME:
                          case wcardinalUi.EShapeActionValueOpenDialogType.DATETIME:
                              initial.show();
                              break;
                          default:
                              initial.hide();
                              break;
                      }
                      break;
                  default:
                      initial.hide();
                      break;
              }
          }
          else {
              initial.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "step", {
          get: function () {
              var _a;
              return ((_a = this._step) !== null && _a !== void 0 ? _a : (this._step = this.newStep()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newStep = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputStepLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeStep = function (select) {
          var step = this.step;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      switch (this.openDialogType.value) {
                          case wcardinalUi.EShapeActionValueOpenDialogType.INTEGER:
                          case wcardinalUi.EShapeActionValueOpenDialogType.REAL:
                              step.show();
                              break;
                          default:
                              step.hide();
                              break;
                      }
                      break;
                  default:
                      step.hide();
                      break;
              }
          }
          else {
              step.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "min", {
          get: function () {
              var _a;
              return ((_a = this._min) !== null && _a !== void 0 ? _a : (this._min = this.newMin()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newMin = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputMinLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeMin = function (select) {
          var min = this.min;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      switch (this.openDialogType.value) {
                          case wcardinalUi.EShapeActionValueOpenDialogType.INTEGER:
                          case wcardinalUi.EShapeActionValueOpenDialogType.REAL:
                              min.show();
                              break;
                          default:
                              min.hide();
                              break;
                      }
                      break;
                  default:
                      min.hide();
                      break;
              }
          }
          else {
              min.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "max", {
          get: function () {
              var _a;
              return ((_a = this._max) !== null && _a !== void 0 ? _a : (this._max = this.newMax()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newMax = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputMaxLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogAction.prototype.onChangeMax = function (select) {
          var max = this.max;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      switch (this.openDialogType.value) {
                          case wcardinalUi.EShapeActionValueOpenDialogType.INTEGER:
                          case wcardinalUi.EShapeActionValueOpenDialogType.REAL:
                              max.show();
                              break;
                          default:
                              max.hide();
                              break;
                      }
                      break;
                  default:
                      max.hide();
                      break;
              }
          }
          else {
              max.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "scaleLayout", {
          // Scale layout
          get: function () {
              var _a;
              return ((_a = this._scaleLayout) !== null && _a !== void 0 ? _a : (this._scaleLayout = this.newScaleLayout()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newScaleLayout = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getInputScaleLabel()
                      }
                  }),
                  this.scaleMin,
                  this.scaleMax,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      EDialogAction.prototype.onChangeScaleLayout = function (select) {
          var scaleLayout = this.scaleLayout;
          if (select === wcardinalUi.EShapeActionValueType.GESTURE) {
              scaleLayout.show();
          }
          else {
              scaleLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "scaleMin", {
          get: function () {
              var _a;
              return ((_a = this._scaleMin) !== null && _a !== void 0 ? _a : (this._scaleMin = this.newScaleMin()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newScaleMin = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "scaleMax", {
          // Scale max
          get: function () {
              var _a;
              return ((_a = this._scaleMax) !== null && _a !== void 0 ? _a : (this._scaleMax = this.newScaleMax()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newScaleMax = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "checkBringToFront", {
          get: function () {
              var _a;
              return ((_a = this._checkBringToFront) !== null && _a !== void 0 ? _a : (this._checkBringToFront = this.newCheckBringToFront()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newCheckBringToFront = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckBringToFrontLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "checkBringToFrontLayout", {
          get: function () {
              var _a;
              return ((_a = this._checkBringToFrontLayout) !== null && _a !== void 0 ? _a : (this._checkBringToFrontLayout = this.newLabeled(null, this.checkBringToFront)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeCheckBringToFrontLayout = function (select) {
          var checkBringToFrontLayout = this.checkBringToFrontLayout;
          if (select === wcardinalUi.EShapeActionValueType.SHOW_HIDE) {
              switch (this.showHideType.value) {
                  case wcardinalUi.EShapeActionValueShowHideType.LAYER:
                      checkBringToFrontLayout.show();
                      break;
                  default:
                      checkBringToFrontLayout.hide();
                      break;
              }
          }
          else {
              checkBringToFrontLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "inNewWindow", {
          // inNewWindow
          get: function () {
              var _a;
              return ((_a = this._inNewWindow) !== null && _a !== void 0 ? _a : (this._inNewWindow = this.newInNewWindow()));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.newInNewWindow = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckInNewWindowLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogAction.prototype, "inNewWindowLayout", {
          get: function () {
              var _a;
              return ((_a = this._inNewWindowLayout) !== null && _a !== void 0 ? _a : (this._inNewWindowLayout = this.newLabeled(null, this.inNewWindow)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChangeInNewWindowLayout = function (select) {
          var inNewWindowLayout = this.inNewWindowLayout;
          if (select === wcardinalUi.EShapeActionValueType.OPEN) {
              switch (this.openType.value) {
                  case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                      inNewWindowLayout.hide();
                      break;
                  default:
                      inNewWindowLayout.show();
                      break;
              }
          }
          else {
              inNewWindowLayout.hide();
          }
      };
      Object.defineProperty(EDialogAction.prototype, "extension", {
          get: function () {
              var _a;
              return ((_a = this._extension) !== null && _a !== void 0 ? _a : (this._extension = new EDialogActionExtensionContainer(this, this.condition, this.content)));
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.onChange = function () {
          var select = this.select.value;
          this.onChangeAlphaCode(select);
          this.onChangeAmount(select);
          this.onChangeBlend(select);
          this.onChangeBlinkTypeLayout(select);
          this.onChangeBrightness(select);
          this.onChangeChangeColorTargetLayout(select);
          this.onChangeChangeColorTypeLayout(select);
          this.onChangeChangeTextTypeLayout(select);
          this.onChangeCondition(select);
          this.onChangeColorCode(select);
          this.onChangeColorLayout(select);
          this.onChangeInitial(select);
          this.onChangeStep(select);
          this.onChangeMin(select);
          this.onChangeMax(select);
          this.onChangeIntervalLayout(select);
          this.onChangeMiscTypeLayout(select);
          this.onChangeMoveTypeLayout(select);
          this.onChangeOnInputActionLayout(select);
          this.onChangeWhenTypeLayout(select);
          this.onChangeGestureTypeLayout(select);
          this.onChangeGestureOperationTypeLayout(select);
          this.onChangeSelectLayerLayout(select);
          this.onChangeOpenTypeLayout(select);
          this.onChangeOpenDialogTypeLayout(select);
          this.onChangeOriginXLayout(select);
          this.onChangeOriginYLayout(select);
          this.onChangeResizeTypeLayout(select);
          this.onChangeRotateTypeLayout(select);
          this.onChangeShowHideTypeLayout(select);
          this.onChangeSize(select);
          this.onChangeTarget(select);
          this.onChangeArgument(select);
          this.onChangeTargetName(select);
          this.onChangeContents(select);
          this.onChangeInitialization(select);
          this.onChangePointerEventsLayout(select);
          this.onChangeTransformTypeLayout(select);
          this.onChangeScaleLayout(select);
          this.onChangeCheckBringToFrontLayout(select);
          this.onChangeInNewWindowLayout(select);
          this.extension.onChange(select);
      };
      EDialogAction.prototype.reset = function () {
          this.select.value = wcardinalUi.EShapeActionValueType.SHOW_HIDE;
          this.showHideType.value = wcardinalUi.EShapeActionValueShowHideType.SHAPE;
          this.blinkType.value = wcardinalUi.EShapeActionValueBlinkType.VISIBILITY;
          this.transformType.value = wcardinalUi.EShapeActionValueTransformType.MOVE;
          this.changeColorType.values = [wcardinalUi.EShapeActionValueChangeColorType.FILL];
          this.changeColorTarget.value = wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA;
          this.resizeType.value = wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE;
          this.originY.value = 0.5;
          this.originX.value = 0.5;
          this.moveType.value = wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_X;
          this.rotateType.value = wcardinalUi.EShapeActionValueTransformRotateType.RELATIVE;
          this.openType.value = wcardinalUi.EShapeActionValueOpenType.DIAGRAM;
          this.openDialogType.value = wcardinalUi.EShapeActionValueOpenDialogType.TEXT;
          this.changeTextType.value = wcardinalUi.EShapeActionValueChangeTextType.TEXT;
          this.miscType.value = wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT;
          this.onInputAction.value = wcardinalUi.EShapeActionValueOnInputAction.WRITE_REMOTE;
          this.whenType.value = wcardinalUi.UtilHtmlElementWhen.FOCUSED;
          this.gestureType.value = wcardinalUi.EShapeActionValueGestureType.SHAPE;
          this.gestureOperationType.values = this.fromGestureOperationType(wcardinalUi.EShapeActionValueGestureOperationType.ALL);
          this.selectLayer.values = [];
          this.selectLayer.menu = new wcardinalUi.DMenu({
              fit: true,
              items: this.newSelectLayerMenuItemOptions()
          });
          this.condition.input.value = "";
          this.size.input.value = "";
          this.amount.input.value = "";
          this.contents.input.value = "";
          this.initialization.input.value = "";
          this.pointerEvents.state.isActive = true;
          this.targetName.input.value = "";
          this.interval.value = 1000;
          this.color.value.color = 0xffffff;
          this.color.value.alpha = 1;
          this.target.input.value = "";
          this.argument.input.value = "";
          this.colorCode.input.value = "";
          this.alphaCode.input.value = "";
          this.brightness.input.value = "";
          this.blend.input.value = "";
          this.initial.input.value = "";
          this.step.input.value = "";
          this.min.input.value = "";
          this.max.input.value = "";
          this.scaleMin.value = 0.05;
          this.scaleMax.value = 20;
          this.checkBringToFront.state.isActive = false;
          this.inNewWindow.state.isActive = false;
          this.extension.reset();
          this.onChange();
          return this;
      };
      Object.defineProperty(EDialogAction.prototype, "value", {
          get: function () {
              var _a, _b, _c, _d;
              var select = this.select.value;
              var condition = this.condition.input.value;
              if (select != null) {
                  switch (select) {
                      case wcardinalUi.EShapeActionValueType.SHOW_HIDE:
                          switch (this.showHideType.value) {
                              case wcardinalUi.EShapeActionValueShowHideType.SHAPE:
                              case null:
                                  return new wcardinalUi.EShapeActionValueShowHideShape(condition);
                              case wcardinalUi.EShapeActionValueShowHideType.LAYER:
                                  return new wcardinalUi.EShapeActionValueShowHideLayer(condition, this.selectLayer.values.slice(0), this.checkBringToFront.state.isActive);
                          }
                          break;
                      case wcardinalUi.EShapeActionValueType.BLINK:
                          var blinkType = this.blinkType.value || wcardinalUi.EShapeActionValueBlinkType.VISIBILITY;
                          var interval = this.interval.value;
                          var blinkColor = this.color.value;
                          return new wcardinalUi.EShapeActionValueBlink(blinkType, condition, interval, blinkColor.color, blinkColor.alpha);
                      case wcardinalUi.EShapeActionValueType.CHANGE_COLOR:
                          var changeColorType = wcardinalUi.EShapeActionValueChangeColorTypes.pack(this.changeColorType.values);
                          var changeColorTarget = this.changeColorTarget.value ||
                              wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA;
                          switch (changeColorTarget) {
                              case wcardinalUi.EShapeActionValueChangeColorTarget.COLOR_AND_ALPHA:
                              case wcardinalUi.EShapeActionValueChangeColorTarget.COLOR:
                              case wcardinalUi.EShapeActionValueChangeColorTarget.ALPHA:
                                  var changeColor = this.color.value;
                                  return new wcardinalUi.EShapeActionValueChangeColor(changeColorType, condition, changeColorTarget, changeColor.color, changeColor.alpha, this.blend.input.value);
                              case wcardinalUi.EShapeActionValueChangeColorTarget.CODE:
                                  return new wcardinalUi.EShapeActionValueChangeColorCode(changeColorType, condition, this.colorCode.input.value, this.alphaCode.input.value, this.blend.input.value);
                              case wcardinalUi.EShapeActionValueChangeColorTarget.BRIGHTNESS:
                                  return new wcardinalUi.EShapeActionValueChangeColorBrightness(changeColorType, condition, this.brightness.input.value);
                          }
                          break;
                      case wcardinalUi.EShapeActionValueType.TRANSFORM:
                          var transformType = this.transformType.value;
                          var originX = this.originX.value;
                          var originY = this.originY.value;
                          switch (transformType) {
                              case wcardinalUi.EShapeActionValueTransformType.RESIZE:
                                  var resizeType = this.resizeType.value ||
                                      wcardinalUi.EShapeActionValueTransformResizeType.RELATIVE_SIZE;
                                  return new wcardinalUi.EShapeActionValueTransformResize(resizeType, condition, originX, originY, this.size.input.value);
                              case wcardinalUi.EShapeActionValueTransformType.MOVE:
                                  var moveType = this.moveType.value ||
                                      wcardinalUi.EShapeActionValueTransformMoveType.RELATIVE_X;
                                  return new wcardinalUi.EShapeActionValueTransformMove(moveType, condition, this.amount.input.value);
                              case wcardinalUi.EShapeActionValueTransformType.ROTATE:
                                  var rotateType = this.rotateType.value ||
                                      wcardinalUi.EShapeActionValueTransformRotateType.RELATIVE;
                                  return new wcardinalUi.EShapeActionValueTransformRotate(rotateType, condition, originX, originY, this.amount.input.value);
                          }
                          break;
                      case wcardinalUi.EShapeActionValueType.CHANGE_TEXT:
                          var changeTextType = this.changeTextType.value || wcardinalUi.EShapeActionValueChangeTextType.TEXT;
                          return new wcardinalUi.EShapeActionValueChangeText(changeTextType, condition, this.contents.input.value);
                      case wcardinalUi.EShapeActionValueType.OPEN:
                          var openType = (_a = this.openType.value) !== null && _a !== void 0 ? _a : wcardinalUi.EShapeActionValueOpenType.DIAGRAM;
                          switch (openType) {
                              case wcardinalUi.EShapeActionValueOpenType.DIALOG:
                                  var openDialogType = (_b = this.openDialogType.value) !== null && _b !== void 0 ? _b : wcardinalUi.EShapeActionValueOpenDialogType.TEXT;
                                  switch (openDialogType) {
                                      case wcardinalUi.EShapeActionValueOpenDialogType.INTEGER:
                                      case wcardinalUi.EShapeActionValueOpenDialogType.REAL:
                                          return new wcardinalUi.EShapeActionValueOpenDialog(condition, this.target.input.value, (_c = this.onInputAction.value) !== null && _c !== void 0 ? _c : wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT, this.initial.input.value, this.step.input.value, this.min.input.value, this.max.input.value, openDialogType);
                                      case wcardinalUi.EShapeActionValueOpenDialogType.TEXT:
                                      case wcardinalUi.EShapeActionValueOpenDialogType.BOOLEAN:
                                      case wcardinalUi.EShapeActionValueOpenDialogType.DATE:
                                      case wcardinalUi.EShapeActionValueOpenDialogType.TIME:
                                      case wcardinalUi.EShapeActionValueOpenDialogType.DATETIME:
                                          return new wcardinalUi.EShapeActionValueOpenDialog(condition, this.target.input.value, (_d = this.onInputAction.value) !== null && _d !== void 0 ? _d : wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT, this.initial.input.value, "", "", "", openDialogType);
                                      default:
                                          return new wcardinalUi.EShapeActionValueOpenDialogExtension(condition, this.target.input.value, this.argument.input.value, openDialogType);
                                  }
                              case wcardinalUi.EShapeActionValueOpenType.DIAGRAM:
                              case wcardinalUi.EShapeActionValueOpenType.PAGE:
                                  return new wcardinalUi.EShapeActionValueOpen(openType, condition, this.target.input.value, this.inNewWindow.state.isActive);
                              default:
                                  return new wcardinalUi.EShapeActionValueOpenExtension(openType, condition, this.target.input.value, this.inNewWindow.state.isActive);
                          }
                      case wcardinalUi.EShapeActionValueType.EMIT_EVENT:
                          return new wcardinalUi.EShapeActionValueEmitEvent(condition, this.targetName.input.value);
                      case wcardinalUi.EShapeActionValueType.CHANGE_CURSOR:
                          return new wcardinalUi.EShapeActionValueChangeCursor(condition, this.targetName.input.value);
                      case wcardinalUi.EShapeActionValueType.GESTURE:
                          return new wcardinalUi.EShapeActionValueGesture(condition, this.gestureType.value || wcardinalUi.EShapeActionValueGestureType.SHAPE, this.toGestureOperationType(this.gestureOperationType.values), this.scaleMin.value, this.scaleMax.value);
                      case wcardinalUi.EShapeActionValueType.MISC:
                          var miscType = this.miscType.value || wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT;
                          switch (miscType) {
                              case wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT:
                              case wcardinalUi.EShapeActionValueMiscType.INPUT_REAL:
                              case wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER:
                                  return new wcardinalUi.EShapeActionValueMiscInput(miscType, this.toWhenTypeValue(this.whenType.value), this.target.input.value, this.onInputAction.value ||
                                      wcardinalUi.EShapeActionValueOnInputAction.EMIT_EVENT);
                              case wcardinalUi.EShapeActionValueMiscType.EMIT_EVENT:
                                  return new wcardinalUi.EShapeActionValueMiscEmitEvent(condition, this.target.input.value);
                              case wcardinalUi.EShapeActionValueMiscType.WRITE_BOTH:
                              case wcardinalUi.EShapeActionValueMiscType.WRITE_LOCAL:
                              case wcardinalUi.EShapeActionValueMiscType.WRITE_REMOTE:
                                  return new wcardinalUi.EShapeActionValueMiscWrite(miscType, condition, this.target.input.value, this.contents.input.value);
                              case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                                  if (this.pointerEvents.state.isActive) {
                                      return new wcardinalUi.EShapeActionValueMiscHtmlElement(miscType, this.toWhenTypeValue(this.whenType.value), this.initialization.input.value);
                                  }
                                  else {
                                      return new wcardinalUi.EShapeActionValueMiscHtmlElement(wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS, this.toWhenTypeValue(this.whenType.value), this.initialization.input.value);
                                  }
                              case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                                  return new wcardinalUi.EShapeActionValueMiscHtmlElement(miscType, this.toWhenTypeValue(this.whenType.value), this.initialization.input.value);
                              case wcardinalUi.EShapeActionValueMiscType.EXECUTE:
                                  return new wcardinalUi.EShapeActionValueMiscExecute(condition, this.target.input.value);
                              default:
                                  if (wcardinalUi.EShapeActionValueMiscType.EXTENSION <= miscType) {
                                      return new wcardinalUi.EShapeActionValueMiscExtension(miscType, condition, this.argument.input.value);
                                  }
                          }
                          break;
                      default:
                          return this.extension.value;
                  }
              }
              return null;
          },
          set: function (value) {
              this.selectLayer.menu = new wcardinalUi.DMenu({
                  fit: true,
                  items: this.newSelectLayerMenuItemOptions()
              });
              if (value != null) {
                  this.select.value = value.type;
                  if (value instanceof wcardinalUi.EShapeActionValueShowHide) {
                      this.condition.input.value = value.condition;
                      this.showHideType.value = wcardinalUi.EShapeActionValueShowHideType.SHAPE;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueShowHideShape) {
                      this.condition.input.value = value.condition;
                      this.showHideType.value = value.subtype;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueShowHideLayer) {
                      this.condition.input.value = value.condition;
                      this.showHideType.value = value.subtype;
                      this.selectLayer.values = value.layers.slice(0);
                      this.checkBringToFront.state.isActive = value.bringToFront;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueBlink) {
                      this.condition.input.value = value.condition;
                      this.blinkType.value = value.subtype;
                      this.interval.value = value.interval;
                      this.color.value.color = value.color;
                      this.color.value.alpha = value.alpha;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueChangeColor) {
                      this.condition.input.value = value.condition;
                      this.changeColorType.values = wcardinalUi.EShapeActionValueChangeColorTypes.unpack(value.subtype);
                      this.changeColorTarget.value = value.target;
                      this.color.value.color = value.color;
                      this.color.value.alpha = value.alpha;
                      this.blend.input.value = value.blend;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueChangeColorCode) {
                      this.condition.input.value = value.condition;
                      this.changeColorType.values = wcardinalUi.EShapeActionValueChangeColorTypes.unpack(value.subtype);
                      this.changeColorTarget.value = wcardinalUi.EShapeActionValueChangeColorTarget.CODE;
                      this.colorCode.input.value = value.color;
                      this.alphaCode.input.value = value.alpha;
                      this.blend.input.value = value.blend;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueChangeColorBrightness) {
                      this.condition.input.value = value.condition;
                      this.changeColorType.values = wcardinalUi.EShapeActionValueChangeColorTypes.unpack(value.subtype);
                      this.changeColorTarget.value = wcardinalUi.EShapeActionValueChangeColorTarget.BRIGHTNESS;
                      this.brightness.input.value = value.brightness;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueTransformResize) {
                      this.condition.input.value = value.condition;
                      this.transformType.value = wcardinalUi.EShapeActionValueTransformType.RESIZE;
                      this.resizeType.value = value.opetype;
                      this.originX.value = value.originX;
                      this.originY.value = value.originY;
                      this.size.input.value = value.amount;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueTransformMove) {
                      this.condition.input.value = value.condition;
                      this.transformType.value = wcardinalUi.EShapeActionValueTransformType.MOVE;
                      this.moveType.value = value.opetype;
                      this.amount.input.value = value.amount;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueTransformRotate) {
                      this.condition.input.value = value.condition;
                      this.transformType.value = wcardinalUi.EShapeActionValueTransformType.ROTATE;
                      this.rotateType.value = value.opetype;
                      this.originX.value = value.originX;
                      this.originY.value = value.originY;
                      this.amount.input.value = value.amount;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueChangeText) {
                      this.condition.input.value = value.condition;
                      this.changeTextType.value = value.subtype;
                      this.contents.input.value = value.value;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueOpen) {
                      this.condition.input.value = value.condition;
                      this.openType.value = value.subtype;
                      this.target.input.value = value.target;
                      this.inNewWindow.state.isActive = value.inNewWindow;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueOpenDialog) {
                      this.condition.input.value = value.condition;
                      this.openType.value = value.subtype;
                      this.target.input.value = value.target;
                      this.onInputAction.value = value.onInputAction;
                      this.initial.input.value = value.initial;
                      this.step.input.value = value.step;
                      this.min.input.value = value.min;
                      this.max.input.value = value.max;
                      this.openDialogType.value = value.dialogType;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueOpenDialogExtension) {
                      this.condition.input.value = value.condition;
                      this.openType.value = value.subtype;
                      this.target.input.value = value.target;
                      this.argument.input.value = value.argument;
                      this.openDialogType.value = value.dialogType;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueOpenExtension) {
                      this.condition.input.value = value.condition;
                      this.openType.value = value.subtype;
                      this.target.input.value = value.target;
                      this.inNewWindow.state.isActive = value.inNewWindow;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueEmitEvent) {
                      this.condition.input.value = value.condition;
                      this.targetName.input.value = value.name;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueChangeCursor) {
                      this.condition.input.value = value.condition;
                      this.targetName.input.value = value.name;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueGesture) {
                      this.condition.input.value = value.condition;
                      this.gestureType.value = value.subtype;
                      this.gestureOperationType.values = this.fromGestureOperationType(value.operationType);
                      this.scaleMin.value = value.scaleMin;
                      this.scaleMax.value = value.scaleMax;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueMisc) {
                      switch (value.subtype) {
                          case wcardinalUi.EShapeActionValueMiscType.INPUT_TEXT:
                          case wcardinalUi.EShapeActionValueMiscType.INPUT_REAL:
                          case wcardinalUi.EShapeActionValueMiscType.INPUT_INTEGER:
                              this.miscType.value = value.subtype;
                              this.whenType.value = this.toWhenType(value.condition);
                              this.target.input.value = value.target;
                              this.onInputAction.value = value.onInputAction;
                              this.contents.input.value = value.value;
                              break;
                          case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT:
                              this.miscType.value = wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT;
                              this.whenType.value = this.toWhenType(value.condition);
                              this.target.input.value = value.target;
                              this.onInputAction.value = value.onInputAction;
                              this.initialization.input.value = value.value;
                              this.pointerEvents.state.isActive = true;
                              break;
                          case wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT_WITHOUT_POINTER_EVENTS:
                              this.miscType.value = wcardinalUi.EShapeActionValueMiscType.HTML_ELEMENT;
                              this.whenType.value = this.toWhenType(value.condition);
                              this.target.input.value = value.target;
                              this.onInputAction.value = value.onInputAction;
                              this.initialization.input.value = value.value;
                              this.pointerEvents.state.isActive = false;
                              break;
                          default:
                              this.condition.input.value = value.condition;
                              this.miscType.value = value.subtype;
                              this.target.input.value = value.target;
                              this.onInputAction.value = value.onInputAction;
                              this.contents.input.value = value.value;
                              break;
                      }
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueMiscExecute) {
                      this.miscType.value = wcardinalUi.EShapeActionValueMiscType.EXECUTE;
                      this.condition.input.value = value.condition;
                      this.target.input.value = value.target;
                  }
                  else if (value instanceof wcardinalUi.EShapeActionValueMiscExtension) {
                      this.miscType.value = wcardinalUi.EShapeActionValueMiscType.EXTENSION;
                      this.condition.input.value = value.condition;
                      this.argument.input.value = value.argument;
                  }
                  else {
                      this.extension.value = value;
                  }
                  this.onChange();
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogAction.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogAction.prototype.getType = function () {
          return "EDialogAction";
      };
      return EDialogAction;
  }(wcardinalUi.DDialogLayered));

  var EDialogDataMappingValue = /** @class */ (function (_super) {
      __extends(EDialogDataMappingValue, _super);
      function EDialogDataMappingValue() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogDataMappingValue.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.inputSource, this.inputDestination, this.inputInitial, new wcardinalUi.DLayoutSpace({
              height: 6
          }), this.table);
          return result;
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "inputSource", {
          get: function () {
              var result = this._inputSource;
              if (result == null) {
                  result = this.newInputSource();
                  this._inputSource = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.newInputSource = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  on: {
                      input: function (value) {
                          _this.onInputSourceChanged(value);
                      },
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputSourceLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogDataMappingValue.prototype.onInputSourceChanged = function (value) {
          this._newSource = value;
          this.updateRows();
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "inputDestination", {
          get: function () {
              var result = this._inputDestination;
              if (result == null) {
                  result = this.newInputDestination();
                  this._inputDestination = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.newInputDestination = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      input: function (value) {
                          _this.onInputDestinationChanged(value);
                      },
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputDestinationLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      EDialogDataMappingValue.prototype.onInputDestinationChanged = function (value) {
          this._newDestination = value;
          this.updateRows();
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "inputInitial", {
          get: function () {
              var result = this._inputInitial;
              if (result == null) {
                  result = this.newInputInitial();
                  this._inputInitial = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.newInputInitial = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputInitialLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "table", {
          get: function () {
              var result = this._table;
              if (result == null) {
                  result = this.newTable();
                  this._table = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.newTable = function () {
          return new wcardinalUi.DTable({
              width: "padding",
              height: 300,
              columns: this.newColumnOptions()
          });
      };
      EDialogDataMappingValue.prototype.newColumnOptions = function () {
          var theme = this.theme;
          return [
              {
                  type: "TEXT",
                  label: theme.getTableColumnDataIdLabel(),
                  editable: false,
                  sortable: true,
                  getter: function (row) {
                      return row.id;
                  }
              },
              {
                  type: "TEXT",
                  label: theme.getTableColumnMappedToLabel(),
                  editable: false,
                  sortable: true,
                  getter: function (row) {
                      return row.mappedId;
                  }
              }
          ];
      };
      EDialogDataMappingValue.prototype.set = function (value, shape) {
          var isChanged = false;
          if (value !== undefined) {
              if (value != null) {
                  this.inputSource.input.value = value[0];
                  this.inputDestination.input.value = value[1];
                  this.inputInitial.input.value = value[2];
                  this._newSource = value[0];
                  this._newDestination = value[1];
              }
              else {
                  this.inputSource.input.value = "";
                  this.inputDestination.input.value = "";
                  this.inputInitial.input.value = "";
                  this._newSource = "";
                  this._newDestination = "";
              }
              isChanged = true;
          }
          if (shape !== undefined) {
              this._ids = this.toIds(shape);
              isChanged = true;
          }
          if (isChanged) {
              this.updateRows();
          }
          return this;
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "value", {
          get: function () {
              return [
                  this.inputSource.input.value.trim(),
                  this.inputDestination.input.value.trim(),
                  this.inputInitial.input.value.trim()
              ];
          },
          set: function (value) {
              this.set(value);
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogDataMappingValue.prototype.toIds = function (shape) {
          var result = [];
          if (shape != null) {
              var ids = new Set();
              this.newIds(shape.children, ids);
              ids.forEach(function (id) {
                  result.push(id);
              });
              result.sort();
          }
          return result;
      };
      EDialogDataMappingValue.prototype.newIds = function (shapes, result) {
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var data = shape.data;
              for (var j = 0, jmax = data.size(); j < jmax; ++j) {
                  var value = data.get(j);
                  if (value && value.scope !== wcardinalUi.EShapeDataValueScope.PRIVATE) {
                      result.add(value.id);
                  }
              }
              var children = shape.children;
              if (0 < children.length) {
                  this.newIds(children, result);
              }
          }
      };
      Object.defineProperty(EDialogDataMappingValue.prototype, "onUpdateRowsBound", {
          get: function () {
              var result = this._onUpdateRowsBound;
              if (result == null) {
                  result = this.newOnUpdateRowsBound();
                  this._onUpdateRowsBound = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataMappingValue.prototype.newOnUpdateRowsBound = function () {
          var _this = this;
          return function () {
              _this.onUpdateRows();
          };
      };
      EDialogDataMappingValue.prototype.onUpdateRows = function () {
          this._onUpdateRowsTimeout = undefined;
          if (this._isRowsDirty) {
              this._isRowsDirty = false;
              this.table.data.clearAndAddAll(this.newRows());
              this._onUpdateRowsTimeout = window.setTimeout(this.onUpdateRowsBound, 100);
          }
      };
      EDialogDataMappingValue.prototype.newRows = function () {
          var ids = this._ids;
          if (ids == null || ids.length <= 0) {
              return [];
          }
          // Source
          var mapper = this._mapper;
          var newSource = this._newSource;
          if (mapper === undefined || this._lastSource !== newSource) {
              this._lastSource = newSource;
              if (newSource != null) {
                  var newSourceTrimmed = newSource.trim();
                  if (0 < newSourceTrimmed.length) {
                      mapper = new wcardinalUi.EShapeDataMapperImpl(newSource);
                  }
                  else {
                      mapper = null;
                  }
              }
              else {
                  mapper = null;
              }
          }
          // Destination
          var destinations = this._destinations;
          var newDestination = this._newDestination;
          if (destinations === undefined || this._lastDestination !== newDestination) {
              this._lastDestination = newDestination;
              destinations = wcardinalUi.EShapeDataMapperImpl.split(newDestination);
          }
          // Rows
          var result = [];
          if (mapper != null) {
              var value = new wcardinalUi.EShapeDataValueImpl();
              value.initial = "";
              for (var i = 0, imax = ids.length; i < imax; ++i) {
                  var id = ids[i];
                  value.id = id;
                  if (mapper.map(value, destinations, "")) {
                      result.push({
                          id: id,
                          mappedId: value.id
                      });
                  }
              }
          }
          else {
              for (var i = 0, imax = ids.length; i < imax; ++i) {
                  var id = ids[i];
                  result.push({
                      id: id,
                      mappedId: id
                  });
              }
          }
          return result;
      };
      EDialogDataMappingValue.prototype.updateRows = function () {
          this._isRowsDirty = true;
          if (this._onUpdateRowsTimeout == null) {
              this.onUpdateRows();
          }
      };
      EDialogDataMappingValue.prototype.getType = function () {
          return "EDialogDataMappingValue";
      };
      return EDialogDataMappingValue;
  }(wcardinalUi.DDialogLayered));

  var EDialogDataValue = /** @class */ (function (_super) {
      __extends(EDialogDataValue, _super);
      function EDialogDataValue() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogDataValue.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.layoutType, this.layoutScope, this.inputId, this.inputAs, this.inputInitial, this.layoutInterval, this.inputFormat, this.layoutRangeType, this.inputRangeFrom, this.inputRangeTo, this.inputCapacity, this.layoutOrder);
          return result;
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputId", {
          get: function () {
              var result = this._inputId;
              if (result == null) {
                  result = this.newInputId();
                  this._inputId = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputId = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputIdLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputAs", {
          get: function () {
              var result = this._inputAs;
              if (result == null) {
                  result = this.newInputAs();
                  this._inputAs = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputAs = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputAsLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "layoutType", {
          get: function () {
              var result = this._layoutType;
              if (result == null) {
                  result = this.newLayoutType();
                  this._layoutType = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newLayoutType = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getSelectTypeLabel()
                      }
                  }),
                  this.selectType,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "selectType", {
          get: function () {
              var _this = this;
              var result = this._selectType;
              if (result == null) {
                  result = this.newSelectType();
                  result.on("change", function () {
                      _this.onChange();
                  });
                  this._selectType = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newSelectType = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeDataValueType.NUMBER,
              menu: {
                  items: this.newSelectTypeItems()
              }
          });
      };
      EDialogDataValue.prototype.newSelectTypeItems = function () {
          var theme = this.theme;
          var result = [
              {
                  value: wcardinalUi.EShapeDataValueType.BOOLEAN,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.BOOLEAN)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.BOOLEAN_ARRAY,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.BOOLEAN_ARRAY)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.NUMBER,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.NUMBER)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.NUMBER_ARRAY,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.NUMBER_ARRAY)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.STRING,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.STRING)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.STRING_ARRAY,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.STRING_ARRAY)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.OBJECT,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.OBJECT)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.OBJECT_ARRAY,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.OBJECT_ARRAY)
                  }
              },
              {
                  value: wcardinalUi.EShapeDataValueType.TICKER,
                  text: {
                      value: theme.getSelectTypeValueLabel(wcardinalUi.EShapeDataValueType.TICKER)
                  }
              }
          ];
          wcardinalUi.EShapeDataValueExtensions.each(function (extension) {
              result.push({
                  value: extension.type,
                  text: {
                      value: extension.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EDialogDataValue.prototype, "layoutScope", {
          get: function () {
              var result = this._layoutScope;
              if (result == null) {
                  result = this.newLayoutScope();
                  this._layoutScope = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newLayoutScope = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getSelectScopeLabel()
                      }
                  }),
                  this.selectScope,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "selectScope", {
          get: function () {
              var result = this._selectScope;
              if (result == null) {
                  result = this.newSelectScope();
                  this._selectScope = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newSelectScope = function () {
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeDataValueScope.PUBLIC,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeDataValueScope.PUBLIC,
                          text: {
                              value: theme.getSelectScopeValueLabel(wcardinalUi.EShapeDataValueScope.PUBLIC)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueScope.PROTECTED,
                          text: {
                              value: theme.getSelectScopeValueLabel(wcardinalUi.EShapeDataValueScope.PROTECTED)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueScope.PRIVATE,
                          text: {
                              value: theme.getSelectScopeValueLabel(wcardinalUi.EShapeDataValueScope.PRIVATE)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputInitial", {
          get: function () {
              var result = this._inputInitial;
              if (result == null) {
                  result = this.newInputInitial();
                  this._inputInitial = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputInitial = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputInitialLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "layoutInterval", {
          get: function () {
              var result = this._layoutInterval;
              if (result == null) {
                  result = this.newLayoutInterval();
                  this._layoutInterval = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newLayoutInterval = function () {
          var theme = this.theme;
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputIntervalLabel()
                      }
                  }),
                  this.inputInterval,
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputIntervalUnitLabel(),
                          align: {
                              horizontal: "LEFT"
                          }
                      }
                  })
              ]
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputInterval", {
          get: function () {
              var result = this._inputInterval;
              if (result == null) {
                  result = this.newInputInterval();
                  this._inputInterval = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputInterval = function () {
          var _this = this;
          return new wcardinalUi.DInputInteger({
              weight: 1,
              text: {
                  value: 1000
              },
              step: 1,
              min: 0,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputFormat", {
          get: function () {
              var result = this._inputFormat;
              if (result == null) {
                  result = this.newInputFormat();
                  this._inputFormat = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputFormat = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputFormatLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "layoutRangeType", {
          get: function () {
              var result = this._layoutRangeType;
              if (result == null) {
                  result = this.newLayoutRangeType();
                  this._layoutRangeType = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newLayoutRangeType = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getSelectRangeTypeLabel()
                      }
                  }),
                  this.selectRangeType,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "selectRangeType", {
          get: function () {
              var _this = this;
              var result = this._selectRangeType;
              if (result == null) {
                  result = this.newSelectRangeType();
                  result.on("change", function () {
                      _this.onChange();
                  });
                  this._selectRangeType = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newSelectRangeType = function () {
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeDataValueRangeType.NONE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeDataValueRangeType.NONE,
                          text: {
                              value: theme.getSelectRangeTypeValueLabel(wcardinalUi.EShapeDataValueRangeType.NONE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueRangeType.FROM,
                          text: {
                              value: theme.getSelectRangeTypeValueLabel(wcardinalUi.EShapeDataValueRangeType.FROM)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueRangeType.TO,
                          text: {
                              value: theme.getSelectRangeTypeValueLabel(wcardinalUi.EShapeDataValueRangeType.TO)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueRangeType.FROM_TO,
                          text: {
                              value: theme.getSelectRangeTypeValueLabel(wcardinalUi.EShapeDataValueRangeType.FROM_TO)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputRangeFrom", {
          get: function () {
              var result = this._inputRangeFrom;
              if (result == null) {
                  result = this.newInputRangeFrom();
                  this._inputRangeFrom = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputRangeFrom = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              visible: false,
              input: {
                  weight: 1,
                  text: {
                      value: 0
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 90,
                  text: {
                      value: this.theme.getInputRangeFromLabel()
                  }
              },
              space: {
                  width: 90
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputRangeTo", {
          get: function () {
              var result = this._inputRangeTo;
              if (result == null) {
                  result = this.newInputRangeTo();
                  this._inputRangeTo = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputRangeTo = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              visible: false,
              input: {
                  weight: 1,
                  text: {
                      value: 1
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 90,
                  text: {
                      value: this.theme.getInputRangeToLabel()
                  }
              },
              space: {
                  width: 90
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "inputCapacity", {
          get: function () {
              var result = this._inputCapacity;
              if (result == null) {
                  result = this.newInputCapacity();
                  this._inputCapacity = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newInputCapacity = function () {
          var _this = this;
          return new wcardinalUi.DInputIntegerAndLabel({
              width: "padding",
              height: "auto",
              input: {
                  weight: 1,
                  text: {
                      value: 0
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputCapacityLabel()
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "layoutOrder", {
          get: function () {
              var result = this._layoutOrder;
              if (result == null) {
                  result = this.newLayoutOrder();
                  this._layoutOrder = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newLayoutOrder = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: this.theme.getSelectOrderLabel()
                      }
                  }),
                  this.selectOrder,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      Object.defineProperty(EDialogDataValue.prototype, "selectOrder", {
          get: function () {
              var result = this._selectOrder;
              if (result == null) {
                  result = this.newSelectOrder();
                  this._selectOrder = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.newSelectOrder = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.EShapeDataValueOrder.ASCENDING,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeDataValueOrder.ASCENDING,
                          text: {
                              value: theme.getSelectOrderValueLabel(wcardinalUi.EShapeDataValueOrder.ASCENDING)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeDataValueOrder.DESCENDING,
                          text: {
                              value: theme.getSelectOrderValueLabel(wcardinalUi.EShapeDataValueOrder.DESCENDING)
                          }
                      }
                  ]
              },
              on: {
                  init: function (self) {
                      _this._selectOrder = self;
                  }
              }
          });
      };
      EDialogDataValue.prototype.onChange = function () {
          var type = this.selectType.value;
          switch (type) {
              case wcardinalUi.EShapeDataValueType.BOOLEAN:
              case wcardinalUi.EShapeDataValueType.BOOLEAN_ARRAY:
              case wcardinalUi.EShapeDataValueType.NUMBER:
              case wcardinalUi.EShapeDataValueType.NUMBER_ARRAY:
              case wcardinalUi.EShapeDataValueType.STRING:
              case wcardinalUi.EShapeDataValueType.STRING_ARRAY:
              case wcardinalUi.EShapeDataValueType.OBJECT:
              case wcardinalUi.EShapeDataValueType.OBJECT_ARRAY:
                  this.layoutScope.show();
                  this.inputId.show();
                  this.inputAs.show();
                  this.inputInitial.show();
                  this.layoutInterval.hide();
                  this.inputFormat.show();
                  if (type === wcardinalUi.EShapeDataValueType.NUMBER) {
                      this.layoutRangeType.show();
                      var rangeType = this.selectRangeType.value;
                      if (rangeType != null && (rangeType & wcardinalUi.EShapeDataValueRangeType.FROM) !== 0) {
                          this.inputRangeFrom.show();
                      }
                      else {
                          this.inputRangeFrom.hide();
                      }
                      if (rangeType != null && (rangeType & wcardinalUi.EShapeDataValueRangeType.TO) !== 0) {
                          this.inputRangeTo.show();
                      }
                      else {
                          this.inputRangeTo.hide();
                      }
                  }
                  else {
                      this.layoutRangeType.hide();
                      this.inputRangeFrom.hide();
                      this.inputRangeTo.hide();
                  }
                  break;
              case wcardinalUi.EShapeDataValueType.TICKER:
                  this.layoutScope.hide();
                  this.inputId.hide();
                  this.inputAs.show();
                  this.inputInitial.hide();
                  this.layoutInterval.show();
                  this.inputFormat.hide();
                  this.layoutRangeType.hide();
                  this.inputRangeFrom.hide();
                  this.inputRangeTo.hide();
                  break;
              default:
                  this.layoutScope.hide();
                  this.inputId.hide();
                  this.inputAs.show();
                  this.inputInitial.hide();
                  this.layoutInterval.hide();
                  this.inputFormat.hide();
                  this.layoutRangeType.hide();
                  this.inputRangeFrom.hide();
                  this.inputRangeTo.hide();
                  break;
          }
      };
      EDialogDataValue.prototype.reset = function () {
          this.selectType.value = wcardinalUi.EShapeDataValueType.NUMBER;
          this.selectScope.value = wcardinalUi.EShapeDataValueScope.PUBLIC;
          this.inputId.input.value = "";
          this.inputAs.input.value = "";
          this.inputInitial.input.value = "";
          this.inputInterval.value = 1000;
          this.inputFormat.input.value = "";
          this.selectRangeType.value = wcardinalUi.EShapeDataValueRangeType.NONE;
          this.inputRangeFrom.input.value = 0;
          this.inputRangeTo.input.value = 1;
          this.inputCapacity.input.value = 0;
          this.selectOrder.value = wcardinalUi.EShapeDataValueOrder.ASCENDING;
          this.onChange();
          return this;
      };
      Object.defineProperty(EDialogDataValue.prototype, "value", {
          get: function () {
              var _a, _b, _c, _d;
              var result = new wcardinalUi.EShapeDataValueImpl();
              var type = (_a = this.selectType.value) !== null && _a !== void 0 ? _a : wcardinalUi.EShapeDataValueType.NUMBER;
              var scope = (_b = this.selectScope.value) !== null && _b !== void 0 ? _b : wcardinalUi.EShapeDataValueScope.PUBLIC;
              var order = (_c = this.selectOrder.value) !== null && _c !== void 0 ? _c : wcardinalUi.EShapeDataValueOrder.ASCENDING;
              result.type = type;
              switch (type) {
                  case wcardinalUi.EShapeDataValueType.BOOLEAN:
                  case wcardinalUi.EShapeDataValueType.BOOLEAN_ARRAY:
                  case wcardinalUi.EShapeDataValueType.NUMBER:
                  case wcardinalUi.EShapeDataValueType.NUMBER_ARRAY:
                  case wcardinalUi.EShapeDataValueType.STRING:
                  case wcardinalUi.EShapeDataValueType.STRING_ARRAY:
                  case wcardinalUi.EShapeDataValueType.OBJECT:
                  case wcardinalUi.EShapeDataValueType.OBJECT_ARRAY:
                      result.scope = scope;
                      result.id = this.inputId.input.value.trim();
                      result.as = this.inputAs.input.value.trim();
                      result.initial = this.inputInitial.input.value.trim();
                      result.format = this.inputFormat.input.value.trim();
                      if (type === wcardinalUi.EShapeDataValueType.NUMBER) {
                          result.range.type = (_d = this.selectRangeType.value) !== null && _d !== void 0 ? _d : wcardinalUi.EShapeDataValueRangeType.NONE;
                          result.range.from = this.inputRangeFrom.input.value;
                          result.range.to = this.inputRangeTo.input.value;
                      }
                      else {
                          result.range.type = wcardinalUi.EShapeDataValueRangeType.NONE;
                          result.range.from = 0;
                          result.range.to = 1;
                      }
                      result.order = order;
                      break;
                  case wcardinalUi.EShapeDataValueType.TICKER:
                      result.scope = wcardinalUi.EShapeDataValueScope.PUBLIC;
                      result.id = "";
                      result.as = this.inputAs.input.value.trim();
                      result.initial = "".concat(this.inputInterval.value);
                      result.format = "";
                      result.range.type = wcardinalUi.EShapeDataValueRangeType.NONE;
                      result.range.from = 0;
                      result.range.to = 1;
                      result.order = order;
                      break;
                  default:
                      result.scope = wcardinalUi.EShapeDataValueScope.PUBLIC;
                      result.id = "";
                      result.as = this.inputAs.input.value.trim();
                      result.initial = "";
                      result.format = "";
                      result.range.type = wcardinalUi.EShapeDataValueRangeType.NONE;
                      result.range.from = 0;
                      result.range.to = 1;
                      result.order = order;
                      break;
              }
              return result;
          },
          set: function (value) {
              if (value != null) {
                  this.selectType.value = value.type;
                  this.selectScope.value = value.scope;
                  this.inputId.input.value = value.id;
                  this.inputAs.input.value = value.as;
                  if (value.type === wcardinalUi.EShapeDataValueType.TICKER) {
                      this.inputInitial.input.value = "";
                      this.inputInterval.value = this.toInterval(value.initial);
                  }
                  else {
                      this.inputInitial.input.value = value.initial;
                      this.inputInterval.value = 1000;
                  }
                  this.inputFormat.input.value = value.format;
                  this.selectRangeType.value = value.range.type;
                  this.inputRangeFrom.input.value = value.range.from;
                  this.inputRangeTo.input.value = value.range.to;
                  this.inputCapacity.input.value = value.capacity;
                  this.selectOrder.value = value.order;
                  this.onChange();
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogDataValue.prototype.toInterval = function (target) {
          try {
              var result = parseInt(target, 10);
              if (result === result) {
                  return Math.max(0, result);
              }
          }
          catch (_a) {
              // DO NOTHING
          }
          return 1000;
      };
      EDialogDataValue.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogDataValue.prototype.getType = function () {
          return "EDialogDataValue";
      };
      return EDialogDataValue;
  }(wcardinalUi.DDialogLayered));

  var EDialogLayer = /** @class */ (function (_super) {
      __extends(EDialogLayer, _super);
      function EDialogLayer() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogLayer.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.inputName, this.inputPositionLayout, this.inputSizeLayout, this.checkBackgroundLayout, this.colorBackgroundLayout, this.selectGestureLayout, this.checkVisibleLayout, this.checkInteractiveLayout);
          return result;
      };
      EDialogLayer.prototype.newLabel = function (label) {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: label
              }
          });
      };
      EDialogLayer.prototype.newSpace = function () {
          return new wcardinalUi.DLayoutSpace({
              width: 60
          });
      };
      EDialogLayer.prototype.newLabeled = function (label, inputA, inputB) {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  label != null ? this.newLabel(label) : this.newSpace(),
                  inputA,
                  inputB,
                  this.newSpace()
              ]
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputName", {
          get: function () {
              var result = this._inputName;
              if (result == null) {
                  result = this.newInputName();
                  this._inputName = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newInputName = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  width: 60,
                  text: {
                      value: this.theme.getInputNameLabel()
                  }
              },
              input: {
                  weight: 1,
                  text: {
                      value: ""
                  },
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputX", {
          get: function () {
              var result = this._inputX;
              if (result == null) {
                  result = this.newInputX();
                  this._inputX = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newInputX = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputY", {
          get: function () {
              var result = this._inputY;
              if (result == null) {
                  result = this.newInputY();
                  this._inputY = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newInputY = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputPositionLayout", {
          get: function () {
              var result = this._inputPositionLayout;
              if (result == null) {
                  result = this.newLabeled(this.theme.getInputPositionLabel(), this.inputX, this.inputY);
                  this._inputPositionLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "inputWidth", {
          get: function () {
              var result = this._inputWidth;
              if (result == null) {
                  result = this.newInputWidth();
                  this._inputWidth = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newInputWidth = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputHeight", {
          get: function () {
              var result = this._inputHeight;
              if (result == null) {
                  result = this.newInputHeight();
                  this._inputHeight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newInputHeight = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "inputSizeLayout", {
          get: function () {
              var result = this._inputSizeLayout;
              if (result == null) {
                  result = this.newLabeled(this.theme.getInputSizeLabel(), this.inputWidth, this.inputHeight);
                  this._inputSizeLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "checkBackground", {
          get: function () {
              var result = this._checkBackground;
              if (result == null) {
                  result = this.newCheckBackground();
                  this._checkBackground = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newCheckBackground = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckBackgroundLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              },
              on: {
                  active: function () {
                      _this.onCheckBackgroundChange(true);
                  },
                  inactive: function () {
                      _this.onCheckBackgroundChange(false);
                  }
              }
          });
      };
      EDialogLayer.prototype.onCheckBackgroundChange = function (isActive) {
          this.colorBackground.state.isDisabled = !isActive;
      };
      Object.defineProperty(EDialogLayer.prototype, "checkBackgroundLayout", {
          get: function () {
              var result = this._checkBackgroundLayout;
              if (result == null) {
                  result = this.newLabeled(this.theme.getTextBackgroundLabel(), this.checkBackground, null);
                  this._checkBackgroundLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "colorBackground", {
          get: function () {
              var result = this._colorBackground;
              if (result == null) {
                  result = this.newColorBackground();
                  this._colorBackground = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newColorBackground = function () {
          return new wcardinalUi.DButtonColor({
              weight: 1
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "colorBackgroundLayout", {
          get: function () {
              var result = this._colorBackgroundLayout;
              if (result == null) {
                  result = this.newLabeled(null, this.colorBackground, null);
                  this._colorBackgroundLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "checkVisible", {
          get: function () {
              var result = this._checkVisible;
              if (result == null) {
                  result = this.newCheckVisible();
                  this._checkVisible = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newCheckVisible = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckVisibleLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "checkVisibleLayout", {
          get: function () {
              var result = this._checkVisibleLayout;
              if (result == null) {
                  result = this.newLabeled(null, this.checkVisible, null);
                  this._checkVisibleLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "checkInteractive", {
          get: function () {
              var result = this._checkInteractive;
              if (result == null) {
                  result = this.newCheckInteractive();
                  this._checkInteractive = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newCheckInteractive = function () {
          return new wcardinalUi.DButtonCheck({
              weight: 1,
              text: {
                  value: this.theme.getCheckInteractiveLabel(),
                  align: {
                      horizontal: "LEFT"
                  }
              }
          });
      };
      Object.defineProperty(EDialogLayer.prototype, "checkInteractiveLayout", {
          get: function () {
              var result = this._checkInteractiveLayout;
              if (result == null) {
                  result = this.newLabeled(null, this.checkInteractive, null);
                  this._checkInteractiveLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EDialogLayer.prototype, "selectGesture", {
          get: function () {
              var result = this._selectGesture;
              if (result == null) {
                  result = this.newSelectGesture();
                  this._selectGesture = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.newSelectGesture = function () {
          var theme = this.theme;
          return new wcardinalUi.DSelectMultiple({
              weight: 1,
              values: this.fromGestureOperationType(wcardinalUi.EShapeActionValueGestureOperationType.ALL),
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeActionValueGestureOperationType.DRAG,
                          text: {
                              value: theme.getSelectGestureValueLabel(wcardinalUi.EShapeActionValueGestureOperationType.DRAG)
                          },
                          check: true
                      },
                      {
                          value: wcardinalUi.EShapeActionValueGestureOperationType.PINCH,
                          text: {
                              value: theme.getSelectGestureValueLabel(wcardinalUi.EShapeActionValueGestureOperationType.PINCH)
                          },
                          check: true
                      }
                  ]
              }
          });
      };
      EDialogLayer.prototype.toGestureOperationType = function (types) {
          var result = wcardinalUi.EShapeActionValueGestureOperationType.NONE;
          for (var i = 0, imax = types.length; i < imax; ++i) {
              result |= types[i];
          }
          return result;
      };
      EDialogLayer.prototype.fromGestureOperationType = function (type) {
          var result = [];
          if (type & wcardinalUi.EShapeActionValueGestureOperationType.DRAG) {
              result.push(wcardinalUi.EShapeActionValueGestureOperationType.DRAG);
          }
          if (type & wcardinalUi.EShapeActionValueGestureOperationType.PINCH) {
              result.push(wcardinalUi.EShapeActionValueGestureOperationType.PINCH);
          }
          return result;
      };
      Object.defineProperty(EDialogLayer.prototype, "selectGestureLayout", {
          get: function () {
              var result = this._selectGestureLayout;
              if (result == null) {
                  result = this.newLabeled(this.theme.getSelectGestureLabel(), this.selectGesture, null);
                  this._selectGestureLayout = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.reset = function (width, height) {
          this.inputName.input.value = "";
          this.inputX.value = 0;
          this.inputY.value = 0;
          this.inputWidth.value = width;
          this.inputHeight.value = height;
          this.checkBackground.state.isActive = false;
          this.colorBackground.value.color = 0xffffff;
          this.colorBackground.value.alpha = 1;
          this.checkVisible.state.isActive = true;
          this.checkInteractive.state.isActive = true;
          this.selectGesture.values = [];
          this.onCheckBackgroundChange(false);
          return this;
      };
      Object.defineProperty(EDialogLayer.prototype, "value", {
          get: function () {
              return new EDialogLayerValue(this.inputName.input.value, this.inputX.value, this.inputY.value, this.inputWidth.value, this.inputHeight.value, new EDialogLayerValueBackground(this.checkBackground.state.isActive, this.colorBackground.value.color, this.colorBackground.value.alpha), this.checkVisible.state.isActive, this.checkInteractive.state.isActive, this.toGestureOperationType(this.selectGesture.values));
          },
          set: function (value) {
              if (value != null) {
                  this.inputName.input.value = value.name;
                  this.inputX.value = value.x;
                  this.inputY.value = value.y;
                  this.inputWidth.value = value.width;
                  this.inputHeight.value = value.height;
                  this.checkBackground.state.isActive = value.background.enable;
                  this.colorBackground.value.color = value.background.color;
                  this.colorBackground.value.alpha = value.background.alpha;
                  this.checkVisible.state.isActive = value.visible;
                  this.checkInteractive.state.isActive = value.interactive;
                  this.selectGesture.values = this.fromGestureOperationType(value.gesture);
                  this.onCheckBackgroundChange(value.background.enable);
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogLayer.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogLayer.prototype.getType = function () {
          return "EDialogLayer";
      };
      return EDialogLayer;
  }(wcardinalUi.DDialogLayered));

  var EDialogProcessing = /** @class */ (function (_super) {
      __extends(EDialogProcessing, _super);
      function EDialogProcessing() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogProcessing.prototype.toReasonMalformedLabel = function (target) {
          switch (target) {
              case "uid":
                  return "An ID";
              case "password":
                  return "A password";
              case "description":
                  return "A description";
              case "name":
                  return "A name";
              case "label":
                  return "A label";
              case "summary":
                  return "A summary";
              default:
                  return "Something";
          }
      };
      EDialogProcessing.prototype.toReasonMalformedRange = function (target) {
          switch (target) {
              case "uid":
                  return {
                      lower: 1,
                      upper: 32
                  };
              case "password":
                  return {
                      lower: 6,
                      upper: 32
                  };
              case "description":
                  return {
                      lower: 0,
                      upper: 256
                  };
              case "name":
                  return {
                      lower: 1,
                      upper: 32
                  };
              case "label":
                  return {
                      lower: 0,
                      upper: 16
                  };
              case "summary":
                  return {
                      lower: 0,
                      upper: 32
                  };
              default:
                  return {
                      lower: 1,
                      upper: 32
                  };
          }
      };
      EDialogProcessing.prototype.toReasonMalformed = function (at, target, reason) {
          var label = this.toReasonMalformedLabel(target);
          switch (reason) {
              case "short":
              case "long":
                  var range = this.toReasonMalformedRange(target);
                  return "Failed to save '".concat(at, "'.\n").concat(label, " must be of ").concat(range.lower, " to ").concat(range.upper, "\ncharacters long.");
              case "simple":
                  return "Failed to save '".concat(at, "'.\n").concat(label, " must contain letters (A-Za-z_)\nand digits (0-9).");
              case "slash":
                  return "Failed to save '".concat(at, "'.\n").concat(label, " must not contain the slash mark (/).");
              case "non-alphanumeric":
                  return ("Failed to save '".concat(at, "'.\n").concat(label, " must contain only letters (A-Za-z_),\n") +
                      "digits (0-9) and a sharp symbol (#).");
              default:
                  return "Failed to save '".concat(at, "'.\n").concat(label, " is invalid.");
          }
      };
      EDialogProcessing.prototype.toReasonTarget = function (at, target, targetLabel) {
          if (target != null) {
              return "Failed to save '".concat(at, "'.\n").concat(targetLabel, " '").concat(target, "' does not exit.");
          }
          else {
              return "Failed to save '".concat(at, "'.\n").concat(targetLabel, " is missing.");
          }
      };
      EDialogProcessing.prototype.toReasonTargetAt = function (at, target, atLabel, targetLabel) {
          if (target != null) {
              return "Failed to save.\n".concat(atLabel, " '").concat(at, "'\nrequires ").concat(targetLabel, " '").concat(target, "'.");
          }
          else {
              return "Failed to save.\n".concat(atLabel, " '").concat(at, "'\nrequires ").concat(targetLabel, ".");
          }
      };
      EDialogProcessing.prototype.toReason = function (reason) {
          if (reason == null) {
              return undefined;
          }
          else {
              if (0 < reason.length && reason[0] === "{") {
                  try {
                      var parsed = JSON.parse(reason);
                      switch (parsed.id) {
                          case "no-sensor-found":
                              return this.toReasonTarget(parsed.at, parsed.target, "Sensor");
                          case "no-device-model-found":
                              return this.toReasonTarget(parsed.at, parsed.target, "Device model");
                          case "malformed":
                              return this.toReasonMalformed(parsed.at, parsed.target, parsed.reason);
                          case "invalid-operation-mode":
                              return "Failed to save.\nInvalid operation mode.";
                          case "no-graphic-found":
                              return this.toReasonTargetAt(parsed.at, parsed.target, "A graphic sensor mapping", "a graphic");
                          case "no-alarm-list-found":
                              return this.toReasonTargetAt(parsed.at, parsed.target, "An alarm mapping", "an alarm list");
                          case "no-trend-graph-found":
                              return this.toReasonTargetAt(parsed.at, parsed.target, "A trend graph sensor mapping", "a trend graph");
                      }
                  }
                  catch (_a) {
                      return undefined;
                  }
              }
              else {
                  switch (reason) {
                      case "duplication":
                          return "Failed to save.\nThe name has already been used.";
                      case "duplications":
                          return "Failed to save.\nIDs must be unique.";
                      case "invalid-operation-mode":
                          return "Failed to save.\nInvalid operation mode.";
                      case "validation":
                          return "A validation error has occurred.";
                      case "validation-fail":
                          return "A validation failed.";
                  }
              }
          }
          return undefined;
      };
      EDialogProcessing.prototype.toButtonText = function (reason) {
          if (reason === "validation" || reason === "validation-fail" || reason != undefined) {
              return "OK";
          }
          return "Save";
      };
      EDialogProcessing.prototype.reject = function (reason) {
          _super.prototype.reject.call(this, this.toReason(reason));
          // Button text
          var footer = this.footer;
          if (footer) {
              var buttonOk = footer.buttonOk;
              if (buttonOk) {
                  buttonOk.text = this.toButtonText(reason);
              }
          }
      };
      return EDialogProcessing;
  }(wcardinalUi.DDialogProcessing));

  var dialogSelectThumbnailSize = 128;
  var getDialogSelectThumbnailSize = function () {
      return dialogSelectThumbnailSize;
  };
  var setDialogSelectThumbnailSize = function (size) {
      dialogSelectThumbnailSize = size;
  };
  var dialogSelectTHumbnailNotFound;
  var getDialogSelectThumbnailNotFound = function () {
      var result = dialogSelectTHumbnailNotFound;
      if (result == null) {
          result = newDialogTHumbnailNotFound();
          dialogSelectTHumbnailNotFound = result;
      }
      return result;
  };
  var newDialogTHumbnailNotFound = function () {
      var thumbnailSize = getDialogSelectThumbnailSize();
      var resolution = window.devicePixelRatio || 1;
      var svgSize = thumbnailSize * resolution;
      return wcardinalUi.toSvgTexture("<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"".concat(svgSize, "px\" width=\"").concat(svgSize, "px\" viewBox=\"0 0 24 24\" fill=\"#000000\" fill-opacity=\"0.05\">") +
          "<path d=\"M19,5v11.17l2,2V5c0-1.1-0.9-2-2-2H5.83l2,2H19z\"/>" +
          "<path d=\"M2.81,2.81L1.39,4.22L3,5.83V19c0,1.1,0.9,2,2,2h13.17l1.61,1.61l1.41-1.41L2.81,2.81z M5,19V7.83l7.07,7.07L11.25,16 L9,13l-3,4h8.17l2,2H5z\"/>" +
          "</svg>", resolution);
  };
  var newDialogSelectWithThumbnailsOptions = function (controller, toThumbnail, onSelect) {
      var thumbnailSize = getDialogSelectThumbnailSize();
      var thumbnailNotFound = getDialogSelectThumbnailNotFound();
      var itemPadding = 8;
      var itemLabelHeight = 30;
      var itemSize = itemPadding + thumbnailSize + itemLabelHeight + itemPadding;
      var textures = new Map();
      var items = new Set();
      var toImage = function (item) {
          if (toThumbnail) {
              var image_1 = toThumbnail(item.id);
              if (wcardinalUi.isString(image_1)) {
                  var texture = textures.get(image_1);
                  if (texture == null) {
                      var newTexture_1 = pixi_js.Texture.from(image_1);
                      newTexture_1.baseTexture.on("error", function () {
                          checkTextures(newTexture_1, image_1);
                      });
                      texture = newTexture_1;
                      textures.set(image_1, newTexture_1);
                  }
                  return texture;
              }
              else if (image_1 != null) {
                  return image_1;
              }
          }
          return thumbnailNotFound;
      };
      var openTextures = function () {
          items.forEach(function (item) {
              var value = item.value;
              if (value != null) {
                  item.image = toImage(value);
              }
          });
      };
      var clearTimeoutId = null;
      var clearTextures = function () {
          items.forEach(function (item) {
              item.image = null;
          });
          textures.forEach(function (texture, url) {
              if (texture !== thumbnailNotFound) {
                  var baseTexture = texture.baseTexture;
                  texture.destroy();
                  if (baseTexture) {
                      baseTexture.destroy();
                      baseTexture.off("error");
                  }
              }
          });
          textures.clear();
      };
      var checkTextures = function (texture, url) {
          if (texture !== thumbnailNotFound && !texture.valid) {
              items.forEach(function (item) {
                  var image = item.image.get(0);
                  if (image != null && image.source === texture) {
                      image.source = thumbnailNotFound;
                  }
              });
              var baseTexture = texture.baseTexture;
              texture.destroy();
              if (baseTexture) {
                  baseTexture.destroy();
                  baseTexture.off("error");
              }
              textures.set(url, thumbnailNotFound);
          }
      };
      return {
          width: "auto",
          height: "auto",
          layout: {
              width: "auto",
              height: "auto"
          },
          content: {
              width: "auto",
              height: "auto"
          },
          list: {
              width: itemSize * 3,
              height: itemSize * 2 + itemPadding * 4,
              data: {
                  toImage: toImage
              },
              updater: {
                  newItem: function (data) {
                      var result = new wcardinalUi.DDialogSelectListItem(data, {
                          width: itemSize,
                          height: itemSize,
                          padding: itemPadding,
                          text: {
                              align: {
                                  vertical: "BOTTOM",
                                  horizontal: "CENTER"
                              }
                          },
                          image: {
                              align: {
                                  vertical: "TOP",
                                  horizontal: "CENTER",
                                  with: "PADDING"
                              },
                              margin: {
                                  vertical: 0
                              },
                              tint: {
                                  color: 0xffffff,
                                  alpha: 1.0
                              }
                          }
                      });
                      items.add(result);
                      return result;
                  }
              }
          },
          controller: controller,
          on: {
              open: function () {
                  if (clearTimeoutId != null) {
                      window.clearTimeout(clearTimeoutId);
                      clearTimeoutId = null;
                      clearTextures();
                  }
                  openTextures();
              },
              close: function () {
                  if (clearTimeoutId == null) {
                      clearTimeoutId = window.setTimeout(function () {
                          clearTimeoutId = null;
                          clearTextures();
                      }, 1000);
                  }
              },
              select: onSelect
          }
      };
  };
  var newDialogSelectWithThumbnails = function (controller, toThumbnail, onSelect) {
      return new wcardinalUi.DDialogSelect(newDialogSelectWithThumbnailsOptions(controller, toThumbnail, onSelect));
  };

  var EDialogSnap = /** @class */ (function (_super) {
      __extends(EDialogSnap, _super);
      function EDialogSnap() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EDialogSnap.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getSelectDirectionLabel()
                      }
                  }),
                  this.selectType,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          result.push(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DInputLabel({
                      width: 60,
                      text: {
                          value: theme.getInputPositionLabel()
                      }
                  }),
                  this.inputPosition,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          }));
          return result;
      };
      Object.defineProperty(EDialogSnap.prototype, "selectType", {
          get: function () {
              var result = this._selectType;
              if (result == null) {
                  result = this.newSelectType();
                  this._selectType = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogSnap.prototype.newSelectType = function () {
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: wcardinalUi.ESnapperTargetValueType.VERTICAL,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.ESnapperTargetValueType.VERTICAL,
                          text: {
                              value: theme.getSelectDirectionValueLabel(wcardinalUi.ESnapperTargetValueType.VERTICAL)
                          }
                      },
                      {
                          value: wcardinalUi.ESnapperTargetValueType.HORIZONTAL,
                          text: {
                              value: theme.getSelectDirectionValueLabel(wcardinalUi.ESnapperTargetValueType.HORIZONTAL)
                          }
                      }
                  ]
              }
          });
      };
      Object.defineProperty(EDialogSnap.prototype, "inputPosition", {
          get: function () {
              var result = this._inputPosition;
              if (result == null) {
                  result = this.newInputPosition();
                  this._inputPosition = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogSnap.prototype.newInputPosition = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              text: {
                  value: 0
              },
              step: 1,
              on: {
                  enter: function () {
                      _this.ok();
                  }
              }
          });
      };
      EDialogSnap.prototype.reset = function () {
          this.selectType.value = wcardinalUi.ESnapperTargetValueType.VERTICAL;
          this.inputPosition.value = 0;
          return this;
      };
      Object.defineProperty(EDialogSnap.prototype, "value", {
          get: function () {
              var type = this.selectType.value;
              var position = this.inputPosition.value;
              if (type != null) {
                  return new wcardinalUi.ESnapperTargetValue(type, position);
              }
              return null;
          },
          set: function (value) {
              if (value != null) {
                  this.selectType.value = value.type;
                  this.inputPosition.value = value.position;
              }
          },
          enumerable: false,
          configurable: true
      });
      EDialogSnap.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogSnap.prototype.getType = function () {
          return "EDialogSnap";
      };
      return EDialogSnap;
  }(wcardinalUi.DDialogLayered));

  var EEditorAction = /** @class */ (function (_super) {
      __extends(EEditorAction, _super);
      function EEditorAction(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var selection = options.selection;
          _this._selection = selection;
          _this._diagram = options.diagram;
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  _this.newTextLabel(),
                  _this.buttonNew,
                  _this.buttonDelete,
                  _this.buttonBringForward,
                  _this.buttonSendBackward
              ]
          }));
          _this.addChild(_this.actionList);
          _this.addChild(_this.checkInteractive);
          _this.addChild(_this.checkFocusable);
          _this.addChild(_this.labelTitle);
          _this.addChild(_this.inputTitle);
          _this.addChild(_this.labelShortcut);
          _this.addChild(_this.inputShortcut);
          _this.addChild(_this.labelCursor);
          _this.addChild(_this.dropdownCursor);
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          var actionList = _this.actionList;
          actionList.data.selection.on("change", function () {
              _this.onListSelectionChange(actionList);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorAction.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorAction.prototype, "buttonNew", {
          get: function () {
              var _a;
              return ((_a = this._buttonNew) !== null && _a !== void 0 ? _a : (this._buttonNew = this.newButtonNew()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.theme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorAction.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          this.actionDialog
              .reset()
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  _this._selection.addActionValue(value);
              }
          });
      };
      Object.defineProperty(EEditorAction.prototype, "buttonDelete", {
          get: function () {
              var _a;
              return ((_a = this._buttonDelete) !== null && _a !== void 0 ? _a : (this._buttonDelete = this.newButtonDelete()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.theme.getButtonDeleteTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var first = _this.actionList.data.selection.first;
                      if (first != null) {
                          _this._selection.removeActionValue(first);
                      }
                  }
              }
          });
      };
      EEditorAction.prototype.onListSelectionChangeButtonDelete = function (actionList) {
          this.buttonDelete.state.isDisabled = actionList.data.selection.isEmpty();
      };
      Object.defineProperty(EEditorAction.prototype, "buttonBringForward", {
          get: function () {
              var _a;
              return ((_a = this._buttonBringForward) !== null && _a !== void 0 ? _a : (this._buttonBringForward = this.newButtonBringForward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonBringForwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var actionList = _this.actionList;
                      var first = actionList.data.selection.first;
                      var items = actionList.data.items;
                      if (first != null && items[0] !== first) {
                          _this._selection.bringActionValueForward(first);
                      }
                  }
              }
          });
      };
      EEditorAction.prototype.onListSelectionChangeButtonBringForward = function (actionList) {
          var first = actionList.data.selection.first;
          var items = actionList.data.items;
          this.buttonBringForward.state.isDisabled = first == null || items[0] === first;
      };
      Object.defineProperty(EEditorAction.prototype, "buttonSendBackward", {
          get: function () {
              var _a;
              return ((_a = this._buttonSendBackward) !== null && _a !== void 0 ? _a : (this._buttonSendBackward = this.newButtonSendBackward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonSendBackwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var actionList = _this.actionList;
                      var first = actionList.data.selection.first;
                      var items = actionList.data.items;
                      if (first != null && items[items.length - 1] !== first) {
                          _this._selection.sendActionValueBackward(first);
                      }
                  }
              }
          });
      };
      EEditorAction.prototype.onListSelectionChangeButtonSendBackward = function (actionList) {
          var first = actionList.data.selection.first;
          var items = actionList.data.items;
          this.buttonSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      Object.defineProperty(EEditorAction.prototype, "actionDialog", {
          get: function () {
              var _a;
              return ((_a = this._actionDialog) !== null && _a !== void 0 ? _a : (this._actionDialog = this.newActionDialog()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newActionDialog = function () {
          return new EDialogAction({
              icons: this._icons,
              diagram: this._diagram
          });
      };
      Object.defineProperty(EEditorAction.prototype, "actionList", {
          get: function () {
              var _a;
              return ((_a = this._actionList) !== null && _a !== void 0 ? _a : (this._actionList = this.newActionList()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newActionList = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (item) {
                      return item.toLabel();
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          image: {
                              tint: {
                                  color: null
                              }
                          },
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onActionListDblClick(e, _, item, result);
                              },
                              set: function (value, index, item) {
                                  _this.onActionListSet(item, value);
                              },
                              unset: function (item) {
                                  _this.onActionListUnset(item);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorAction.prototype.onActionListDblClick = function (e, _, item, list) {
          var _this = this;
          var oldActionValue = item.value;
          if (oldActionValue != null) {
              var actionDialog_1 = this.actionDialog;
              actionDialog_1.reset();
              actionDialog_1.value = oldActionValue;
              actionDialog_1.open(item).then(function () {
                  var newActionValue = actionDialog_1.value;
                  if (newActionValue != null) {
                      _this._selection.replaceActionValue(oldActionValue, newActionValue, list);
                  }
              });
          }
      };
      EEditorAction.prototype.onActionListSet = function (item, value) {
          if (value instanceof wcardinalUi.EShapeActionValueChangeColor) {
              var image = item.image.get(0);
              if (image != null) {
                  var theme = wcardinalUi.DThemes.get("DButtonColor");
                  image.source = theme.getImageSource(item.state);
                  image.tint.color = value.color;
              }
          }
          else {
              item.image = null;
          }
      };
      EEditorAction.prototype.onActionListUnset = function (item) {
          item.image = null;
      };
      EEditorAction.prototype.onSelectionChangeActionList = function (selection) {
          var last = selection.last();
          var actionList = this.actionList;
          actionList.data.items = last != null ? last.action.values : [];
          this.onListSelectionChange(actionList);
      };
      Object.defineProperty(EEditorAction.prototype, "checkInteractive", {
          get: function () {
              var _a;
              return ((_a = this._checkInteractive) !== null && _a !== void 0 ? _a : (this._checkInteractive = this.newCheckInteractive()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newCheckInteractive = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.theme.getCheckInteractiveLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      _this._selection.setInteractive(true);
                  },
                  inactive: function () {
                      _this._selection.setInteractive(false);
                  }
              }
          });
      };
      EEditorAction.prototype.onSelectionChangeCheckInteractive = function (selection) {
          var last = selection.last();
          var checkInteractive = this.checkInteractive;
          if (last != null) {
              checkInteractive.state.isActive = last.interactive;
              checkInteractive.state.isDisabled = false;
          }
          else {
              checkInteractive.state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorAction.prototype, "checkFocusable", {
          get: function () {
              var _a;
              return ((_a = this._checkFocusable) !== null && _a !== void 0 ? _a : (this._checkFocusable = this.newCheckFocusable()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newCheckFocusable = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "padding",
              text: {
                  value: this.theme.getCheckFocusableLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      _this._selection.setFocusable(true);
                  },
                  inactive: function () {
                      _this._selection.setFocusable(false);
                  }
              }
          });
      };
      EEditorAction.prototype.onSelectionChangeCheckFocusable = function (selection) {
          var last = selection.last();
          var checkFocusable = this.checkFocusable;
          if (last != null) {
              checkFocusable.state.isActive = last.state.isFocusable;
              checkFocusable.state.isDisabled = false;
          }
          else {
              checkFocusable.state.isDisabled = true;
          }
      };
      Object.defineProperty(EEditorAction.prototype, "labelShortcut", {
          get: function () {
              var _a;
              return ((_a = this._labelShortcut) !== null && _a !== void 0 ? _a : (this._labelShortcut = this.newLabelShortcut()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newLabelShortcut = function () {
          return new wcardinalUi.DText({
              width: "padding",
              text: {
                  value: this.theme.getInputShortcutLabel()
              }
          });
      };
      Object.defineProperty(EEditorAction.prototype, "inputShortcut", {
          get: function () {
              var _a;
              return ((_a = this._inputShortcut) !== null && _a !== void 0 ? _a : (this._inputShortcut = this.newInputShortcut()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newInputShortcut = function () {
          var _this = this;
          return new wcardinalUi.DInputText({
              width: "padding",
              on: {
                  change: function (value) {
                      _this._selection.setShortcut(_this.toNormalizedShortcut(value));
                  }
              }
          });
      };
      EEditorAction.prototype.toNormalizedShortcut = function (value) {
          var trimmed = value.trim();
          if (0 < trimmed.length) {
              return trimmed;
          }
      };
      EEditorAction.prototype.onSelectionChangeInputShortcut = function (selection) {
          var _a;
          this.inputShortcut.value = ((_a = selection.last()) === null || _a === void 0 ? void 0 : _a.shortcut) || "";
      };
      Object.defineProperty(EEditorAction.prototype, "labelTitle", {
          get: function () {
              var _a;
              return ((_a = this._labelTitle) !== null && _a !== void 0 ? _a : (this._labelTitle = this.newLabelTitle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newLabelTitle = function () {
          return new wcardinalUi.DText({
              width: "padding",
              text: {
                  value: this.theme.getInputTitleLabel()
              }
          });
      };
      Object.defineProperty(EEditorAction.prototype, "inputTitle", {
          get: function () {
              var _a;
              return ((_a = this._inputTitle) !== null && _a !== void 0 ? _a : (this._inputTitle = this.newInputTitle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newInputTitle = function () {
          var _this = this;
          return new wcardinalUi.DInputText({
              width: "padding",
              on: {
                  change: function (value) {
                      _this._selection.setTitle(_this.toNormalizedTitle(value));
                  }
              }
          });
      };
      EEditorAction.prototype.toNormalizedTitle = function (value) {
          if (0 < value.trim().length) {
              return value;
          }
      };
      EEditorAction.prototype.onSelectionChangeInputTitle = function (selection) {
          var _a;
          this.inputTitle.value = ((_a = selection.last()) === null || _a === void 0 ? void 0 : _a.title) || "";
      };
      Object.defineProperty(EEditorAction.prototype, "labelCursor", {
          get: function () {
              var _a;
              return ((_a = this._labelCursor) !== null && _a !== void 0 ? _a : (this._labelCursor = this.newLabelCursor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newLabelCursor = function () {
          return new wcardinalUi.DText({
              width: "padding",
              text: {
                  value: this.theme.getDropdownCursorLabel()
              }
          });
      };
      Object.defineProperty(EEditorAction.prototype, "dropdownCursor", {
          get: function () {
              var _a;
              return ((_a = this._dropdownCursor) !== null && _a !== void 0 ? _a : (this._dropdownCursor = this.newDropdownCursor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.newDropdownCursor = function () {
          var _this = this;
          return new wcardinalUi.DDropdown({
              width: "padding",
              menu: {
                  width: "auto",
                  column: 3,
                  fit: false,
                  items: this.newDropdownCursorMenuItems()
              },
              on: {
                  select: function (value) {
                      var _a;
                      _this.dropdownCursor.text = (_a = _this.cursors.get(value)) !== null && _a !== void 0 ? _a : value;
                      _this._selection.setCursor(value);
                  }
              }
          });
      };
      EEditorAction.prototype.newDropdownCursorMenuItems = function () {
          var result = [];
          this.cursors.forEach(function (label, cursor) {
              result.push({
                  width: 200,
                  value: cursor,
                  text: {
                      value: label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EEditorAction.prototype, "cursors", {
          get: function () {
              var _a;
              return ((_a = this._cursors) !== null && _a !== void 0 ? _a : (this._cursors = this.theme.getCursors()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorAction.prototype.onSelectionChangeDropdownCursor = function (selection) {
          var _a, _b, _c;
          var cursor = (_b = (_a = selection.last()) === null || _a === void 0 ? void 0 : _a.cursor) !== null && _b !== void 0 ? _b : "";
          this.dropdownCursor.text = (_c = this.cursors.get(cursor)) !== null && _c !== void 0 ? _c : cursor;
      };
      EEditorAction.prototype.onSelectionChange = function (selection) {
          this.state.isDisabled = selection.isEmpty();
          this.onSelectionChangeActionList(selection);
          this.onSelectionChangeCheckInteractive(selection);
          this.onSelectionChangeCheckFocusable(selection);
          this.onSelectionChangeInputShortcut(selection);
          this.onSelectionChangeInputTitle(selection);
          this.onSelectionChangeDropdownCursor(selection);
      };
      EEditorAction.prototype.onListSelectionChange = function (actionList) {
          this.onListSelectionChangeButtonDelete(actionList);
          this.onListSelectionChangeButtonBringForward(actionList);
          this.onListSelectionChangeButtonSendBackward(actionList);
      };
      EEditorAction.prototype.getType = function () {
          return "EEditorAction";
      };
      return EEditorAction;
  }(wcardinalUi.DLayoutVertical));

  var EDialogCanvas = /** @class */ (function (_super) {
      __extends(EDialogCanvas, _super);
      function EDialogCanvas(options) {
          var _this = _super.call(this, options) || this;
          var canvas = options.canvas;
          _this._canvas = options.canvas;
          _this.onDefaultChange(canvas);
          return _this;
      }
      EDialogCanvas.prototype.onDefaultChange = function (def) {
          var category = def.category;
          var categoryDefault = category.default;
          var categoryItems = category.items;
          var layout = this.layoutCategory;
          if (categoryDefault != null && 0 < categoryItems.length) {
              var items = [];
              for (var i = 0, imax = categoryItems.length; i < imax; ++i) {
                  var categoryItem = categoryItems[i];
                  items.push({
                      value: categoryItem.id,
                      text: {
                          value: categoryItem.label
                      }
                  });
              }
              var selectCategory = this.selectCategory;
              selectCategory.menu = new wcardinalUi.DMenu({
                  fit: true,
                  items: items
              });
              selectCategory.value = category.default;
              layout.state.isEnabled = category.writable;
              layout.show();
          }
          else {
              layout.hide();
          }
      };
      EDialogCanvas.prototype.newContentChildren = function (theme, options) {
          var result = _super.prototype.newContentChildren.call(this, theme, options);
          result.push(this.layoutName, this.layoutLabel, this.layoutWidth, this.layoutHeight, this.layoutCategory, this.layoutSummary, this.layoutDescription, this.layoutBackground);
          return result;
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutName", {
          get: function () {
              var result = this._layoutName;
              if (result == null) {
                  result = this.newLayoutName();
                  this._layoutName = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutName = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              label: {
                  text: {
                      value: this.theme.getInputNameLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutLabel", {
          get: function () {
              var result = this._layoutLabel;
              if (result == null) {
                  result = this.newLayoutLabel();
                  this._layoutLabel = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutLabel = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              label: {
                  text: {
                      value: this.theme.getInputLabelLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutWidth", {
          get: function () {
              var result = this._layoutWidth;
              if (result == null) {
                  result = this.newLayoutWidth();
                  this._layoutWidth = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutWidth = function () {
          var _this = this;
          return new wcardinalUi.DInputIntegerAndLabel({
              width: "padding",
              label: {
                  text: {
                      value: this.theme.getInputWidthLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutHeight", {
          get: function () {
              var result = this._layoutHeight;
              if (result == null) {
                  result = this.newLayoutHeight();
                  this._layoutHeight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutHeight = function () {
          var _this = this;
          return new wcardinalUi.DInputIntegerAndLabel({
              width: "padding",
              label: {
                  text: {
                      value: this.theme.getInputHeightLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 1,
                  on: {
                      enter: function () {
                          _this.ok();
                      }
                  }
              },
              space: {
                  width: 60
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutCategory", {
          get: function () {
              var result = this._layoutCategory;
              if (result == null) {
                  result = this.newLayoutCategory();
                  this._layoutCategory = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutCategory = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              visible: false,
              children: [
                  new wcardinalUi.DInputLabel({
                      text: {
                          value: this.theme.getSelectCategoryLabel()
                      }
                  }),
                  this.selectCategory,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "selectCategory", {
          get: function () {
              var result = this._selectCategory;
              if (result == null) {
                  result = this.newSelectCategory();
                  this._selectCategory = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newSelectCategory = function () {
          return new wcardinalUi.DSelect({
              weight: 1
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutSummary", {
          get: function () {
              var result = this._layoutSummary;
              if (result == null) {
                  result = this.newLayoutSummary();
                  this._layoutSummary = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutSummary = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newLabelSummary(),
                  this.inputSummary,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      EDialogCanvas.prototype.newLabelSummary = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputSummaryLabel()
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "inputSummary", {
          get: function () {
              var result = this._inputSummary;
              if (result == null) {
                  result = this.newInputSummary();
                  this._inputSummary = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newInputSummary = function () {
          return new wcardinalUi.DInputTextArea({
              weight: 1,
              height: 60
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutDescription", {
          get: function () {
              var result = this._layoutDescription;
              if (result == null) {
                  result = this.newLayoutDescription();
                  this._layoutDescription = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutDescription = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newLabelDescription(),
                  this.inputDescription,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      EDialogCanvas.prototype.newLabelDescription = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputDescriptionLabel()
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "inputDescription", {
          get: function () {
              var result = this._inputDescription;
              if (result == null) {
                  result = this.newInputDescription();
                  this._inputDescription = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newInputDescription = function () {
          return new wcardinalUi.DInputTextArea({
              weight: 1,
              height: 100
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "layoutBackground", {
          get: function () {
              var result = this._layoutBackground;
              if (result == null) {
                  result = this.newLayoutBackground();
                  this._layoutBackground = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newLayoutBackground = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newLabelBackground(),
                  this.inputBackground,
                  new wcardinalUi.DLayoutSpace({
                      width: 60
                  })
              ]
          });
      };
      EDialogCanvas.prototype.newLabelBackground = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputBackgroundLabel()
              }
          });
      };
      Object.defineProperty(EDialogCanvas.prototype, "inputBackground", {
          get: function () {
              var result = this._inputBackground;
              if (result == null) {
                  result = this.newInputBackground();
                  this._inputBackground = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.newInputBackground = function () {
          var result = new wcardinalUi.DButtonColor({
              weight: 1
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      EDialogCanvas.prototype.reset = function (diagram) {
          var diagramCanvas = diagram === null || diagram === void 0 ? void 0 : diagram.canvas;
          if (diagramCanvas != null) {
              var background = diagramCanvas.background;
              var backgroundColor = background.color;
              var backgroundAlpha = background.alpha;
              this.value = {
                  name: diagramCanvas.name,
                  label: diagramCanvas.label,
                  width: diagramCanvas.width,
                  height: diagramCanvas.height,
                  category: diagramCanvas.category,
                  summary: diagramCanvas.summary,
                  description: diagramCanvas.description,
                  background: {
                      color: wcardinalUi.isNumber(backgroundColor) ? backgroundColor : 0xffffff,
                      alpha: wcardinalUi.isNumber(backgroundAlpha) ? backgroundAlpha : 1
                  }
              };
          }
          else {
              var canvas = this._canvas;
              this.value = {
                  name: canvas.name,
                  label: canvas.label,
                  width: canvas.width,
                  height: canvas.height,
                  category: canvas.category.default,
                  summary: canvas.summary,
                  description: canvas.description,
                  background: {
                      color: canvas.background.color,
                      alpha: canvas.background.alpha
                  }
              };
          }
          return this;
      };
      Object.defineProperty(EDialogCanvas.prototype, "value", {
          get: function () {
              return {
                  name: this.layoutName.input.value,
                  label: this.layoutLabel.input.value,
                  width: this.layoutWidth.input.value,
                  height: this.layoutHeight.input.value,
                  category: this.selectCategory.value,
                  summary: this.inputSummary.value,
                  description: this.inputDescription.value,
                  background: this.inputBackground.value
              };
          },
          set: function (value) {
              var _a, _b;
              this.layoutName.input.value = value.name;
              this.layoutLabel.input.value = value.label;
              this.layoutWidth.input.value = value.width;
              this.layoutHeight.input.value = value.height;
              this.selectCategory.value = (_b = (_a = value.category) !== null && _a !== void 0 ? _a : this._canvas.category.default) !== null && _b !== void 0 ? _b : null;
              this.inputSummary.value = value.summary;
              this.inputDescription.value = value.description;
              this.inputBackground.value.color = value.background.color;
              this.inputBackground.value.alpha = value.background.alpha;
          },
          enumerable: false,
          configurable: true
      });
      EDialogCanvas.prototype.getResolvedValue = function () {
          return this.value;
      };
      EDialogCanvas.prototype.getType = function () {
          return "EDialogCanvas";
      };
      return EDialogCanvas;
  }(wcardinalUi.DDialogLayered));

  var toOptions = function (options) {
      var _a, _b, _c, _d, _e;
      (_a = options.width) !== null && _a !== void 0 ? _a : (options.width = 200);
      (_b = options.height) !== null && _b !== void 0 ? _b : (options.height = 30);
      (_c = options.padding) !== null && _c !== void 0 ? _c : (options.padding = 0);
      (_d = options.corner) !== null && _d !== void 0 ? _d : (options.corner = { mask: "BOTTOM" });
      (_e = options.shadow) !== null && _e !== void 0 ? _e : (options.shadow = "WEAK");
      return options;
  };
  var EEditorCanvas = /** @class */ (function (_super) {
      __extends(EEditorCanvas, _super);
      function EEditorCanvas(options) {
          var _this = _super.call(this, toOptions(options)) || this;
          _this._icons = options.icons;
          var diagram = options.diagram;
          _this._diagram = diagram;
          diagram.on("change", function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  _this.inputName.value = canvas.name;
              }
          });
          diagram.on("set", function (canvas) {
              _this.inputName.value = canvas.name;
              _this.show();
          });
          diagram.on("unset", function (canvas) {
              _this.hide();
          });
          _this._canvas = options.canvas;
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              y: "padding",
              width: "padding",
              height: "padding",
              margin: 0,
              children: [_this.inputName, _this.buttonEditor]
          }));
          _this.hide();
          return _this;
      }
      Object.defineProperty(EEditorCanvas.prototype, "inputName", {
          get: function () {
              var result = this._inputName;
              if (result == null) {
                  result = this.newInputName();
                  this._inputName = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCanvas.prototype.newInputName = function () {
          var _this = this;
          return new wcardinalUi.DInputText({
              weight: 1,
              background: {
                  color: null
              },
              border: {
                  color: null
              },
              corner: {
                  mask: wcardinalUi.DCornerMask.ALL & ~wcardinalUi.DCornerMask.TOP_LEFT
              },
              on: {
                  change: function (value) {
                      _this.onInputNameChange(value);
                  }
              }
          });
      };
      EEditorCanvas.prototype.onInputNameChange = function (value) {
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          if (canvas != null && canvas.name !== value) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentName(diagram, canvas, value));
          }
      };
      Object.defineProperty(EEditorCanvas.prototype, "buttonEditor", {
          get: function () {
              var result = this._buttonEditor;
              if (result == null) {
                  result = this.newButtonEditor();
                  this._buttonEditor = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCanvas.prototype.newButtonEditor = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_canvas
              },
              on: {
                  active: function (emitter) {
                      _this.onButtonEditorActive(emitter);
                  }
              }
          });
      };
      EEditorCanvas.prototype.onButtonEditorActive = function (opener) {
          var _this = this;
          this.dialogEditor.then(function (dialogEditor) {
              var diagram = _this._diagram;
              dialogEditor
                  .reset(diagram)
                  .open(opener)
                  .then(function (value) {
                  var canvas = diagram.canvas;
                  if (canvas != null) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentAll(diagram, canvas, value.name, value.label, value.width, value.height, value.category, value.summary, value.description, value.background.color, value.background.alpha));
                  }
              });
          });
      };
      Object.defineProperty(EEditorCanvas.prototype, "dialogEditor", {
          get: function () {
              var result = this._dialogEditor;
              if (result == null) {
                  result = this.newDialogEditor();
                  this._dialogEditor = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCanvas.prototype.newDialogEditor = function () {
          return this._canvas.get().then(function (canvas) {
              return new EDialogCanvas({
                  canvas: canvas
              });
          });
      };
      EEditorCanvas.prototype.render = function (renderer) {
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          if (canvas != null) {
              var position = canvas.position;
              this.position.set(position.x, position.y - this.height);
              this.updateTransform();
          }
          _super.prototype.render.call(this, renderer);
      };
      EEditorCanvas.prototype.getType = function () {
          return "EEditorCanvas";
      };
      return EEditorCanvas;
  }(wcardinalUi.DBoard));

  var textFormat = function (value) {
      return "".concat(+value.toFixed(2));
  };
  var textFormatDegree = function (value) {
      return textFormat((value / Math.PI) * 180);
  };
  var textUnformatDegree = function (text) {
      return (parseFloat(text) / 180) * Math.PI;
  };
  var EEditorCoordinate = /** @class */ (function (_super) {
      __extends(EEditorCoordinate, _super);
      function EEditorCoordinate(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          _this._selection = options.selection;
          _this._workRectangle = new pixi_js.Rectangle();
          // Input updater
          _this._updateInputShape = null;
          _this._updateInputId = null;
          _this._isUpdateInputShapeChanged = false;
          _this._renderInputsBound = function () {
              _this.renderInputs();
          };
          //
          _this.addChild(_this.newTextLabel());
          _this.addChild(_this.inputId);
          _this.addChild(_this.inputPositionX);
          _this.addChild(_this.inputPositionY);
          _this.addChild(_this.inputPositionLeft);
          _this.addChild(_this.inputPositionTop);
          _this.addChild(_this.inputSizeX);
          _this.addChild(_this.inputSizeY);
          _this.addChild(_this.inputRotation);
          _this.addChild(_this.inputSkew);
          _this.addChild(_this.layoutAlignHorizontally);
          _this.addChild(_this.layoutAlignVertically);
          //
          var selection = _this._selection;
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorCoordinate.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputId", {
          get: function () {
              var result = this._inputId;
              if (result == null) {
                  result = this.newInputId();
                  this._inputId = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputId = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputIdLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          _this._selection.setId(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputPositionX", {
          get: function () {
              var result = this._inputPositionX;
              if (result == null) {
                  result = this.newInputPositionX();
                  this._inputPositionX = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputPositionX = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputPositionXLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setPositionX(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputPositionY", {
          get: function () {
              var result = this._inputPositionY;
              if (result == null) {
                  result = this.newInputPositionY();
                  this._inputPositionY = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputPositionY = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputPositionYLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setPositionY(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputPositionLeft", {
          get: function () {
              var result = this._inputPositionLeft;
              if (result == null) {
                  result = this.newInputPositionLeft();
                  this._inputPositionLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputPositionLeft = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputPositionLeftLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setPositionLeft(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputPositionTop", {
          get: function () {
              var result = this._inputPositionTop;
              if (result == null) {
                  result = this.newInputPositionTop();
                  this._inputPositionTop = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputPositionTop = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputPositionTopLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setPositionTop(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputSizeX", {
          get: function () {
              var result = this._inputSizeX;
              if (result == null) {
                  result = this.newInputSizeX();
                  this._inputSizeX = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputSizeX = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputSizeXLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setSizeX(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputSizeY", {
          get: function () {
              var result = this._inputSizeY;
              if (result == null) {
                  result = this.newInputSizeY();
                  this._inputSizeY = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputSizeY = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputSizeYLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormat
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setSizeY(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputRotation", {
          get: function () {
              var result = this._inputRotation;
              if (result == null) {
                  result = this.newInputRotation();
                  this._inputRotation = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputRotation = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputRotationLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormatDegree
                  },
                  editing: {
                      unformatter: textUnformatDegree
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setRotation(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "inputSkew", {
          get: function () {
              var result = this._inputSkew;
              if (result == null) {
                  result = this.newInputSkew();
                  this._inputSkew = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newInputSkew = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "padding",
              height: "auto",
              label: {
                  text: {
                      value: this.theme.getInputSkewLabel()
                  }
              },
              input: {
                  weight: 1,
                  step: 1,
                  text: {
                      value: 0,
                      formatter: textFormatDegree
                  },
                  editing: {
                      unformatter: textUnformatDegree
                  },
                  on: {
                      input: function (value) {
                          _this._selection.setSkew(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "layoutAlignHorizontally", {
          get: function () {
              var result = this._layoutAlignHorizontally;
              if (result == null) {
                  result = this.newLayoutAlignHorizontally();
                  this._layoutAlignHorizontally = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newLayoutAlignHorizontally = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  this.buttonAlignLeft,
                  this.buttonAlignCenter,
                  this.buttonAlignRight,
                  this.buttonDistributeHorizontally,
                  this.buttonDistributeVertically,
                  this.buttonLock,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "layoutAlignVertically", {
          get: function () {
              var result = this._layoutAlignVertically;
              if (result == null) {
                  result = this.newLayoutAlignVertically();
                  this._layoutAlignVertically = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newLayoutAlignVertically = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  this.buttonAlignTop,
                  this.buttonAlignMiddle,
                  this.buttonAlignBottom,
                  this.buttonRotateLeft,
                  this.buttonRotateRight,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignLeft", {
          get: function () {
              var result = this._buttonAlignLeft;
              if (result == null) {
                  result = this.newButtonAlignLeft();
                  this._buttonAlignLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignLeft = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_left
              },
              title: this.theme.getButtonAlignLeftTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignLeft();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignCenter", {
          get: function () {
              var result = this._buttonAlignCenter;
              if (result == null) {
                  result = this.newButtonAlignCenter();
                  this._buttonAlignCenter = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignCenter = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_center
              },
              title: this.theme.getButtonAlignCenterTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignCenter();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignRight", {
          get: function () {
              var result = this._buttonAlignRight;
              if (result == null) {
                  result = this.newButtonAlignRight();
                  this._buttonAlignRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignRight = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_right
              },
              title: this.theme.getButtonAlignRightTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignRight();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignTop", {
          get: function () {
              var result = this._buttonAlignTop;
              if (result == null) {
                  result = this.newButtonAlignTop();
                  this._buttonAlignTop = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignTop = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_top
              },
              title: this.theme.getButtonAlignTopTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignTop();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignMiddle", {
          get: function () {
              var result = this._buttonAlignMiddle;
              if (result == null) {
                  result = this.newButtonAlignMiddle();
                  this._buttonAlignMiddle = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignMiddle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_middle
              },
              title: this.theme.getButtonAlignMiddleTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignMiddle();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonAlignBottom", {
          get: function () {
              var result = this._buttonAlignBottom;
              if (result == null) {
                  result = this.newButtonAlignBottom();
                  this._buttonAlignBottom = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonAlignBottom = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_align_bottom
              },
              title: this.theme.getButtonAlignBottomTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.alignBottom();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonDistributeHorizontally", {
          get: function () {
              var result = this._buttonDistributeHorizontally;
              if (result == null) {
                  result = this.newButtonDistributeHorizontally();
                  this._buttonDistributeHorizontally = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonDistributeHorizontally = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_distribute_horizontally
              },
              title: this.theme.getButtonDistributeHorizontallyTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.distributeHorizontally();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonDistributeVertically", {
          get: function () {
              var result = this._buttonDistributeVertically;
              if (result == null) {
                  result = this.newButtonDistributeVertically();
                  this._buttonDistributeVertically = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonDistributeVertically = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_distribute_vertically
              },
              title: this.theme.getButtonDistributeVerticallyTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      selection.saveForTranslate();
                      selection.distributeVertically();
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonRotateLeft", {
          get: function () {
              var result = this._buttonRotateLeft;
              if (result == null) {
                  result = this.newButtonRotateLeft();
                  this._buttonRotateLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonRotateLeft = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_rotate_left
              },
              title: this.theme.getButtonRotateLeftTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      if (selection.prepareRotate()) {
                          selection.saveForRotate();
                          selection.rotate(-0.5 * Math.PI);
                          selection.finalize();
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonRotateRight", {
          get: function () {
              var result = this._buttonRotateRight;
              if (result == null) {
                  result = this.newButtonRotateRight();
                  this._buttonRotateRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonRotateRight = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_coordinate_rotate_right
              },
              title: this.theme.getButtonRotateRightTitle(),
              on: {
                  active: function () {
                      var selection = _this._selection;
                      if (selection.prepareRotate()) {
                          selection.saveForRotate();
                          selection.rotate(+0.5 * Math.PI);
                          selection.finalize();
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorCoordinate.prototype, "buttonLock", {
          get: function () {
              var result = this._buttonLock;
              if (result == null) {
                  result = this.newButtonLock();
                  this._buttonLock = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorCoordinate.prototype.newButtonLock = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheck({
              theme: "EButtonEditorLock",
              on: {
                  active: function () {
                      _this._selection.lockCapability(wcardinalUi.EShapeCapability.COORDINATE);
                  },
                  inactive: function () {
                      _this._selection.unlockCapability(wcardinalUi.EShapeCapability.COORDINATE);
                  }
              }
          });
      };
      EEditorCoordinate.prototype.onSelectionChange = function (selection) {
          var last = selection.last();
          this.state.isDisabled = last == null;
          var hasPositionCapability = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.POSITION);
          this.inputPositionX.state.isEnabled = hasPositionCapability;
          this.inputPositionY.state.isEnabled = hasPositionCapability;
          this.inputPositionLeft.state.isEnabled = hasPositionCapability;
          this.inputPositionTop.state.isEnabled = hasPositionCapability;
          this.inputRotation.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.ROTATION);
          this.inputSizeX.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.WIDTH);
          this.inputSizeY.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.HEIGHT);
          this.inputSkew.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.SKEW);
          this.buttonLock.state.isActive = this.isLocked(last);
          this.updateInputs(selection.get());
      };
      EEditorCoordinate.prototype.isLocked = function (last) {
          if (last == null) {
              return false;
          }
          var capability = last.getCapability();
          if (capability == null) {
              return false;
          }
          var target = wcardinalUi.EShapeCapability.COORDINATE;
          if (capability.locked & target) {
              return true;
          }
          return false;
      };
      EEditorCoordinate.prototype.renderInputs = function () {
          this._updateInputId = null;
          if (this._isUpdateInputShapeChanged) {
              this._isUpdateInputShapeChanged = false;
              var shape = this._updateInputShape;
              if (shape != null) {
                  var transform = shape.transform;
                  var position = transform.position;
                  var size = shape.size;
                  this.inputId.input.value = shape.id;
                  this.inputPositionX.input.value = position.x;
                  this.inputPositionY.input.value = position.y;
                  this.inputSizeX.input.value = size.x;
                  this.inputSizeY.input.value = size.y;
                  this.inputRotation.input.value = transform.rotation;
                  this.inputSkew.input.value = transform.skew.x;
                  var rectangle = this._workRectangle;
                  shape.getBoundsLocal(false, rectangle);
                  this.inputPositionLeft.input.value = rectangle.x;
                  this.inputPositionTop.input.value = rectangle.y;
              }
              this._updateInputId = window.setTimeout(this._renderInputsBound, 100);
          }
      };
      EEditorCoordinate.prototype.updateInputs = function (shapes) {
          var shape = 0 < shapes.length ? shapes[shapes.length - 1] : null;
          this._updateInputShape = shape;
          this._isUpdateInputShapeChanged = true;
          if (this._updateInputId == null) {
              this.renderInputs();
          }
      };
      EEditorCoordinate.prototype.getType = function () {
          return "EEditorCoordinate";
      };
      return EEditorCoordinate;
  }(wcardinalUi.DLayoutVertical));

  var EEditorDataMapping = /** @class */ (function (_super) {
      __extends(EEditorDataMapping, _super);
      function EEditorDataMapping(options) {
          var _this = _super.call(this, options) || this;
          // Selection
          var selection = options.selection;
          _this._selection = selection;
          // Icons
          _this._icons = options.icons;
          // Layout
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [
                  _this.newTextLabel(),
                  _this.buttonNew,
                  _this.buttonDelete,
                  _this.buttonBringForward,
                  _this.buttonSendBackward
              ]
          }));
          _this.addChild(_this.listDataMappingValue);
          // Initialize
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          var listDataMappingValue = _this.listDataMappingValue;
          listDataMappingValue.selection.on("change", function () {
              _this.onListDataMappingValueSelectionChange(listDataMappingValue);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorDataMapping.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorDataMapping.prototype, "buttonNew", {
          get: function () {
              var result = this._buttonNew;
              if (result == null) {
                  result = this.newButtonNew();
                  this._buttonNew = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.theme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorDataMapping.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          this.dialogDataMappingValue
              .set(null, this._selection.last())
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  _this._selection.addDataMappingValue(value);
              }
          });
      };
      Object.defineProperty(EEditorDataMapping.prototype, "buttonDelete", {
          get: function () {
              var result = this._buttonDelete;
              if (result == null) {
                  result = this.newButtonDelete();
                  this._buttonDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.theme.getButtonDeleteTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var first = _this.listDataMappingValue.selection.first;
                      if (first != null) {
                          _this._selection.removeDataMappingValue(first);
                      }
                  }
              }
          });
      };
      EEditorDataMapping.prototype.onListDataMappingValueSelectionChangeButtonDelete = function (listDataMappingValue) {
          this.buttonDelete.state.isDisabled = listDataMappingValue.data.selection.isEmpty();
      };
      Object.defineProperty(EEditorDataMapping.prototype, "buttonBringForward", {
          get: function () {
              var result = this._buttonBringForward;
              if (result == null) {
                  result = this.newButtonBringForward();
                  this._buttonBringForward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonBringForwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listDataMappingValue = _this.listDataMappingValue;
                      var first = listDataMappingValue.data.selection.first;
                      var items = listDataMappingValue.data.items;
                      if (first != null && items[0] !== first) {
                          _this._selection.bringDataMappingValueForward(first);
                      }
                  }
              }
          });
      };
      EEditorDataMapping.prototype.onListDataMappingValueSelectionChangeButtonBringForward = function (listDataMappingValue) {
          var first = listDataMappingValue.data.selection.first;
          var items = listDataMappingValue.data.items;
          this.buttonBringForward.state.isDisabled = first == null || items[0] === first;
      };
      Object.defineProperty(EEditorDataMapping.prototype, "buttonSendBackward", {
          get: function () {
              var result = this._buttonSendBackward;
              if (result == null) {
                  result = this.newButtonSendBackward();
                  this._buttonSendBackward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonSendBackwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listDataMappingValue = _this.listDataMappingValue;
                      var first = listDataMappingValue.data.selection.first;
                      var items = listDataMappingValue.data.items;
                      if (first != null && items[items.length - 1] !== first) {
                          _this._selection.sendDataMappingValueBackward(first);
                      }
                  }
              }
          });
      };
      EEditorDataMapping.prototype.onListDataMappingValueSelectionChangeButtonSendBackward = function (listDataMappingValue) {
          var first = listDataMappingValue.data.selection.first;
          var items = listDataMappingValue.data.items;
          this.buttonSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      Object.defineProperty(EEditorDataMapping.prototype, "dialogDataMappingValue", {
          get: function () {
              var result = this._dialogDataMappingValue;
              if (result == null) {
                  result = this.newDialogDataMappingValue();
                  this._dialogDataMappingValue = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newDialogDataMappingValue = function () {
          return new EDialogDataMappingValue();
      };
      Object.defineProperty(EEditorDataMapping.prototype, "listDataMappingValue", {
          get: function () {
              var result = this._listDataMappingValue;
              if (result == null) {
                  result = this.newListDataMappingValue();
                  this._listDataMappingValue = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorDataMapping.prototype.newListDataMappingValue = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      var source = value[0];
                      var destination = value[1];
                      var initial = value[2];
                      if (0 < destination.length) {
                          if (0 < initial.length) {
                              return "".concat(source, " -> ").concat(destination, ", ").concat(initial);
                          }
                          else {
                              return "".concat(source, " -> ").concat(destination);
                          }
                      }
                      else {
                          if (0 < initial.length) {
                              return "".concat(source, " -> ").concat(initial);
                          }
                          else {
                              return "".concat(source);
                          }
                      }
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onListDataMappingValueDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorDataMapping.prototype.onListDataMappingValueDblClick = function (e, _, item, list) {
          var _this = this;
          var oldValue = item.value;
          if (oldValue != null) {
              this.dialogDataMappingValue
                  .set(oldValue, this._selection.last())
                  .open(item)
                  .then(function (newValue) {
                  if (newValue != null) {
                      _this._selection.replaceDataMappingValue(oldValue, newValue, list);
                  }
              });
          }
      };
      EEditorDataMapping.prototype.onSelectionChangeListDataMappingValue = function (selection) {
          var _a, _b;
          var listDataMappingValue = this.listDataMappingValue;
          listDataMappingValue.data.items = ((_b = (_a = selection.last()) === null || _a === void 0 ? void 0 : _a.data.getMapping()) === null || _b === void 0 ? void 0 : _b.values) || [];
          this.onListDataMappingValueSelectionChange(listDataMappingValue);
      };
      EEditorDataMapping.prototype.onSelectionChange = function (selection) {
          this.state.isDisabled = !wcardinalUi.EShapeCapabilities.contains(selection.last(), wcardinalUi.EShapeCapability.DATA_MAPPING);
          this.onSelectionChangeListDataMappingValue(selection);
      };
      EEditorDataMapping.prototype.onListDataMappingValueSelectionChange = function (listDataMappingValue) {
          this.onListDataMappingValueSelectionChangeButtonDelete(listDataMappingValue);
          this.onListDataMappingValueSelectionChangeButtonBringForward(listDataMappingValue);
          this.onListDataMappingValueSelectionChangeButtonSendBackward(listDataMappingValue);
      };
      EEditorDataMapping.prototype.getType = function () {
          return "EEditorDataMapping";
      };
      return EEditorDataMapping;
  }(wcardinalUi.DLayoutVertical));

  var EEditorData = /** @class */ (function (_super) {
      __extends(EEditorData, _super);
      function EEditorData(options) {
          var _this = _super.call(this, options) || this;
          // Selection
          var selection = options.selection;
          _this._selection = selection;
          // Icons
          _this._icons = options.icons;
          // Layout
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [
                  _this.newTextLabel(),
                  _this.buttonNew,
                  _this.buttonDelete,
                  _this.buttonBringForward,
                  _this.buttonSendBackward
              ]
          }));
          _this.addChild(_this.listDataValue);
          // Initialize
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          var listDataValue = _this.listDataValue;
          listDataValue.selection.on("change", function () {
              _this.onListDataValueSelectionChange(listDataValue);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorData.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorData.prototype, "buttonNew", {
          get: function () {
              var result = this._buttonNew;
              if (result == null) {
                  result = this.newButtonNew();
                  this._buttonNew = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.theme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorData.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          this.dialogDataValue
              .reset()
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  _this._selection.addDataValue(value);
              }
          });
      };
      Object.defineProperty(EEditorData.prototype, "buttonDelete", {
          get: function () {
              var result = this._buttonDelete;
              if (result == null) {
                  result = this.newButtonDelete();
                  this._buttonDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.theme.getButtonDeleteTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var first = _this.listDataValue.selection.first;
                      if (first != null) {
                          _this._selection.removeDataValue(first);
                      }
                  }
              }
          });
      };
      EEditorData.prototype.onListDataValueSelectionChangeButtonDelete = function (listDataValue) {
          this.buttonDelete.state.isDisabled = listDataValue.data.selection.isEmpty();
      };
      Object.defineProperty(EEditorData.prototype, "buttonBringForward", {
          get: function () {
              var result = this._buttonBringForward;
              if (result == null) {
                  result = this.newButtonBringForward();
                  this._buttonBringForward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonBringForwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listDataValue = _this.listDataValue;
                      var first = listDataValue.data.selection.first;
                      var items = listDataValue.data.items;
                      if (first != null && items[0] !== first) {
                          _this._selection.bringDataValueForward(first);
                      }
                  }
              }
          });
      };
      EEditorData.prototype.onListDataValueSelectionChangeButtonBringForward = function (listDataValue) {
          var first = listDataValue.data.selection.first;
          var items = listDataValue.data.items;
          this.buttonBringForward.state.isDisabled = first == null || items[0] === first;
      };
      Object.defineProperty(EEditorData.prototype, "buttonSendBackward", {
          get: function () {
              var result = this._buttonSendBackward;
              if (result == null) {
                  result = this.newButtonSendBackward();
                  this._buttonSendBackward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonSendBackwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listDataValue = _this.listDataValue;
                      var first = listDataValue.data.selection.first;
                      var items = listDataValue.data.items;
                      if (first != null && items[items.length - 1] !== first) {
                          _this._selection.sendDataValueBackward(first);
                      }
                  }
              }
          });
      };
      EEditorData.prototype.onListDataValueSelectionChangeButtonSendBackward = function (listDataValue) {
          var first = listDataValue.data.selection.first;
          var items = listDataValue.data.items;
          this.buttonSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      Object.defineProperty(EEditorData.prototype, "dialogDataValue", {
          get: function () {
              var result = this._dialogDataValue;
              if (result == null) {
                  result = this.newDialogDataValue();
                  this._dialogDataValue = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newDialogDataValue = function () {
          return new EDialogDataValue();
      };
      Object.defineProperty(EEditorData.prototype, "listDataValue", {
          get: function () {
              var result = this._listDataValue;
              if (result == null) {
                  result = this.newListDataValue();
                  this._listDataValue = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorData.prototype.newListDataValue = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      var type = value.type;
                      var as = value.as;
                      var prefix = 0 < as.length ? "".concat(as, ": ") : "";
                      switch (type) {
                          case wcardinalUi.EShapeDataValueType.BOOLEAN:
                          case wcardinalUi.EShapeDataValueType.BOOLEAN_ARRAY:
                          case wcardinalUi.EShapeDataValueType.NUMBER:
                          case wcardinalUi.EShapeDataValueType.NUMBER_ARRAY:
                          case wcardinalUi.EShapeDataValueType.STRING:
                          case wcardinalUi.EShapeDataValueType.STRING_ARRAY:
                          case wcardinalUi.EShapeDataValueType.OBJECT:
                          case wcardinalUi.EShapeDataValueType.OBJECT_ARRAY:
                              return prefix + value.id;
                          case wcardinalUi.EShapeDataValueType.TICKER:
                              return prefix + "Ticker ".concat(value.initial, " ms");
                          default:
                              var extension = wcardinalUi.EShapeDataValueExtensions.get(type);
                              if (extension) {
                                  return prefix + extension.label;
                              }
                              return prefix + "Unknown";
                      }
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onListDataValueDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorData.prototype.onListDataValueDblClick = function (e, _, item, list) {
          var _this = this;
          var oldValue = item.value;
          if (oldValue != null) {
              var dialogDataValue = this.dialogDataValue;
              dialogDataValue.value = oldValue;
              dialogDataValue.open(item).then(function (newValue) {
                  if (newValue != null) {
                      _this._selection.replaceDataValue(oldValue, newValue, list);
                  }
              });
          }
      };
      EEditorData.prototype.onSelectionChangeListDataValue = function (selection) {
          var _a;
          var listDataValue = this.listDataValue;
          listDataValue.data.items = ((_a = selection.last()) === null || _a === void 0 ? void 0 : _a.data.values) || [];
          this.onListDataValueSelectionChange(listDataValue);
      };
      EEditorData.prototype.onSelectionChange = function (selection) {
          this.state.isDisabled = selection.isEmpty();
          this.onSelectionChangeListDataValue(selection);
      };
      EEditorData.prototype.onListDataValueSelectionChange = function (listDataValue) {
          this.onListDataValueSelectionChangeButtonDelete(listDataValue);
          this.onListDataValueSelectionChangeButtonBringForward(listDataValue);
          this.onListDataValueSelectionChangeButtonSendBackward(listDataValue);
      };
      EEditorData.prototype.getType = function () {
          return "EEditorData";
      };
      return EEditorData;
  }(wcardinalUi.DLayoutVertical));

  var EEditorLayerItem = /** @class */ (function (_super) {
      __extends(EEditorLayerItem, _super);
      function EEditorLayerItem(iconsEye, iconsEyeSlash, work, data, options) {
          var _this = _super.call(this, data, options) || this;
          _this._iconsEye = iconsEye;
          _this._iconsEyeSlash = iconsEyeSlash;
          _this._iconsWork = work;
          return _this;
      }
      EEditorLayerItem.prototype.onSelect = function (e, value) {
          if (e != null) {
              var local = this._iconsWork;
              if ("data" in e) {
                  this.toLocal(e.data.global, undefined, local);
                  if (local.x <= this._iconsEye.width + this.padding.getLeft()) {
                      this.emit("eyeclick", e, value, this);
                      return;
                  }
              }
          }
          _super.prototype.onSelect.call(this, e, value);
      };
      EEditorLayerItem.prototype.onDblClick = function (e, interactionManager) {
          var global = wcardinalUi.UtilPointerEvent.toGlobal(e, interactionManager, this._iconsWork);
          var local = this.toLocal(global, undefined, global);
          if (this._iconsEye.width + this.padding.getLeft() < local.x) {
              return _super.prototype.onDblClick.call(this, e, interactionManager);
          }
          else {
              this.emit("eyedblclick", e, interactionManager, this);
              return false;
          }
      };
      return EEditorLayerItem;
  }(wcardinalUi.DListItem));

  var EEditorLayer = /** @class */ (function (_super) {
      __extends(EEditorLayer, _super);
      function EEditorLayer(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          _this._diagram = options.diagram;
          _this._selection = options.selection;
          _this._isInitialized = false;
          _this._canvas = null;
          return _this;
      }
      EEditorLayer.prototype.show = function () {
          _super.prototype.show.call(this);
          this.onShow();
          return this;
      };
      EEditorLayer.prototype.onShow = function () {
          if (!this._isInitialized) {
              this._isInitialized = true;
              this.initLayout();
          }
          this.onCanvasChange(this._diagram.canvas, true);
      };
      EEditorLayer.prototype.initLayout = function () {
          var _this = this;
          this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [
                  this.newTextLabel(),
                  this.buttonNew,
                  this.buttonDelete,
                  this.buttonBringForward,
                  this.buttonSendBackward
              ]
          }));
          this.addChild(this.list);
          // Layer change even handling
          var diagram = this._diagram;
          diagram.on("set", function (newCanvas) {
              if (_this.isShown()) {
                  _this.onCanvasChange(newCanvas, false);
              }
          });
          diagram.on("ready", function () {
              if (_this.isShown()) {
                  _this.onLayerChange();
              }
          });
          diagram.on("unset", function () {
              if (_this.isShown()) {
                  _this.onCanvasChange(null, false);
              }
          });
      };
      EEditorLayer.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorLayer.prototype, "onLayerChangeBound", {
          get: function () {
              var _this = this;
              var result = this._onLayerChangeBound;
              if (result == null) {
                  result = function () {
                      _this.onLayerChange();
                  };
                  this._onLayerChangeBound = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorLayer.prototype, "dialog", {
          get: function () {
              var result = this._dialog;
              if (result == null) {
                  result = this.newDialog();
                  this._dialog = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newDialog = function () {
          return new EDialogLayer();
      };
      Object.defineProperty(EEditorLayer.prototype, "buttonNew", {
          get: function () {
              var result = this._buttonNew;
              if (result == null) {
                  result = this.newButtonNew();
                  this._buttonNew = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newButtonNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.theme.getButtonNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonNewActive(emitter);
                  }
              }
          });
      };
      EEditorLayer.prototype.onButtonNewActive = function (opener) {
          var _this = this;
          var canvas = this._canvas;
          if (canvas) {
              var dialogLayer = this.dialog;
              dialogLayer
                  .reset(canvas.width, canvas.height)
                  .open(opener)
                  .then(function (value) {
                  if (value) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandLayerCreate(value, canvas.layer, _this._selection));
                  }
              });
          }
      };
      Object.defineProperty(EEditorLayer.prototype, "buttonDelete", {
          get: function () {
              var result = this._buttonDelete;
              if (result == null) {
                  result = this.newButtonDelete();
                  this._buttonDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newButtonDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.theme.getButtonDeleteTitle(),
              on: {
                  active: function () {
                      var canvas = _this._canvas;
                      if (canvas) {
                          var layer = canvas.layer;
                          var size = layer.size();
                          var active = layer.active;
                          if (1 < size && active) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandLayerDelete(active, canvas.layer, _this._selection));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorLayer.prototype, "buttonBringForward", {
          get: function () {
              var result = this._buttonBringForward;
              if (result == null) {
                  result = this.newButtonBringForward();
                  this._buttonBringForward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonBringForwardTitle(),
              on: {
                  active: function () {
                      var canvas = _this._canvas;
                      if (canvas) {
                          var layer = canvas.layer;
                          var active = layer.active;
                          if (active) {
                              var index = layer.children.indexOf(active);
                              wcardinalUi.DControllers.getCommandController().push(new ECommandLayerBringForward(index, layer));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorLayer.prototype, "buttonSendBackward", {
          get: function () {
              var result = this._buttonSendBackward;
              if (result == null) {
                  result = this.newButtonSendBackward();
                  this._buttonSendBackward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonSendBackwardTitle(),
              on: {
                  active: function () {
                      var canvas = _this._canvas;
                      if (canvas) {
                          var layer = canvas.layer;
                          var active = layer.active;
                          if (active) {
                              var index = layer.children.indexOf(active);
                              wcardinalUi.DControllers.getCommandController().push(new ECommandLayerSendBackward(index, layer));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorLayer.prototype, "list", {
          get: function () {
              var result = this._list;
              if (result == null) {
                  result = this.newList();
                  this._list = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorLayer.prototype.newList = function () {
          var _this = this;
          var icons = this._icons;
          var iconsEye = icons.eye;
          var iconsEyeSlash = icons.eye_slash;
          var work = new pixi_js.Point();
          var result = new wcardinalUi.DList({
              x: "padding",
              width: "padding",
              weight: 1,
              data: {
                  selection: {
                      on: {
                          change: function () {
                              _this.onListSelectionChange();
                          }
                      }
                  },
                  toImage: function (layer) {
                      return layer.visible ? iconsEye : iconsEyeSlash;
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new EEditorLayerItem(iconsEye, iconsEyeSlash, work, data, {
                          on: {
                              eyeclick: function (e, value, item) {
                                  if (value) {
                                      if (value.visible) {
                                          value.visible = false;
                                          item.image = iconsEyeSlash;
                                      }
                                      else {
                                          value.visible = true;
                                          item.image = iconsEye;
                                      }
                                  }
                              },
                              dblclick: function (e, _, item) {
                                  _this.onListDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              },
              on: {
                  keydown: function (e) {
                      if (wcardinalUi.UtilKeyboardEvent.isDeleteKey(e)) {
                          var canvas = _this._canvas;
                          if (canvas) {
                              var layer = canvas.layer;
                              var size = layer.size();
                              var active = layer.active;
                              if (1 < size && active) {
                                  wcardinalUi.DControllers.getCommandController().push(new ECommandLayerDelete(active, layer, _this._selection));
                              }
                          }
                      }
                  }
              }
          });
          return result;
      };
      EEditorLayer.prototype.onListDblClick = function (e, _, item, list) {
          var canvas = this._canvas;
          if (canvas) {
              var layerActive_1 = canvas.layer.active;
              if (layerActive_1) {
                  var oldValue_1 = EDialogLayerValue.from(layerActive_1);
                  var dialogLayer = this.dialog;
                  dialogLayer.value = oldValue_1;
                  dialogLayer.open(item).then(function (newValue) {
                      if (newValue && !newValue.isEqual(oldValue_1)) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandLayerChange(layerActive_1, newValue, canvas.layer));
                      }
                  });
              }
          }
      };
      EEditorLayer.prototype.onListLayerChange = function () {
          var listLayer = this.list;
          var canvas = this._canvas;
          if (canvas) {
              var layerContainer = canvas.layer;
              var layers = layerContainer.children;
              var layerActive = layerContainer.active;
              var items = listLayer.data.items;
              for (var i = 0, imax = layers.length; i < imax; ++i) {
                  items[i] = layers[imax - 1 - i];
              }
              items.length = layers.length;
              listLayer.update(true);
              if (layerActive != null) {
                  listLayer.data.selection.clearAndAdd(layerActive);
              }
              else {
                  listLayer.data.selection.clear();
              }
          }
          else {
              listLayer.data.items = [];
          }
      };
      EEditorLayer.prototype.onListSelectionChange = function () {
          var first = this.list.data.selection.first;
          if (first) {
              var canvas = this._canvas;
              if (canvas) {
                  var layerActive = canvas.layer.active;
                  if (layerActive !== first) {
                      // Unselect
                      var selection = this._selection;
                      if (!selection.isEmpty()) {
                          var before = selection.store();
                          if (selection.clear()) {
                              var after = selection.store();
                              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                          }
                      }
                      // Change the active layer
                      canvas.layer.active = first;
                  }
              }
          }
      };
      EEditorLayer.prototype.onCanvasChange = function (newCanvas, forcibly) {
          var oldCanvas = this._canvas;
          if (newCanvas !== this._canvas) {
              var onLayerChangeBound = this.onLayerChangeBound;
              if (oldCanvas != null) {
                  oldCanvas.layer.off("change", onLayerChangeBound);
              }
              this._canvas = newCanvas;
              if (newCanvas != null) {
                  this.state.isDisabled = false;
                  newCanvas.layer.on("change", onLayerChangeBound);
              }
              else {
                  this.state.isDisabled = true;
              }
              this.onLayerChange();
          }
          else if (forcibly) {
              this.onLayerChange();
          }
      };
      EEditorLayer.prototype.isActiveDeletable = function (canvas) {
          if (canvas) {
              return 1 < canvas.layer.size();
          }
          return false;
      };
      EEditorLayer.prototype.isActiveNotLast = function (canvas) {
          if (canvas) {
              var layer = canvas.layer;
              var layers = layer.children;
              var active = layer.active;
              if (active) {
                  return active !== layers[layers.length - 1];
              }
          }
          return false;
      };
      EEditorLayer.prototype.isActiveNotFirst = function (canvas) {
          if (canvas) {
              var layer = canvas.layer;
              var layers = layer.children;
              var active = layer.active;
              if (active) {
                  return active !== layers[0];
              }
          }
          return false;
      };
      EEditorLayer.prototype.onLayerChange = function () {
          // Update buttons
          var canvas = this._canvas;
          this.state.isEnabled = canvas != null;
          this.buttonDelete.state.isEnabled = this.isActiveDeletable(canvas);
          this.buttonSendBackward.state.isEnabled = this.isActiveNotFirst(canvas);
          this.buttonBringForward.state.isEnabled = this.isActiveNotLast(canvas);
          // Update the list
          this.onListLayerChange();
          // Update the modifier
          this._selection.updateModifier();
      };
      EEditorLayer.prototype.getType = function () {
          return "EEditorLayer";
      };
      return EEditorLayer;
  }(wcardinalUi.DLayoutVertical));

  var shapeTypeTheme;
  var getShapeTypeTheme = function () {
      return (shapeTypeTheme !== null && shapeTypeTheme !== void 0 ? shapeTypeTheme : (shapeTypeTheme = wcardinalUi.DThemes.get("FShapeType")));
  };

  var toShapeLabel = function (shape) {
      var id = shape.id;
      if (0 < id.length) {
          return id;
      }
      var shapeType = shape.type;
      if (wcardinalUi.EShapeType.EXTENSION <= shapeType) {
          var extension = EShapeExtensions.get(shapeType);
          if (extension && "name" in extension) {
              var name_1 = extension.name;
              if (name_1 != null) {
                  return name_1;
              }
          }
          return getShapeTypeTheme().getLabel(shapeType);
      }
      else if (shapeType === wcardinalUi.EShapeType.EMBEDDED) {
          if (shape instanceof wcardinalUi.EShapeEmbedded) {
              return shape.name;
          }
          else {
              return getShapeTypeTheme().getLabel(shapeType);
          }
      }
      return getShapeTypeTheme().getLabel(shapeType);
  };

  var EEditorSearchConditionState = {
      NONE: -1,
      UNCONNECTED: 0,
      CONNECTED_PARTIALLY: 1,
      CONNECTED_FULLY: 2
  };

  var EEditorSearchConditionType = {
      NONE: -1
  };

  var toShapeTypeLabel = function (shapeType) {
      if (wcardinalUi.EShapeType.EXTENSION <= shapeType) {
          var extension = EShapeExtensions.get(shapeType);
          if (extension && "name" in extension) {
              var name_1 = extension.name;
              if (name_1 != null) {
                  return name_1;
              }
          }
          return getShapeTypeTheme().getLabel(shapeType);
      }
      return getShapeTypeTheme().getLabel(shapeType);
  };

  var EEditorSearch = /** @class */ (function (_super) {
      __extends(EEditorSearch, _super);
      function EEditorSearch(options) {
          var _a;
          var _this = _super.call(this, options) || this;
          // Selection
          var selection = options.selection;
          _this._selection = selection;
          // Icons
          _this._icons = options.icons;
          // Finder
          _this._finder = options.finder;
          // Interval
          _this._interval = (_a = options.interval) !== null && _a !== void 0 ? _a : 333;
          // Diagram
          var diagram = options.diagram;
          _this._diagram = diagram;
          _this.state.isDisabled = diagram.canvas == null;
          diagram.on("unset", function () {
              _this.list.data.clear();
              _this.state.isDisabled = true;
          });
          diagram.on("set", function () {
              _this.state.isDisabled = false;
          });
          // Layout
          _this.addChild(_this.newTextLabel());
          if (_this._finder != null) {
              _this.addChild(_this.inputSearch);
          }
          else {
              _this.addChild(new wcardinalUi.DLayoutHorizontal({
                  width: "padding",
                  height: "auto",
                  children: [
                      new wcardinalUi.DInputLabel({
                          width: 60,
                          text: {
                              value: _this.theme.getInputIdLabel()
                          }
                      }),
                      _this.inputId
                  ]
              }));
              _this.addChild(new wcardinalUi.DLayoutHorizontal({
                  width: "padding",
                  height: "auto",
                  children: [
                      new wcardinalUi.DInputLabel({
                          width: 60,
                          text: {
                              value: _this.theme.getSelectTypeLabel()
                          }
                      }),
                      _this.selectType
                  ]
              }));
              _this.addChild(new wcardinalUi.DLayoutHorizontal({
                  width: "padding",
                  height: "auto",
                  children: [
                      new wcardinalUi.DInputLabel({
                          width: 60,
                          text: {
                              value: _this.theme.getSelectStateLabel()
                          }
                      }),
                      _this.selectState
                  ]
              }));
              _this.addChild(_this.buttonExecute);
          }
          _this.addChild(_this.list);
          return _this;
      }
      EEditorSearch.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              x: "padding",
              width: "padding",
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorSearch.prototype, "inputSearch", {
          get: function () {
              var _a;
              return ((_a = this._inputSearch) !== null && _a !== void 0 ? _a : (this._inputSearch = this.newInputSearch()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newInputSearch = function () {
          var _this = this;
          return new wcardinalUi.DInputSearch({
              x: "padding",
              width: "padding",
              on: {
                  input: function (newValue) {
                      _this.search(newValue);
                  },
                  enter: function (emitter) {
                      _this.search(emitter.value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorSearch.prototype, "inputId", {
          get: function () {
              var _a;
              return ((_a = this._inputId) !== null && _a !== void 0 ? _a : (this._inputId = this.newInputId()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newInputId = function () {
          var _this = this;
          return new wcardinalUi.DInputText({
              weight: 1,
              on: {
                  enter: function () {
                      _this.buttonExecute.activate();
                  }
              }
          });
      };
      Object.defineProperty(EEditorSearch.prototype, "selectType", {
          get: function () {
              var _a;
              return ((_a = this._selectType) !== null && _a !== void 0 ? _a : (this._selectType = this.newSelectType()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newSelectType = function () {
          return new wcardinalUi.DSelect({
              weight: 1,
              value: EEditorSearchConditionType.NONE,
              menu: {
                  width: "auto",
                  column: 3,
                  fit: false,
                  items: this.newSelectTypeMenuItems()
              }
          });
      };
      EEditorSearch.prototype.newSelectTypeMenuItems = function () {
          var _this = this;
          var result = [
              this.newSelectTypeMenuItem(EEditorSearchConditionType.NONE, this.theme.toTypeLabel(EEditorSearchConditionType.NONE)),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.CIRCLE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.SEMICIRCLE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.RECTANGLE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.RECTANGLE_ROUNDED),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.TRIANGLE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.TRIANGLE_ROUNDED),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.LINE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.CONNECTOR_LINE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.CONNECTOR_ELBOW),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.IMAGE),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.GROUP),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.BAR),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.BUTTON),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.EMBEDDED),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.EMBEDDED_LAYER),
              this.newSelectTypeMenuItemShape(wcardinalUi.EShapeType.EMBEDDED_ACCEPTOR_EDGE)
          ];
          EShapeExtensions.each(function (extension) {
              if ("type" in extension) {
                  result.push(_this.newSelectTypeMenuItemShape(extension.type));
              }
          });
          return result;
      };
      EEditorSearch.prototype.newSelectTypeMenuItem = function (type, label) {
          return {
              width: 200,
              value: type,
              text: {
                  value: label
              }
          };
      };
      EEditorSearch.prototype.newSelectTypeMenuItemShape = function (type) {
          return this.newSelectTypeMenuItem(type, toShapeTypeLabel(type));
      };
      EEditorSearch.prototype.getSelectTypeValue = function () {
          var selectType = this._selectType;
          if (selectType != null) {
              var value = selectType.value;
              if (value != null && 0 <= value) {
                  return value;
              }
          }
          return null;
      };
      Object.defineProperty(EEditorSearch.prototype, "selectState", {
          get: function () {
              var _a;
              return ((_a = this._selectState) !== null && _a !== void 0 ? _a : (this._selectState = this.newSelectState()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newSelectState = function () {
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              weight: 1,
              value: EEditorSearchConditionState.NONE,
              menu: {
                  items: [
                      this.newSelectStateMenuItem(EEditorSearchConditionState.NONE, theme),
                      this.newSelectStateMenuItem(EEditorSearchConditionState.CONNECTED_FULLY, theme),
                      this.newSelectStateMenuItem(EEditorSearchConditionState.CONNECTED_PARTIALLY, theme),
                      this.newSelectStateMenuItem(EEditorSearchConditionState.UNCONNECTED, theme)
                  ]
              }
          });
      };
      EEditorSearch.prototype.newSelectStateMenuItem = function (state, theme) {
          return {
              value: state,
              text: {
                  value: theme.toStateLabel(state)
              }
          };
      };
      EEditorSearch.prototype.getSelectStateValue = function () {
          var result = this.selectState.value;
          if (result != null && 0 <= result) {
              return result;
          }
          return null;
      };
      Object.defineProperty(EEditorSearch.prototype, "buttonExecute", {
          get: function () {
              var _a;
              return ((_a = this._buttonExecute) !== null && _a !== void 0 ? _a : (this._buttonExecute = this.newButtonExecute()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newButtonExecute = function () {
          var _this = this;
          return new wcardinalUi.DButtonPrimary({
              width: "padding",
              text: {
                  value: this.theme.getButtonExecuteTitle()
              },
              image: {
                  source: this._icons.editor_search
              },
              on: {
                  active: function (emitter) {
                      _this.onButtonExecuteActive(emitter);
                  }
              }
          });
      };
      EEditorSearch.prototype.onButtonExecuteActive = function (opener) {
          var _a, _b;
          var indicator = this.indicatorExecute;
          indicator.start();
          var shapes = [];
          var canvas = this._diagram.canvas;
          if (canvas != null) {
              var id_1 = this.inputId.value.trim();
              var type_1 = (_a = this.selectType.value) !== null && _a !== void 0 ? _a : EEditorSearchConditionType.NONE;
              var state_1 = (_b = this.selectState.value) !== null && _b !== void 0 ? _b : EEditorSearchConditionState.NONE;
              canvas.shape.each(function (shape) {
                  if (0 < id_1.length && shape.id.indexOf(id_1) < 0) {
                      return true;
                  }
                  if (type_1 !== EEditorSearchConditionType.NONE && type_1 !== shape.type) {
                      return true;
                  }
                  switch (state_1) {
                      case EEditorSearchConditionState.CONNECTED_FULLY:
                          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                              var edge = shape.edge;
                              var tail = edge.tail.acceptor.shape;
                              var head = edge.head.acceptor.shape;
                              if (tail == null || head == null) {
                                  return true;
                              }
                          }
                          else {
                              if (shape.connector.size() <= 0) {
                                  return true;
                              }
                          }
                          break;
                      case EEditorSearchConditionState.CONNECTED_PARTIALLY:
                          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                              var edge = shape.edge;
                              var tail = edge.tail.acceptor.shape;
                              var head = edge.head.acceptor.shape;
                              if ((tail == null && head == null) || (tail != null && head != null)) {
                                  return true;
                              }
                          }
                          else {
                              return true;
                          }
                          break;
                      case EEditorSearchConditionState.UNCONNECTED:
                          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                              var edge = shape.edge;
                              var tail = edge.tail.acceptor.shape;
                              var head = edge.head.acceptor.shape;
                              if (tail != null || head != null) {
                                  return true;
                              }
                          }
                          else {
                              if (0 < shape.connector.size()) {
                                  return true;
                              }
                          }
                          break;
                  }
                  shapes.push(shape);
                  return true;
              });
          }
          this.list.data.clearAndAddAll(shapes);
          indicator.resolve();
      };
      Object.defineProperty(EEditorSearch.prototype, "indicatorExecute", {
          get: function () {
              var _a;
              return ((_a = this._indicatorExecute) !== null && _a !== void 0 ? _a : (this._indicatorExecute = this.newIndicatorExecute()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newIndicatorExecute = function () {
          return new wcardinalUi.DIndicatorProcessing(this.buttonExecute);
      };
      EEditorSearch.prototype.search = function (word) {
          var _this = this;
          var threshold = 500;
          var searching = this._searching;
          var searched = this._searched;
          var searchedAt = this._searchedAt;
          if (searching !== searched || (searchedAt != null && Date.now() - searchedAt < threshold)) {
              this._requested = word;
              if (this._timeoutId == null) {
                  this._timeoutId = window.setTimeout(function () {
                      _this._timeoutId = null;
                      var newWord = _this._requested;
                      if (newWord != null) {
                          _this._requested = undefined;
                          _this.search(newWord);
                      }
                  }, threshold);
              }
          }
          else {
              var timeoutId = this._timeoutId;
              if (timeoutId != null) {
                  this._timeoutId = null;
                  window.clearTimeout(timeoutId);
              }
              this._searching = word;
              this.doSearch(word).then(function (result) {
                  _this.list.data.clearAndAddAll(result.shapes);
                  _this._searched = result.word;
                  _this._searchedAt = Date.now();
              });
          }
      };
      EEditorSearch.prototype.doSearch = function (word) {
          var finder = this._finder;
          if (finder == null) {
              return Promise.resolve({
                  word: word,
                  shapes: []
              });
          }
          var canvas = this._diagram.canvas;
          if (canvas == null) {
              return Promise.resolve({
                  word: word,
                  shapes: []
              });
          }
          var trimmed = word.trim();
          if (trimmed.length <= 0) {
              return Promise.resolve({
                  word: word,
                  shapes: []
              });
          }
          try {
              var found = finder(canvas, trimmed);
              if (wcardinalUi.isArray(found)) {
                  return Promise.resolve({
                      word: word,
                      shapes: found
                  });
              }
              else {
                  return found.then(function (shapes) {
                      return {
                          word: word,
                          shapes: shapes
                      };
                  }, function () {
                      return {
                          word: word,
                          shapes: []
                      };
                  });
              }
          }
          catch (_a) {
              return Promise.resolve({
                  word: word,
                  shapes: []
              });
          }
      };
      Object.defineProperty(EEditorSearch.prototype, "list", {
          get: function () {
              var _a;
              return ((_a = this._list) !== null && _a !== void 0 ? _a : (this._list = this.newList()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newList = function () {
          var _this = this;
          return new wcardinalUi.DList({
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      return toShapeLabel(value);
                  },
                  toTitle: function (value) {
                      return undefined;
                  },
                  toImage: function (value) {
                      return null;
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              select: function (value, item) {
                                  _this.onListItemDown(value, item);
                              }
                          }
                      });
                  }
              }
          });
      };
      EEditorSearch.prototype.onListItemDown = function (value, item) {
          var shape = value;
          if (shape != null) {
              var canvas = this._diagram.canvas;
              var layer = shape.root.parent;
              if (canvas != null && layer != null) {
                  // Selection
                  var selection = this._selection;
                  var before = selection.store();
                  if (selection.set(shape)) {
                      selection.focus();
                      var after = selection.store();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                  }
                  else {
                      selection.focus();
                  }
                  // Change the active layer
                  var layerActive = canvas.layer.active;
                  if (layerActive !== layer) {
                      canvas.layer.active = layer;
                  }
              }
              else {
                  this.dialogError.open(item);
              }
          }
      };
      Object.defineProperty(EEditorSearch.prototype, "dialogError", {
          get: function () {
              var _a;
              return ((_a = this._dialogError) !== null && _a !== void 0 ? _a : (this._dialogError = this.newDialogError()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newDialogError = function () {
          return new wcardinalUi.DDialogMessage({
              message: this.theme.getDialogErrorLabel()
          });
      };
      Object.defineProperty(EEditorSearch.prototype, "dialogProcessing", {
          get: function () {
              var _a;
              return ((_a = this._dialogProcessing) !== null && _a !== void 0 ? _a : (this._dialogProcessing = this.newDialogProcessing()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorSearch.prototype.newDialogProcessing = function () {
          return new wcardinalUi.DDialogProcessing();
      };
      EEditorSearch.prototype.getType = function () {
          return "EEditorSearch";
      };
      return EEditorSearch;
  }(wcardinalUi.DLayoutVertical));

  var EEDITOR_BUTTON_COUNT = 7;

  var EEditorShape = /** @class */ (function (_super) {
      __extends(EEditorShape, _super);
      function EEditorShape(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          _this._canvas = options.canvas;
          _this._selection = options.selection;
          _this._isInitialized = false;
          var piece = options.piece;
          if (piece) {
              _this._isPieceEnabled = piece.enable;
              _this._pieceExcluder = piece.exclude;
              _this._controller = piece.controller;
          }
          else {
              _this._isPieceEnabled = false;
          }
          _this._isChangeable = options.changeable;
          return _this;
      }
      EEditorShape.prototype.show = function () {
          _super.prototype.show.call(this);
          this.onShow();
          return this;
      };
      EEditorShape.prototype.onShow = function () {
          if (!this._isInitialized) {
              this._isInitialized = true;
              this.initLayout();
          }
          this.onSelectionChange();
      };
      EEditorShape.prototype.initLayout = function () {
          var _this = this;
          new wcardinalUi.DLayoutVertical({
              parent: this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "auto",
              children: [
                  this.layoutChangeTo,
                  this.buttonFill,
                  this.buttonFillColor,
                  this.layoutTexture,
                  this.buttonStroke,
                  this.buttonStrokeColor,
                  this.inputStrokeWidth,
                  this.inputStrokeAlign,
                  this.layoutStrokeSide,
                  this.textCorner,
                  this.inputCornerRadius,
                  this.layoutCorner,
                  this.layoutLine,
                  this.selectLineStyle,
                  this.selectLineType,
                  this.layoutLineTail,
                  this.selectLineTailType,
                  this.layoutLineTailSize,
                  this.buttonLineTailColor,
                  this.inputLineTailMargin,
                  this.layoutLineHead,
                  this.selectLineHeadType,
                  this.layoutLineHeadSize,
                  this.buttonLineHeadColor,
                  this.inputLineHeadMargin
              ]
          });
          // Selection change handling
          this._selection.on("change", function () {
              if (_this.isShown()) {
                  _this.onSelectionChange();
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutChangeTo", {
          get: function () {
              var result = this._layoutChangeTo;
              if (result === undefined) {
                  result = this._isChangeable !== false ? this.newLayoutChangeTo() : null;
                  this._layoutChangeTo = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutChangeTo = function () {
          var _this = this;
          var children = [
              this.newTextChangeToLabel(),
              this.buttonCircle,
              this.buttonSemicircle,
              this.buttonRectangle,
              this.buttonRectangleRounded,
              this.buttonTriangle,
              this.buttonTriangleRounded,
              this.buttonLine,
              this.buttonLineConnector,
              this.buttonElbowConnector,
              this.buttonImage,
              this.buttonGraphicPiece
          ];
          EShapeExtensionFactories.each(function (factory) {
              children.push(_this.newButtonExtensionFactory(factory));
          });
          EShapeExtensions.each(function (extension) {
              if (_this.isExtensionReplacable(extension)) {
                  var creator = extension.creator;
                  if (wcardinalUi.isFunction(creator)) {
                      children.push(_this.newButtonExtension(extension, creator));
                  }
              }
          });
          children.push(this.buttonGroup, this.buttonUngroup);
          return new wcardinalUi.DLayoutVertical({
              width: "100%",
              height: "auto",
              column: EEDITOR_BUTTON_COUNT,
              children: children
          });
      };
      EEditorShape.prototype.isExtensionReplacable = function (extension) {
          if ("icon" in extension) {
              if ("type" in extension) {
                  var capability = wcardinalUi.EShapeCapabilities.get(extension.type);
                  if (capability != null) {
                      if (capability & wcardinalUi.EShapeCapability.REPLACING) {
                          return true;
                      }
                      else {
                          return false;
                      }
                  }
              }
              return true;
          }
          return false;
      };
      EEditorShape.prototype.newTextChangeToLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.theme.getTextChangeToLabel()
              },
              clear: "AFTER"
          });
      };
      EEditorShape.prototype.newButtonExtensionFactory = function (factory) {
          var _this = this;
          var selectDialog = null;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: factory.icon.texture
              },
              title: this.toExtensionTitle(factory),
              theme: "EButtonEditor",
              on: {
                  active: function (emitter) {
                      selectDialog = selectDialog || _this.newDialogSelectExtensionFactory(factory);
                      selectDialog.open(emitter);
                  }
              }
          });
      };
      EEditorShape.prototype.newDialogSelectExtensionFactory = function (factory) {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: factory,
              list: {
                  data: {
                      toLabel: factory.item.toLabel
                  }
              },
              on: {
                  select: function (value) {
                      factory.item.toCreator(value).then(function (creator) {
                          _this._selection.replace(creator);
                      });
                  }
              }
          });
      };
      EEditorShape.prototype.newButtonExtension = function (extension, creator) {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: extension.icon.texture
              },
              title: this.toExtensionTitle(extension),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(creator);
                  }
              }
          });
      };
      EEditorShape.prototype.toExtensionTitle = function (extension) {
          var title = extension.title;
          if (wcardinalUi.isString(title)) {
              return title;
          }
          return title.change;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonCircle", {
          get: function () {
              var _a;
              return ((_a = this._buttonCircle) !== null && _a !== void 0 ? _a : (this._buttonCircle = this.newButtonCircle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonCircle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_circle
              },
              title: this.theme.getButtonCircleTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.CIRCLE) {
                              return new wcardinalUi.EShapeCircle().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonSemicircle", {
          get: function () {
              var _a;
              return ((_a = this._buttonSemicircle) !== null && _a !== void 0 ? _a : (this._buttonSemicircle = this.newButtonSemicircle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonSemicircle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_semicircle
              },
              title: this.theme.getButtonSemicircleTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.SEMICIRCLE) {
                              return new wcardinalUi.EShapeSemicircle().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonRectangle", {
          get: function () {
              var _a;
              return ((_a = this._buttonRectangle) !== null && _a !== void 0 ? _a : (this._buttonRectangle = this.newButtonRectangle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonRectangle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_rectangle
              },
              title: this.theme.getButtonRectangleTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.RECTANGLE) {
                              return new wcardinalUi.EShapeRectangle().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonRectangleRounded", {
          get: function () {
              var _a;
              return ((_a = this._buttonRectangleRounded) !== null && _a !== void 0 ? _a : (this._buttonRectangleRounded = this.newButtonRectangleRounded()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonRectangleRounded = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_rectangle_rounded
              },
              title: this.theme.getButtonRectangleRoundedTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.RECTANGLE_ROUNDED) {
                              return new wcardinalUi.EShapeRectangleRounded().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTriangle", {
          get: function () {
              var _a;
              return ((_a = this._buttonTriangle) !== null && _a !== void 0 ? _a : (this._buttonTriangle = this.newButtonTriangle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTriangle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_triangle
              },
              title: this.theme.getButtonTriangleTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.TRIANGLE) {
                              return new wcardinalUi.EShapeTriangle().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTriangleRounded", {
          get: function () {
              var _a;
              return ((_a = this._buttonTriangleRounded) !== null && _a !== void 0 ? _a : (this._buttonTriangleRounded = this.newButtonTriangleRounded()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTriangleRounded = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_triangle_rounded
              },
              title: this.theme.getButtonTriangleRoundedTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          if (existing.type !== wcardinalUi.EShapeType.TRIANGLE_ROUNDED) {
                              return new wcardinalUi.EShapeTriangleRounded().copy(existing);
                          }
                          return null;
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLine", {
          get: function () {
              var _a;
              return ((_a = this._buttonLine) !== null && _a !== void 0 ? _a : (this._buttonLine = this.newButtonLine()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLine = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_line
              },
              title: this.theme.getButtonLineTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.replace(function (existing) {
                          return _this.replaceLine(existing);
                      });
                  }
              }
          });
      };
      EEditorShape.prototype.replaceLine = function (existing) {
          if (existing.type !== wcardinalUi.EShapeType.LINE) {
              if (existing instanceof wcardinalUi.EShapeConnectorLine) {
                  return new wcardinalUi.EShapeLine().copy(existing);
              }
              else {
                  var size = existing.size;
                  var sxh = size.x * 0.5;
                  var syh = size.y * 0.5;
                  return wcardinalUi.createLine([-sxh, -syh, +sxh, +syh], [], wcardinalUi.EShapeDefaults.STROKE_WIDTH, wcardinalUi.EShapePointsStyle.NONE).copy(existing, wcardinalUi.EShapeCopyPart.ALL & ~(wcardinalUi.EShapeCopyPart.SIZE | wcardinalUi.EShapeCopyPart.POINTS));
              }
          }
          return null;
      };
      EEditorShape.prototype.isDanglingConnectorAllowed = function () {
          var _a, _b, _c;
          return (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.connector) === null || _b === void 0 ? void 0 : _b.dangling) !== null && _c !== void 0 ? _c : false;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineConnector", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineConnector) !== null && _a !== void 0 ? _a : (this._buttonLineConnector = this.newButtonLineConnector()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineConnector = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_line_connector
              },
              title: this.theme.getButtonLineConnectorTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      var isDanglingConnectorAllowed = _this.isDanglingConnectorAllowed();
                      _this._selection.replace(function (existing) {
                          return _this.replaceLineConnector(existing, isDanglingConnectorAllowed);
                      });
                  }
              }
          });
      };
      EEditorShape.prototype.replaceLineConnector = function (existing, isDanglingConnectorAllowed) {
          if (existing.type !== wcardinalUi.EShapeType.CONNECTOR_LINE) {
              if (existing instanceof wcardinalUi.EShapeConnectorLine) {
                  return new wcardinalUi.EShapeConnectorLine().copy(existing);
              }
              else if (isDanglingConnectorAllowed) {
                  return this.replaceConnector(existing, new wcardinalUi.EShapeConnectorLine());
              }
          }
          return null;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonElbowConnector", {
          get: function () {
              var _a;
              return ((_a = this._buttonElbowConnector) !== null && _a !== void 0 ? _a : (this._buttonElbowConnector = this.newButtonElbowConnector()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonElbowConnector = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_elbow_connector
              },
              title: this.theme.getButtonElbowConnectorTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      var isDanglingConnectorAllowed = _this.isDanglingConnectorAllowed();
                      _this._selection.replace(function (existing) {
                          return _this.replaceElbowConnector(existing, isDanglingConnectorAllowed);
                      });
                  }
              }
          });
      };
      EEditorShape.prototype.replaceElbowConnector = function (existing, isDanglingConnectorAllowed) {
          if (existing.type !== wcardinalUi.EShapeType.CONNECTOR_ELBOW) {
              if (existing instanceof wcardinalUi.EShapeConnectorLine) {
                  return new wcardinalUi.EShapeConnectorElbow().copy(existing);
              }
              else if (isDanglingConnectorAllowed) {
                  return this.replaceConnector(existing, new wcardinalUi.EShapeConnectorElbow());
              }
          }
          return null;
      };
      EEditorShape.prototype.replaceConnector = function (existing, result) {
          result.lock(wcardinalUi.EShapeLockPart.ALL);
          result.fill.alpha = 1;
          var marker = result.points.marker;
          marker.tail.type = wcardinalUi.EShapePointsMarkerType.CIRCLE;
          marker.head.type = wcardinalUi.EShapePointsMarkerType.TRIANGLE;
          result.copy(existing, wcardinalUi.EShapeCopyPart.ALL &
              ~(wcardinalUi.EShapeCopyPart.SIZE | wcardinalUi.EShapeCopyPart.POINTS | wcardinalUi.EShapeCopyPart.TRANSFORM));
          var size = existing.size;
          var sxh = size.x * 0.5;
          var syh = size.y * 0.5;
          var localTransform = existing.transform.localTransform;
          var rx = localTransform.a * sxh + localTransform.c * syh;
          var ry = localTransform.b * sxh + localTransform.d * syh;
          var tx = localTransform.tx;
          var ty = localTransform.ty;
          var edge = result.edge;
          edge.lock();
          edge.tail.set(null, null, null, null, 0, -rx + tx, -ry + ty, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          edge.head.set(null, null, null, null, 0, +rx + tx, +ry + ty, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          edge.unlock();
          result.unlock(wcardinalUi.EShapeLockPart.ALL, true);
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonImage", {
          get: function () {
              var _a;
              return ((_a = this._buttonImage) !== null && _a !== void 0 ? _a : (this._buttonImage = this.newButtonImage()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonImage = function () {
          var _this = this;
          return new wcardinalUi.DButtonFile({
              image: {
                  source: this._icons.editor_image
              },
              as: wcardinalUi.DButtonFileAs.DATA_URL,
              title: this.theme.getButtonImageTitle(),
              theme: "EButtonEditor",
              on: {
                  open: function (dataUrl) {
                      wcardinalUi.toImageElement(dataUrl).then(function (item) {
                          _this._selection.replace(function (existing) {
                              return new wcardinalUi.EShapeImage(item).copy(existing, wcardinalUi.EShapeCopyPart.ALL & ~wcardinalUi.EShapeCopyPart.IMAGE);
                          });
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonGraphicPiece", {
          get: function () {
              var result = this._buttonGraphicPiece;
              if (result === undefined) {
                  result = this._isPieceEnabled ? this.newButtonGraphicPiece() : null;
                  this._buttonGraphicPiece = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonGraphicPiece = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.graphic_piece
              },
              title: this.theme.getButtonGraphicPieceTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function (emitter) {
                      _this.onButtonGraphicPieceActive(emitter);
                  }
              }
          });
      };
      EEditorShape.prototype.onButtonGraphicPieceActive = function (opener) {
          this.dialogSelectGraphicPiece.then(function (dialogSelectGraphicPiece) {
              dialogSelectGraphicPiece.open(opener);
          });
      };
      Object.defineProperty(EEditorShape.prototype, "dialogSelectGraphicPiece", {
          get: function () {
              var _a;
              return ((_a = this._dialogSelectGraphicPiece) !== null && _a !== void 0 ? _a : (this._dialogSelectGraphicPiece = this.newDialogSelectGraphicPiece()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newDialogSelectGraphicPiece = function () {
          var _this = this;
          return this._canvas.get().then(function (canvas) {
              var controller = _this._controller;
              if (controller) {
                  if (controller.toPieceThumbnail) {
                      var result = _this.newDialogSelectGraphicPieceImage(controller);
                      result.categories = canvas.category.items;
                      return result;
                  }
                  else {
                      var result = _this.newDialogSelectGraphicPieceNoImage(controller);
                      result.categories = canvas.category.items;
                      return result;
                  }
              }
              else {
                  var result = _this.newDialogSelectGraphicPieceNoController();
                  result.categories = canvas.category.items;
                  return result;
              }
          });
      };
      EEditorShape.prototype.newDialogSelectGraphicPieceNoImage = function (controller) {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: this.newDialogSelectGraphicPieceController(controller),
              on: {
                  select: function (value) {
                      _this.onDialogSelectGraphicPieceSelect(value, controller);
                  }
              }
          });
      };
      EEditorShape.prototype.newDialogSelectGraphicPieceImage = function (controller) {
          var _this = this;
          return newDialogSelectWithThumbnails(this.newDialogSelectGraphicPieceController(controller), controller.toPieceThumbnail, function (value) {
              _this.onDialogSelectGraphicPieceSelect(value, controller);
          });
      };
      EEditorShape.prototype.newDialogSelectGraphicPieceNoController = function () {
          return new wcardinalUi.DDialogSelect({
              controller: {
                  search: function () {
                      return Promise.resolve([]);
                  }
              }
          });
      };
      EEditorShape.prototype.newDialogSelectGraphicPieceController = function (controller) {
          var _this = this;
          var graphicPiece = controller.graphic.piece;
          return {
              search: function (word, categoryId) {
                  return graphicPiece.search(word, categoryId).then(function (pieces) {
                      return _this.toDialogSelectGraphicPieceResult(pieces);
                  });
              }
          };
      };
      EEditorShape.prototype.toDialogSelectGraphicPieceResult = function (targets) {
          var _a;
          var pieceId = (_a = this._pieceExcluder) === null || _a === void 0 ? void 0 : _a.call(this);
          if (pieceId == null) {
              return targets;
          }
          var result = [];
          for (var i = 0, imax = targets.length; i < imax; ++i) {
              var target = targets[i];
              if (target.id !== pieceId) {
                  result.push(target);
              }
          }
          return result;
      };
      EEditorShape.prototype.onDialogSelectGraphicPieceSelect = function (value, controller) {
          var _this = this;
          controller.graphic.piece.get(value.id).then(function (serialized) {
              wcardinalUi.EShapeEmbeddeds.from(serialized, controller.graphic, wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR).then(function (shape) {
                  _this._selection.replace(function (existing) {
                      return shape.clone().copy(existing);
                  });
              });
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonGroup", {
          get: function () {
              var _a;
              return ((_a = this._buttonGroup) !== null && _a !== void 0 ? _a : (this._buttonGroup = this.newButtonGroup()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonGroup = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_group
              },
              title: this.theme.getButtonGroupTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.group();
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonUngroup", {
          get: function () {
              var _a;
              return ((_a = this._buttonUngroup) !== null && _a !== void 0 ? _a : (this._buttonUngroup = this.newButtonUngroup()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonUngroup = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              image: {
                  source: this._icons.shape_ungroup
              },
              title: this.theme.getButtonUngroupTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.ungroup();
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonFill", {
          get: function () {
              var _a;
              return ((_a = this._buttonFill) !== null && _a !== void 0 ? _a : (this._buttonFill = this.newButtonFill()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonFill = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheckRight({
              width: "100%",
              text: {
                  value: this.theme.getButtonFillLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      selection.setFillEnabled(true);
                  },
                  inactive: function () {
                      selection.setFillEnabled(false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonFillColor", {
          get: function () {
              var _a;
              return ((_a = this._buttonFillColor) !== null && _a !== void 0 ? _a : (this._buttonFillColor = this.newButtonFillColor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonFillColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setFill(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStroke", {
          get: function () {
              var _a;
              return ((_a = this._buttonStroke) !== null && _a !== void 0 ? _a : (this._buttonStroke = this.newButtonStroke()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStroke = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheckRight({
              width: "100%",
              text: {
                  value: this.theme.getButtonStrokeLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      selection.setStrokeEnabled(true);
                  },
                  inactive: function () {
                      selection.setStrokeEnabled(false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeColor", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeColor) !== null && _a !== void 0 ? _a : (this._buttonStrokeColor = this.newButtonStrokeColor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setStroke(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "inputStrokeWidth", {
          get: function () {
              var _a;
              return ((_a = this._inputStrokeWidth) !== null && _a !== void 0 ? _a : (this._inputStrokeWidth = this.newInputStrokeWidth()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputStrokeWidth = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputStrokeWidthLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 0,
                  on: {
                      change: function (value) {
                          _this._selection.setStrokeWidth(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputStrokeAlign", {
          get: function () {
              var _a;
              return ((_a = this._inputStrokeAlign) !== null && _a !== void 0 ? _a : (this._inputStrokeAlign = this.newInputStrokeAlign()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputStrokeAlign = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputStrokeAlignLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 0,
                  max: 1,
                  on: {
                      change: function (value) {
                          _this._selection.setStrokeAlign(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutStrokeSide", {
          get: function () {
              var _a;
              return ((_a = this._layoutStrokeSide) !== null && _a !== void 0 ? _a : (this._layoutStrokeSide = this.newLayoutStrokeSide()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutStrokeSide = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  this.buttonStrokeSideTop,
                  this.buttonStrokeSideRight,
                  this.buttonStrokeSideBottom,
                  this.buttonStrokeSideLeft,
                  this.buttonStrokeExpandable,
                  this.buttonStrokeShrinkable,
                  this.buttonStrokeScalableDotDash,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeSideTop", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeSideTop) !== null && _a !== void 0 ? _a : (this._buttonStrokeSideTop = this.newButtonStrokeSideTop()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeSideTop = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_side_top
              },
              title: this.theme.getButtonStrokeSideTopTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.TOP, true);
                  },
                  inactive: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.TOP, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeSideRight", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeSideRight) !== null && _a !== void 0 ? _a : (this._buttonStrokeSideRight = this.newButtonStrokeSideRight()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeSideRight = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_side_right
              },
              title: this.theme.getButtonStrokeSideRightTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.RIGHT, true);
                  },
                  inactive: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.RIGHT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeSideBottom", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeSideBottom) !== null && _a !== void 0 ? _a : (this._buttonStrokeSideBottom = this.newButtonStrokeSideBottom()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeSideBottom = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_side_bottom
              },
              title: this.theme.getButtonStrokeSideBottomTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.BOTTOM, true);
                  },
                  inactive: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.BOTTOM, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeSideLeft", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeSideLeft) !== null && _a !== void 0 ? _a : (this._buttonStrokeSideLeft = this.newButtonStrokeSideLeft()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeSideLeft = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_side_left
              },
              title: this.theme.getButtonStrokeSideLeftTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.LEFT, true);
                  },
                  inactive: function () {
                      selection.setStrokeSide(wcardinalUi.EShapeStrokeSide.LEFT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "textCorner", {
          get: function () {
              var _a;
              return ((_a = this._textCorner) !== null && _a !== void 0 ? _a : (this._textCorner = this.newTextCorner()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newTextCorner = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.theme.getTextCornerLabel()
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputCornerRadius", {
          get: function () {
              var _a;
              return ((_a = this._inputCornerRadius) !== null && _a !== void 0 ? _a : (this._inputCornerRadius = this.newInputCornerRadius()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputCornerRadius = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              width: "100%",
              min: 0,
              step: 1,
              max: 100,
              text: {
                  formatter: function (value) {
                      return "".concat(+(value * 100).toFixed(2), " %");
                  }
              },
              editing: {
                  formatter: function (value) {
                      return "".concat(+(value * 100).toFixed(2));
                  },
                  unformatter: function (text) {
                      return parseFloat(text) * 0.01;
                  }
              },
              on: {
                  change: function (value) {
                      _this._selection.setRadius(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutCorner", {
          get: function () {
              var _a;
              return ((_a = this._layoutCorner) !== null && _a !== void 0 ? _a : (this._layoutCorner = this.newLayoutCorner()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutCorner = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  this.buttonCornerTopLeft,
                  this.buttonCornerTopRight,
                  this.buttonCornerBottomRight,
                  this.buttonCornerBottomLeft,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonCornerTopLeft", {
          get: function () {
              var _a;
              return ((_a = this._buttonCornerTopLeft) !== null && _a !== void 0 ? _a : (this._buttonCornerTopLeft = this.newButtonCornerTopLeft()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonCornerTopLeft = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.corner_top_left
              },
              title: this.theme.getButtonCornerTopLeftTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.TOP_LEFT, true);
                  },
                  inactive: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.TOP_LEFT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonCornerTopRight", {
          get: function () {
              var _a;
              return ((_a = this._buttonCornerTopRight) !== null && _a !== void 0 ? _a : (this._buttonCornerTopRight = this.newButtonCornerTopRight()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonCornerTopRight = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.corner_top_right
              },
              title: this.theme.getButtonCornerTopRightTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.TOP_RIGHT, true);
                  },
                  inactive: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.TOP_RIGHT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonCornerBottomRight", {
          get: function () {
              var _a;
              return ((_a = this._buttonCornerBottomRight) !== null && _a !== void 0 ? _a : (this._buttonCornerBottomRight = this.newButtonCornerBottomRight()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonCornerBottomRight = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.corner_bottom_right
              },
              title: this.theme.getButtonCornerBottomRightTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.BOTTOM_RIGHT, true);
                  },
                  inactive: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.BOTTOM_RIGHT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonCornerBottomLeft", {
          get: function () {
              var _a;
              return ((_a = this._buttonCornerBottomLeft) !== null && _a !== void 0 ? _a : (this._buttonCornerBottomLeft = this.newButtonCornerBottomLeft()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonCornerBottomLeft = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.corner_bottom_left
              },
              title: this.theme.getButtonCornerBottomLeftTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.BOTTOM_LEFT, true);
                  },
                  inactive: function () {
                      selection.setCorner(wcardinalUi.EShapeCorner.BOTTOM_LEFT, false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutLine", {
          get: function () {
              var _a;
              return ((_a = this._layoutLine) !== null && _a !== void 0 ? _a : (this._layoutLine = this.newLayoutLine()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutLine = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              children: [this.textLine, this.buttonLineClosed, this.buttonLineLock]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "textLine", {
          get: function () {
              var _a;
              return ((_a = this._textLine) !== null && _a !== void 0 ? _a : (this._textLine = this.newTextLine()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newTextLine = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getTextLineLabel()
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineLock", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineLock) !== null && _a !== void 0 ? _a : (this._buttonLineLock = this.newButtonLineLock()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineLock = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheck({
              theme: "EButtonEditorLock",
              on: {
                  active: function () {
                      _this._selection.lockCapability(wcardinalUi.EShapeCapability.LINE);
                  },
                  inactive: function () {
                      _this._selection.unlockCapability(wcardinalUi.EShapeCapability.LINE);
                  }
              }
          });
      };
      EEditorShape.prototype.isLocked = function (last, target) {
          if (last == null) {
              return false;
          }
          var capability = last.getCapability();
          if (capability == null) {
              return false;
          }
          if (capability.locked & target) {
              return true;
          }
          return false;
      };
      Object.defineProperty(EEditorShape.prototype, "selectLineStyle", {
          get: function () {
              var _a;
              return ((_a = this._selectLineStyle) !== null && _a !== void 0 ? _a : (this._selectLineStyle = this.newSelectLineStyle()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newSelectLineStyle = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              width: "100%",
              value: wcardinalUi.EShapeStrokeStyle.NONE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapeStrokeStyle.NONE,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.NONE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DOTTED,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DOTTED)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DOTTED_DENSELY,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DOTTED_DENSELY)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DOTTED_LOOSELY,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DOTTED_LOOSELY)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DASHED,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DASHED)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DASHED_DENSELY,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DASHED_DENSELY)
                          }
                      },
                      {
                          value: wcardinalUi.EShapeStrokeStyle.DASHED_LOOSELY,
                          text: {
                              value: theme.getSelectLineStyleLabel(wcardinalUi.EShapeStrokeStyle.DASHED_LOOSELY)
                          }
                      }
                  ]
              },
              on: {
                  change: function (value) {
                      _this._selection.setLineStyle(value !== null && value !== void 0 ? value : wcardinalUi.EShapeStrokeStyle.NONE, wcardinalUi.EShapeStrokeStyle.DOTTED_MASK | wcardinalUi.EShapeStrokeStyle.DASHED_MASK);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "selectLineType", {
          get: function () {
              var _a;
              return ((_a = this._selectLineType) !== null && _a !== void 0 ? _a : (this._selectLineType = this.newSelectLineType()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newSelectLineType = function () {
          var _this = this;
          return new wcardinalUi.DSelect({
              width: "100%",
              value: wcardinalUi.EShapePointsStyle.NONE,
              menu: {
                  items: this.newSelectLineTypeMenuItems()
              },
              on: {
                  change: function (value) {
                      _this._selection.setPointsStyle(value !== null && value !== void 0 ? value : wcardinalUi.EShapePointsStyle.NONE, wcardinalUi.EShapePointsStyle.FORMATTER_MASK);
                  }
              }
          });
      };
      EEditorShape.prototype.newSelectLineTypeMenuItems = function () {
          var result = [
              {
                  value: wcardinalUi.EShapePointsStyle.NONE,
                  text: {
                      value: this.theme.getSelectLineTypeLabel(wcardinalUi.EShapePointsStyle.NONE)
                  }
              }
          ];
          wcardinalUi.EShapePointsFormatters.each(function (id, datum) {
              result.push({
                  value: id << wcardinalUi.EShapePointsStyle.FORMATTER_SHIFT,
                  text: {
                      value: datum.label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineClosed", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineClosed) !== null && _a !== void 0 ? _a : (this._buttonLineClosed = this.newButtonLineClosed()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineClosed = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.line_closed
              },
              title: this.theme.getButtonLineClosedTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setPointsStyle(wcardinalUi.EShapePointsStyle.CLOSED, wcardinalUi.EShapePointsStyle.NONE);
                  },
                  inactive: function () {
                      selection.setPointsStyle(wcardinalUi.EShapePointsStyle.NONE, wcardinalUi.EShapePointsStyle.CLOSED);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeExpandable", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeExpandable) !== null && _a !== void 0 ? _a : (this._buttonStrokeExpandable = this.newButtonStrokeExpandable()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeExpandable = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_expandable
              },
              title: this.theme.getButtonStrokeExpandableTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NONE, wcardinalUi.EShapeStrokeStyle.NON_EXPANDING_WIDTH);
                  },
                  inactive: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NON_EXPANDING_WIDTH, wcardinalUi.EShapeStrokeStyle.NONE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeShrinkable", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeShrinkable) !== null && _a !== void 0 ? _a : (this._buttonStrokeShrinkable = this.newButtonStrokeShrinkable()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeShrinkable = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheck({
              image: {
                  source: this._icons.stroke_shrinkable
              },
              title: this.theme.getButtonStrokeShrinkableTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NONE, wcardinalUi.EShapeStrokeStyle.NON_SHRINKING_WIDTH);
                  },
                  inactive: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NON_SHRINKING_WIDTH, wcardinalUi.EShapeStrokeStyle.NONE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonStrokeScalableDotDash", {
          get: function () {
              var _a;
              return ((_a = this._buttonStrokeScalableDotDash) !== null && _a !== void 0 ? _a : (this._buttonStrokeScalableDotDash = this.newButtonStrokeScalableDotDash()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonStrokeScalableDotDash = function () {
          var selection = this._selection;
          return new wcardinalUi.DButtonCheckRight({
              image: {
                  source: this._icons.stroke_scalable_dot_dash
              },
              title: this.theme.getButtonStrokeScalableDotDashTitle(),
              theme: "EButtonEditorCheck",
              on: {
                  active: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NONE, wcardinalUi.EShapeStrokeStyle.NON_SCALING_DOT_AND_DASH);
                  },
                  inactive: function () {
                      selection.setStrokeStyle(wcardinalUi.EShapeStrokeStyle.NON_SCALING_DOT_AND_DASH, wcardinalUi.EShapeStrokeStyle.NONE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutLineTail", {
          get: function () {
              var _a;
              return ((_a = this._layoutLineTail) !== null && _a !== void 0 ? _a : (this._layoutLineTail = this.newLayoutLineTail()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutLineTail = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              children: [this.textLineTail, this.buttonLineTailLock]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "textLineTail", {
          get: function () {
              var _a;
              return ((_a = this._textLineTail) !== null && _a !== void 0 ? _a : (this._textLineTail = this.newTextLineTail()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newTextLineTail = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getTextLineTailLabel()
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineTailLock", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineTailLock) !== null && _a !== void 0 ? _a : (this._buttonLineTailLock = this.newButtonLineTailLock()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineTailLock = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheck({
              theme: "EButtonEditorLock",
              on: {
                  active: function () {
                      _this._selection.lockCapability(wcardinalUi.EShapeCapability.LINE_TAIL);
                  },
                  inactive: function () {
                      _this._selection.unlockCapability(wcardinalUi.EShapeCapability.LINE_TAIL);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "selectLineTailType", {
          get: function () {
              var _a;
              return ((_a = this._selectLineTailType) !== null && _a !== void 0 ? _a : (this._selectLineTailType = this.newSelectLineTailType()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newSelectLineTailType = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              width: "100%",
              value: wcardinalUi.EShapePointsMarkerType.NONE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapePointsMarkerType.NONE,
                          text: {
                              value: theme.getSelectLineTailTypeLabel(wcardinalUi.EShapePointsMarkerType.NONE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.CIRCLE,
                          text: {
                              value: theme.getSelectLineTailTypeLabel(wcardinalUi.EShapePointsMarkerType.CIRCLE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.TRIANGLE,
                          text: {
                              value: theme.getSelectLineTailTypeLabel(wcardinalUi.EShapePointsMarkerType.TRIANGLE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.RECTANGLE,
                          text: {
                              value: theme.getSelectLineTailTypeLabel(wcardinalUi.EShapePointsMarkerType.RECTANGLE)
                          }
                      }
                  ]
              },
              on: {
                  change: function (value) {
                      _this._selection.setLineTailType(value !== null && value !== void 0 ? value : wcardinalUi.EShapePointsMarkerType.NONE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutLineTailSize", {
          get: function () {
              var _a;
              return ((_a = this._layoutLineTailSize) !== null && _a !== void 0 ? _a : (this._layoutLineTailSize = this.newLayoutLineTailSize()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutLineTailSize = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              children: [this.inputLineTailSizeX, this.inputLineTailSizeY]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineTailSizeX", {
          get: function () {
              var _a;
              return ((_a = this._inputLineTailSizeX) !== null && _a !== void 0 ? _a : (this._inputLineTailSizeX = this.newInputLineTailSizeX()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineTailSizeX = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              min: 0,
              on: {
                  change: function (value) {
                      _this._selection.setLineTailSizeX(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineTailSizeY", {
          get: function () {
              var _a;
              return ((_a = this._inputLineTailSizeY) !== null && _a !== void 0 ? _a : (this._inputLineTailSizeY = this.newInputLineTailSizeY()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineTailSizeY = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              min: 0,
              on: {
                  change: function (value) {
                      _this._selection.setLineTailSizeY(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineTailColor", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineTailColor) !== null && _a !== void 0 ? _a : (this._buttonLineTailColor = this.newButtonLineTailColor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineTailColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setLineTailColor(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineTailMargin", {
          get: function () {
              var _a;
              return ((_a = this._inputLineTailMargin) !== null && _a !== void 0 ? _a : (this._inputLineTailMargin = this.newInputLineTailMargin()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineTailMargin = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputLineTailMarginLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          _this._selection.setLineTailMargin(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutLineHead", {
          get: function () {
              var _a;
              return ((_a = this._layoutLineHead) !== null && _a !== void 0 ? _a : (this._layoutLineHead = this.newLayoutLineHead()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutLineHead = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              children: [this.textLineHead, this.buttonLineHeadLock]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "textLineHead", {
          get: function () {
              var _a;
              return ((_a = this._textLineHead) !== null && _a !== void 0 ? _a : (this._textLineHead = this.newTextLineHead()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newTextLineHead = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getTextLineHeadLabel()
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineHeadLock", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineHeadLock) !== null && _a !== void 0 ? _a : (this._buttonLineHeadLock = this.newButtonLineHeadLock()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineHeadLock = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheck({
              theme: "EButtonEditorLock",
              on: {
                  active: function () {
                      _this._selection.lockCapability(wcardinalUi.EShapeCapability.LINE_HEAD);
                  },
                  inactive: function () {
                      _this._selection.unlockCapability(wcardinalUi.EShapeCapability.LINE_HEAD);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "selectLineHeadType", {
          get: function () {
              var _a;
              return ((_a = this._selectLineHeadType) !== null && _a !== void 0 ? _a : (this._selectLineHeadType = this.newSelectLineHeadType()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newSelectLineHeadType = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DSelect({
              width: "100%",
              value: wcardinalUi.EShapePointsMarkerType.NONE,
              menu: {
                  items: [
                      {
                          value: wcardinalUi.EShapePointsMarkerType.NONE,
                          text: {
                              value: theme.getSelectLineHeadTypeLabel(wcardinalUi.EShapePointsMarkerType.NONE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.CIRCLE,
                          text: {
                              value: theme.getSelectLineHeadTypeLabel(wcardinalUi.EShapePointsMarkerType.CIRCLE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.TRIANGLE,
                          text: {
                              value: theme.getSelectLineHeadTypeLabel(wcardinalUi.EShapePointsMarkerType.TRIANGLE)
                          }
                      },
                      {
                          value: wcardinalUi.EShapePointsMarkerType.RECTANGLE,
                          text: {
                              value: theme.getSelectLineHeadTypeLabel(wcardinalUi.EShapePointsMarkerType.RECTANGLE)
                          }
                      }
                  ]
              },
              on: {
                  change: function (value) {
                      _this._selection.setLineHeadType(value !== null && value !== void 0 ? value : wcardinalUi.EShapePointsMarkerType.NONE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutLineHeadSize", {
          get: function () {
              var _a;
              return ((_a = this._layoutLineHeadSize) !== null && _a !== void 0 ? _a : (this._layoutLineHeadSize = this.newLayoutLineHeadSize()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutLineHeadSize = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              children: [this.inputLineHeadSizeX, this.inputLineHeadSizeY]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineHeadSizeX", {
          get: function () {
              var _a;
              return ((_a = this._inputLineHeadSizeX) !== null && _a !== void 0 ? _a : (this._inputLineHeadSizeX = this.newInputLineHeadSizeX()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineHeadSizeX = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              min: 0,
              on: {
                  change: function (value) {
                      _this._selection.setLineHeadSizeX(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineHeadSizeY", {
          get: function () {
              var _a;
              return ((_a = this._inputLineHeadSizeY) !== null && _a !== void 0 ? _a : (this._inputLineHeadSizeY = this.newInputLineHeadSizeY()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineHeadSizeY = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              min: 0,
              on: {
                  change: function (value) {
                      _this._selection.setLineHeadSizeY(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonLineHeadColor", {
          get: function () {
              var _a;
              return ((_a = this._buttonLineHeadColor) !== null && _a !== void 0 ? _a : (this._buttonLineHeadColor = this.newButtonLineHeadColor()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonLineHeadColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setLineHeadColor(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "inputLineHeadMargin", {
          get: function () {
              var _a;
              return ((_a = this._inputLineHeadMargin) !== null && _a !== void 0 ? _a : (this._inputLineHeadMargin = this.newInputLineHeadMargin()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newInputLineHeadMargin = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputLineHeadMarginLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          _this._selection.setLineHeadMargin(value);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "layoutTexture", {
          get: function () {
              var result = this._layoutTexture;
              if (result == null) {
                  result = this.newLayoutTexture();
                  this._layoutTexture = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newLayoutTexture = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "100%",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  this.buttonTextureImage,
                  this.buttonTextureGradient,
                  this.buttonTextureFitTo,
                  this.buttonTextureClear,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTextureImage", {
          get: function () {
              var _a;
              return ((_a = this._buttonTextureImage) !== null && _a !== void 0 ? _a : (this._buttonTextureImage = this.newButtonTextureImage()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTextureImage = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DButtonFile({
              image: {
                  source: this._icons.editor_image
              },
              as: wcardinalUi.DButtonFileAs.DATA_URL,
              title: theme.getButtonTextureImageTitle(),
              theme: "EButtonEditor",
              on: {
                  open: function (dataUrl) {
                      wcardinalUi.toImageElement(dataUrl).then(function (imageElement) {
                          _this._selection.setImage(imageElement);
                      });
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTextureGradient", {
          get: function () {
              var _a;
              return ((_a = this._buttonTextureGradient) !== null && _a !== void 0 ? _a : (this._buttonTextureGradient = this.newButtonTextureGradient()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTextureGradient = function () {
          var _this = this;
          var theme = this.theme;
          var result = new wcardinalUi.DButtonColorGradient({
              image: {
                  source: this._icons.texture_gradient
              },
              text: {
                  formatter: function () { return ""; }
              },
              title: theme.getButtonTextureGradientTitle(),
              theme: "EButtonEditor",
              on: {
                  change: function (value) {
                      var url = wcardinalUi.toGradientImageUrl(value);
                      wcardinalUi.toImageElement(url).then(function (imageElement) {
                          _this._selection.setGradient(imageElement, value.toObject());
                      });
                  }
              }
          });
          result.dialog.on("open", function () {
              var last = _this._selection.last();
              if (last != null && last.gradient != null) {
                  result.dialog.value.fromObject(last.gradient);
              }
          });
          return result;
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTextureFitTo", {
          get: function () {
              var _a;
              return ((_a = this._buttonTextureFitTo) !== null && _a !== void 0 ? _a : (this._buttonTextureFitTo = this.newButtonTextureFitTo()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTextureFitTo = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.texture_fit_to
              },
              title: theme.getButtonTextureFitToTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.fitToImage();
                  }
              }
          });
      };
      Object.defineProperty(EEditorShape.prototype, "buttonTextureClear", {
          get: function () {
              var _a;
              return ((_a = this._buttonTextureClear) !== null && _a !== void 0 ? _a : (this._buttonTextureClear = this.newButtonTextureClear()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorShape.prototype.newButtonTextureClear = function () {
          var _this = this;
          var theme = this.theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.texture_clear
              },
              title: theme.getButtonTextureClearTitle(),
              theme: "EButtonEditor",
              on: {
                  active: function () {
                      _this._selection.clearImage();
                  }
              }
          });
      };
      EEditorShape.prototype.onSelectionChange = function () {
          var selection = this._selection;
          this.state.isDisabled = selection.isEmpty();
          var last = selection.last();
          // Shape
          var layoutChangeTo = this.layoutChangeTo;
          if (layoutChangeTo) {
              layoutChangeTo.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.REPLACING);
          }
          // Grouping
          var ngroupable = 0;
          if (2 <= selection.size()) {
              var shapes = selection.get();
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  if (wcardinalUi.EShapeCapabilities.contains(shapes[i], wcardinalUi.EShapeCapability.GROUPING)) {
                      ngroupable += 1;
                      if (2 <= ngroupable) {
                          break;
                      }
                  }
              }
          }
          this.buttonGroup.state.isEnabled = 2 <= ngroupable;
          // Ungrouping
          this.buttonUngroup.state.isEnabled =
              last instanceof wcardinalUi.EShapeGroup &&
                  wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.CHILDREN) &&
                  wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.UNGROUPING);
          // Fill
          if (last != null) {
              this.buttonFill.state.isActive = last.fill.enable;
              var fill = last.fill;
              var buttonFillColor = this.buttonFillColor;
              var value = buttonFillColor.value;
              value.color = fill.color;
              value.alpha = fill.alpha;
              buttonFillColor.state.isEnabled = fill.enable;
          }
          // Stroke
          if (last != null) {
              var stroke = last.stroke;
              var strokeEnable = stroke.enable;
              this.buttonStroke.state.isActive = strokeEnable;
              // Stroke color
              var buttonStrokeColor = this.buttonStrokeColor;
              var value = buttonStrokeColor.value;
              value.color = stroke.color;
              value.alpha = stroke.alpha;
              buttonStrokeColor.state.isEnabled = strokeEnable;
              // Stroke align
              var inputStrokeAlign = this.inputStrokeAlign;
              inputStrokeAlign.input.value = stroke.align;
              inputStrokeAlign.state.isEnabled = strokeEnable;
              // Stroke width
              var inputStrokeWidth = this.inputStrokeWidth;
              inputStrokeWidth.input.value = stroke.width;
              inputStrokeWidth.state.isEnabled = strokeEnable;
              // Stroke side
              var side = stroke.side;
              var hasStrokeSide = strokeEnable && wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.STROKE_SIDE);
              var buttonStrokeSideTop = this.buttonStrokeSideTop;
              var buttonStrokeSideRight = this.buttonStrokeSideRight;
              var buttonStrokeSideBottom = this.buttonStrokeSideBottom;
              var buttonStrokeSideLeft = this.buttonStrokeSideLeft;
              buttonStrokeSideTop.state.isEnabled = hasStrokeSide;
              buttonStrokeSideRight.state.isEnabled = hasStrokeSide;
              buttonStrokeSideBottom.state.isEnabled = hasStrokeSide;
              buttonStrokeSideLeft.state.isEnabled = hasStrokeSide;
              buttonStrokeSideTop.state.isActive = !!(side & wcardinalUi.EShapeStrokeSide.TOP);
              buttonStrokeSideRight.state.isActive = !!(side & wcardinalUi.EShapeStrokeSide.RIGHT);
              buttonStrokeSideBottom.state.isActive = !!(side & wcardinalUi.EShapeStrokeSide.BOTTOM);
              buttonStrokeSideLeft.state.isActive = !!(side & wcardinalUi.EShapeStrokeSide.LEFT);
              // Stroke style
              var style = stroke.style;
              var buttonStrokeExpandable = this.buttonStrokeExpandable;
              var buttonStrokeShrinkable = this.buttonStrokeShrinkable;
              var buttonStrokeScalableDotDash = this.buttonStrokeScalableDotDash;
              buttonStrokeExpandable.state.isEnabled = strokeEnable;
              buttonStrokeShrinkable.state.isEnabled = strokeEnable;
              buttonStrokeScalableDotDash.state.isEnabled = strokeEnable;
              buttonStrokeExpandable.state.isActive = !(style & wcardinalUi.EShapeStrokeStyle.NON_EXPANDING_WIDTH);
              buttonStrokeShrinkable.state.isActive = !(style & wcardinalUi.EShapeStrokeStyle.NON_SHRINKING_WIDTH);
              buttonStrokeScalableDotDash.state.isActive = !(style & wcardinalUi.EShapeStrokeStyle.NON_SCALING_DOT_AND_DASH);
          }
          // Line
          var layoutLine = this.layoutLine;
          var buttonLineLock = this.buttonLineLock;
          var selectLineStyle = this.selectLineStyle;
          var selectLineType = this.selectLineType;
          var buttonLineClosed = this.buttonLineClosed;
          var layoutLineTail = this.layoutLineTail;
          var buttonLineTailLock = this.buttonLineTailLock;
          var selectLineTailType = this.selectLineTailType;
          var inputLineTailSizeX = this.inputLineTailSizeX;
          var inputLineTailSizeY = this.inputLineTailSizeY;
          var buttonLineTailColor = this.buttonLineTailColor;
          var inputLineTailMargin = this.inputLineTailMargin;
          var layoutLineHead = this.layoutLineHead;
          var buttonLineHeadLock = this.buttonLineHeadLock;
          var selectLineHeadType = this.selectLineHeadType;
          var inputLineHeadSizeX = this.inputLineHeadSizeX;
          var inputLineHeadSizeY = this.inputLineHeadSizeY;
          var buttonLineHeadColor = this.buttonLineHeadColor;
          var inputLineHeadMargin = this.inputLineHeadMargin;
          if (last != null && last.points != null) {
              var points = last.points;
              var hasLine = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.LINE);
              layoutLine.state.isEnabled = true;
              buttonLineLock.state.isActive = this.isLocked(last, wcardinalUi.EShapeCapability.LINE);
              buttonLineLock.state.isEnabled = true;
              var lineStrokeMask = wcardinalUi.EShapeStrokeStyle.DOTTED_MASK | wcardinalUi.EShapeStrokeStyle.DASHED_MASK;
              selectLineStyle.value = last.stroke.style & lineStrokeMask;
              selectLineStyle.state.isEnabled = hasLine;
              selectLineType.value = points.style & wcardinalUi.EShapePointsStyle.FORMATTER_MASK;
              selectLineType.state.isEnabled = hasLine;
              buttonLineClosed.state.isActive = (points.style & wcardinalUi.EShapePointsStyle.CLOSED) !== 0;
              buttonLineClosed.state.isEnabled = hasLine;
              var hasLineTail = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.LINE_TAIL);
              layoutLineTail.state.isEnabled = true;
              buttonLineTailLock.state.isActive = this.isLocked(last, wcardinalUi.EShapeCapability.LINE_TAIL);
              buttonLineTailLock.state.isEnabled = true;
              var markerTail = points.marker.tail;
              selectLineTailType.value = markerTail.type;
              selectLineTailType.state.isEnabled = hasLineTail;
              inputLineTailSizeX.value = markerTail.size.x;
              inputLineTailSizeX.state.isEnabled = hasLineTail;
              inputLineTailSizeY.value = markerTail.size.y;
              inputLineTailSizeY.state.isEnabled = hasLineTail;
              var markerTailFill = markerTail.fill;
              var buttonLineTailColorValue = buttonLineTailColor.value;
              buttonLineTailColorValue.color = markerTailFill.color;
              buttonLineTailColorValue.alpha = markerTailFill.alpha;
              buttonLineTailColor.state.isEnabled = markerTailFill.enable && hasLineTail;
              if (last instanceof wcardinalUi.EShapeConnectorLine) {
                  inputLineTailMargin.input.value = last.edge.tail.margin;
                  inputLineTailMargin.state.isEnabled = hasLineTail;
              }
              else {
                  inputLineTailMargin.state.isEnabled = false;
              }
              var hasLineHead = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.LINE_HEAD);
              layoutLineHead.state.isEnabled = true;
              buttonLineHeadLock.state.isActive = this.isLocked(last, wcardinalUi.EShapeCapability.LINE_HEAD);
              buttonLineHeadLock.state.isEnabled = true;
              var markerHead = points.marker.head;
              selectLineHeadType.value = markerHead.type;
              selectLineHeadType.state.isEnabled = hasLineHead;
              inputLineHeadSizeX.value = markerHead.size.x;
              inputLineHeadSizeX.state.isEnabled = hasLineHead;
              inputLineHeadSizeY.value = markerHead.size.y;
              inputLineHeadSizeY.state.isEnabled = hasLineHead;
              var markerHeadFill = markerHead.fill;
              var buttonLineHeadColorValue = buttonLineHeadColor.value;
              buttonLineHeadColorValue.color = markerHeadFill.color;
              buttonLineHeadColorValue.alpha = markerHeadFill.alpha;
              buttonLineHeadColor.state.isEnabled = markerHeadFill.enable && hasLineHead;
              if (last instanceof wcardinalUi.EShapeConnectorLine) {
                  inputLineHeadMargin.input.value = last.edge.head.margin;
                  inputLineHeadMargin.state.isEnabled = hasLineHead;
              }
              else {
                  inputLineHeadMargin.state.isEnabled = false;
              }
          }
          else {
              layoutLine.state.isEnabled = false;
              buttonLineLock.state.isEnabled = false;
              selectLineStyle.state.isEnabled = false;
              selectLineType.state.isEnabled = false;
              buttonLineClosed.state.isEnabled = false;
              layoutLineTail.state.isEnabled = false;
              buttonLineTailLock.state.isEnabled = false;
              selectLineTailType.state.isEnabled = false;
              inputLineTailSizeX.state.isEnabled = false;
              inputLineTailSizeY.state.isEnabled = false;
              buttonLineTailColor.state.isEnabled = false;
              inputLineTailMargin.state.isEnabled = false;
              layoutLineHead.state.isEnabled = false;
              buttonLineHeadLock.state.isEnabled = false;
              selectLineHeadType.state.isEnabled = false;
              inputLineHeadSizeX.state.isEnabled = false;
              inputLineHeadSizeY.state.isEnabled = false;
              buttonLineHeadColor.state.isEnabled = false;
              inputLineHeadMargin.state.isEnabled = false;
          }
          // Corner
          if (last != null) {
              var hasBorderRadius = wcardinalUi.EShapeCapabilities.contains(last, wcardinalUi.EShapeCapability.BORDER_RADIUS);
              this.textCorner.state.isEnabled = hasBorderRadius;
              this.inputCornerRadius.value = last.radius;
              this.inputCornerRadius.state.isEnabled = hasBorderRadius;
              this.layoutCorner.state.isEnabled = hasBorderRadius;
              this.buttonCornerBottomLeft.state.isActive = !!(last.corner & wcardinalUi.EShapeCorner.BOTTOM_LEFT);
              this.buttonCornerBottomRight.state.isActive = !!(last.corner & wcardinalUi.EShapeCorner.BOTTOM_RIGHT);
              this.buttonCornerTopLeft.state.isActive = !!(last.corner & wcardinalUi.EShapeCorner.TOP_LEFT);
              this.buttonCornerTopRight.state.isActive = !!(last.corner & wcardinalUi.EShapeCorner.TOP_RIGHT);
          }
          // Texture
          if (last != null) {
              this.buttonTextureFitTo.state.isDisabled = last.image == null;
              this.buttonTextureClear.state.isDisabled = last.image == null;
          }
      };
      EEditorShape.prototype.getType = function () {
          return "EEditorShape";
      };
      return EEditorShape;
  }(wcardinalUi.DPane));

  var EEditorSnap = /** @class */ (function (_super) {
      __extends(EEditorSnap, _super);
      function EEditorSnap(options) {
          var _this = _super.call(this, options) || this;
          // Icons
          _this._icons = options.icons;
          // Diagram
          var diagram = options.diagram;
          _this._diagram = diagram;
          _this.state.isDisabled = diagram.canvas == null;
          diagram.on("unset", function () {
              _this.state.isDisabled = true;
          });
          diagram.on("set", function () {
              _this.state.isDisabled = false;
          });
          // Snapper
          var snapper = diagram.snapper;
          _this._snapper = snapper;
          snapper.on("change", function () {
              _this.onSnapperChange(snapper);
          });
          var snapperTarget = snapper.target;
          snapperTarget.on("change", function () {
              _this.onSnapperTargetChange(snapperTarget);
          });
          var snapperGrid = snapper.grid;
          snapperGrid.on("change", function () {
              _this.onSnapperGridChange(snapperGrid);
          });
          // Layout
          _this.addChild(_this.buttonLabel);
          _this.addChild(_this.buttonGrid);
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [_this.buttonGridEye, _this.inputGridSize]
          }));
          _this.addChild(_this.buttonTarget);
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [
                  new wcardinalUi.DLayoutSpace({ weight: 1 }),
                  _this.buttonTargetNew,
                  _this.buttonTargetDelete,
                  _this.buttonTargetBringForward,
                  _this.buttonTargetSendBackward,
                  _this.buttonTargetEye,
                  new wcardinalUi.DLayoutSpace({ weight: 1 })
              ]
          }));
          _this.addChild(_this.listTarget);
          // Selection
          var listSnapTarget = _this.listTarget;
          listSnapTarget.data.selection.on("change", function () {
              _this.onSelectionChange(listSnapTarget);
          });
          // Initialization
          _this.onSnapperChange(snapper);
          _this.onSnapperTargetChange(snapperTarget);
          _this.onSnapperGridChange(snapperGrid);
          _this.onSelectionChange(listSnapTarget);
          return _this;
      }
      Object.defineProperty(EEditorSnap.prototype, "buttonLabel", {
          get: function () {
              var result = this._buttonLabel;
              if (result == null) {
                  result = this.newButtonLabel();
                  this._buttonLabel = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonLabel = function () {
          var snapper = this._diagram.snapper;
          return new wcardinalUi.DButtonCheckRight({
              x: "padding",
              width: "padding",
              text: {
                  value: this.theme.getLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      if (!snapper.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapToggle(snapper));
                      }
                  },
                  inactive: function () {
                      if (snapper.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapToggle(snapper));
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTarget", {
          get: function () {
              var result = this._buttonTarget;
              if (result == null) {
                  result = this.newButtonTarget();
                  this._buttonTarget = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTarget = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              x: "padding",
              width: "padding",
              text: {
                  value: this.theme.getButtonTargetLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      var snapper = _this._snapper;
                      if (!snapper.target.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapTargetToggle(snapper));
                      }
                  },
                  inactive: function () {
                      var snapper = _this._snapper;
                      if (snapper.target.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapTargetToggle(snapper));
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTargetNew", {
          get: function () {
              var result = this._buttonTargetNew;
              if (result == null) {
                  result = this.newButtonTargetNew();
                  this._buttonTargetNew = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTargetNew = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.new
              },
              title: this.theme.getButtonTargetNewTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonTargetNewActive(emitter);
                  }
              }
          });
      };
      EEditorSnap.prototype.onButtonTargetNewActive = function (opener) {
          var _this = this;
          this.dialogTarget
              .reset()
              .open(opener)
              .then(function (value) {
              if (value != null) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapCreate(_this._snapper, value));
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTargetDelete", {
          get: function () {
              var result = this._buttonTargetDelete;
              if (result == null) {
                  result = this.newButtonTargetDelete();
                  this._buttonTargetDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTargetDelete = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.delete
              },
              title: this.theme.getButtonTargetDeleteTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listTarget = _this.listTarget;
                      var first = listTarget.data.selection.first;
                      if (first != null) {
                          var items = listTarget.data.items;
                          var index = items.indexOf(first);
                          if (0 <= index) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapDelete(_this._snapper, index, first));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTargetBringForward", {
          get: function () {
              var result = this._buttonTargetBringForward;
              if (result == null) {
                  result = this.newButtonTargetBringForward();
                  this._buttonTargetBringForward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTargetBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonTargetBringForwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var listTarget = _this.listTarget;
                      var first = listTarget.data.selection.first;
                      var items = listTarget.data.items;
                      if (first != null && items[0] !== first) {
                          var index = items.indexOf(first);
                          if (0 <= index) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapBringForward(_this._snapper, index));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTargetSendBackward", {
          get: function () {
              var result = this._buttonTargetSendBackward;
              if (result == null) {
                  result = this.newButtonTargetSendBackward();
                  this._buttonTargetSendBackward = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTargetSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonTargetSendBackwardTitle(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      var snapper = _this._snapper;
                      var listTarget = _this.listTarget;
                      var first = listTarget.data.selection.first;
                      var items = listTarget.data.items;
                      if (first != null && items[items.length] !== first) {
                          var index = items.indexOf(first);
                          if (0 <= index) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapSendBackward(snapper, index));
                          }
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonTargetEye", {
          get: function () {
              var result = this._buttonTargetEye;
              if (result == null) {
                  result = this.newButtonTargetEye();
                  this._buttonTargetEye = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonTargetEye = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.eye
              },
              title: this.theme.getButtonTargetEyeTitle(),
              on: {
                  active: function () {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapTargetToggleVisibility(_this._snapper));
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "dialogTarget", {
          get: function () {
              var result = this._dialogTarget;
              if (result == null) {
                  result = this.newDialogTarget();
                  this._dialogTarget = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newDialogTarget = function () {
          return new EDialogSnap();
      };
      Object.defineProperty(EEditorSnap.prototype, "listTarget", {
          get: function () {
              var result = this._listTarget;
              if (result == null) {
                  result = this.newListTarget();
                  this._listTarget = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newListTarget = function () {
          var _this = this;
          var theme = this.theme;
          var result = new wcardinalUi.DList({
              x: "padding",
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      return theme.getListTargetItemLabel(value);
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              dblclick: function (e, _, item) {
                                  _this.onListTargetDblClick(e, _, item, result);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorSnap.prototype.onListTargetDblClick = function (e, _, item, list) {
          var _this = this;
          var oldValue = item.value;
          if (oldValue != null) {
              var index = list.data.items.indexOf(oldValue);
              if (0 <= index) {
                  var dialog = this.dialogTarget;
                  dialog.value = oldValue;
                  dialog.open(item).then(function (newValue) {
                      if (newValue != null) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapReplace(_this._snapper, oldValue, newValue, list));
                      }
                  });
              }
          }
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonGrid", {
          get: function () {
              var result = this._buttonGrid;
              if (result == null) {
                  result = this.newButtonGrid();
                  this._buttonGrid = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonGrid = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              x: "padding",
              width: "padding",
              text: {
                  value: this.theme.getButtonGridLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      var snapper = _this._snapper;
                      if (!snapper.grid.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapGridToggle(snapper));
                      }
                  },
                  inactive: function () {
                      var snapper = _this._snapper;
                      if (snapper.grid.enable) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapGridToggle(snapper));
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "buttonGridEye", {
          get: function () {
              var result = this._buttonGridEye;
              if (result == null) {
                  result = this.newButtonGridEye();
                  this._buttonGridEye = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newButtonGridEye = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.eye
              },
              title: this.theme.getButtonGridEyeTitle(),
              on: {
                  active: function () {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapGridToggleVisibility(_this._snapper));
                  }
              }
          });
      };
      Object.defineProperty(EEditorSnap.prototype, "inputGridSize", {
          get: function () {
              var result = this._inputGridSize;
              if (result == null) {
                  result = this.newInputGridSize();
                  this._inputGridSize = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorSnap.prototype.newInputGridSize = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              weight: 1,
              label: {
                  text: {
                      value: this.theme.getInputGridSizeLabel()
                  }
              },
              input: {
                  weight: 1,
                  text: {
                      value: 10
                  },
                  min: 2,
                  on: {
                      change: function (value) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSnapGridSize(_this._snapper, value));
                      }
                  }
              }
          });
      };
      EEditorSnap.prototype.onSnapperChange = function (snapper) {
          this.buttonLabel.state.isActive = snapper.enable;
      };
      EEditorSnap.prototype.onSnapperTargetChange = function (target) {
          this.buttonTarget.state.isActive = target.enable;
          var icons = this._icons;
          this.buttonTargetEye.image = target.visible ? icons.eye : icons.eye_slash;
          var listTarget = this.listTarget;
          listTarget.data.items = target.values;
          this.onSelectionChange(listTarget);
      };
      EEditorSnap.prototype.onSnapperGridChange = function (grid) {
          this.buttonGrid.state.isActive = grid.enable;
          var icons = this._icons;
          this.buttonGridEye.image = grid.visible ? icons.eye : icons.eye_slash;
          this.inputGridSize.input.value = grid.size;
      };
      EEditorSnap.prototype.onSelectionChange = function (listSnapTarget) {
          this.buttonTargetDelete.state.isDisabled = listSnapTarget.data.selection.isEmpty();
          var first = listSnapTarget.data.selection.first;
          var items = listSnapTarget.data.items;
          this.buttonTargetBringForward.state.isDisabled = first == null || items[0] === first;
          this.buttonTargetSendBackward.state.isDisabled =
              first == null || items[items.length - 1] === first;
      };
      EEditorSnap.prototype.getType = function () {
          return "EEditorSnap";
      };
      return EEditorSnap;
  }(wcardinalUi.DLayoutVertical));

  var EEditorText = /** @class */ (function (_super) {
      __extends(EEditorText, _super);
      function EEditorText(options) {
          var _this = _super.call(this, options) || this;
          _this._fromShapeTextRegEx = /\\+n|\n/g;
          _this._toShapeTextRegEx = /\\+n/g;
          var selection = options.selection;
          _this._selection = selection;
          var icons = options.icons;
          _this._icons = icons;
          var theme = _this.theme;
          new wcardinalUi.DLayoutVertical({
              parent: _this.content,
              x: "padding",
              y: "padding",
              width: "padding",
              height: "auto",
              children: [
                  _this.newLabel(theme.getLabel()),
                  _this.inputText,
                  _this.newLabel(theme.getTextFontLabel()),
                  _this.dropdownFontFamily,
                  _this.buttonFontColor,
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      height: "auto",
                      children: [
                          _this.inputFontSize,
                          _this.buttonFontSizeDecrease,
                          _this.buttonFontSizeIncrease,
                          _this.buttonFontItalic,
                          _this.buttonFontBold
                      ]
                  }),
                  _this.buttonOutline,
                  _this.buttonOutlineColor,
                  _this.inputOutlineWidth,
                  _this.newLabel(theme.getTextAlignLabel()),
                  new wcardinalUi.DLayoutVertical({
                      width: "100%",
                      height: "auto",
                      column: EEDITOR_BUTTON_COUNT,
                      children: [
                          _this.buttonAlignOutsideLeft,
                          _this.buttonAlignLeft,
                          _this.buttonAlignCenter,
                          _this.buttonAlignRight,
                          _this.buttonAlignOutsideRight,
                          _this.buttonAlignOutsideTop,
                          _this.buttonAlignTop,
                          _this.buttonAlignMiddle,
                          _this.buttonAlignBottom,
                          _this.buttonAlignOutsideBottom,
                          _this.buttonDirectionLeftToRight,
                          _this.buttonDirectionTopToBottom,
                          _this.buttonDirectionBottomToTop,
                          _this.buttonDirectionRightToLeft
                      ]
                  }),
                  _this.buttonClipping,
                  _this.buttonFitting,
                  _this.newLabel(theme.getTextSpacingLabel()),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [_this.inputSpacingHorizontal, _this.inputSpacingVertical]
                  }),
                  _this.newLabel(theme.getTextPaddingLabel()),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [_this.inputPaddingHorizontal, _this.inputPaddingVertical]
                  }),
                  _this.newLabel(theme.getTextOffsetLabel()),
                  new wcardinalUi.DLayoutHorizontal({
                      width: "100%",
                      children: [_this.inputOffsetHorizontal, _this.inputOffsetVertical]
                  })
              ]
          });
          selection.on("change", function () {
              _this.onSelectionChange(selection);
          });
          _this.onSelectionChange(selection);
          return _this;
      }
      EEditorText.prototype.newLabel = function (label) {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: label
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputText", {
          get: function () {
              var result = this._inputText;
              if (result == null) {
                  result = this.newInputText();
                  this._inputText = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputText = function () {
          var _this = this;
          return new wcardinalUi.DInputTextArea({
              width: "100%",
              height: this.theme.getInputTextHeight(),
              text: {
                  value: ""
              },
              on: {
                  input: function (value) {
                      _this._selection.setText(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "dropdownFontFamily", {
          get: function () {
              var result = this._dropdownFontFamily;
              if (result == null) {
                  result = this.newDropdownFontFamily();
                  this._dropdownFontFamily = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newDropdownFontFamily = function () {
          var _this = this;
          return new wcardinalUi.DDropdown({
              width: "100%",
              text: {
                  value: this.fontFamilies.get("auto")
              },
              menu: {
                  width: "auto",
                  column: 3,
                  fit: false,
                  items: this.newDropdownFontFamilyMenuItems()
              },
              on: {
                  select: function (value) {
                      var _a;
                      _this.dropdownFontFamily.text = (_a = _this.fontFamilies.get(value)) !== null && _a !== void 0 ? _a : value;
                      _this._selection.setTextFamily(value);
                  }
              }
          });
      };
      EEditorText.prototype.newDropdownFontFamilyMenuItems = function () {
          var result = [];
          this.fontFamilies.forEach(function (label, fontFamily) {
              result.push({
                  width: 200,
                  value: fontFamily,
                  text: {
                      value: label
                  }
              });
          });
          return result;
      };
      Object.defineProperty(EEditorText.prototype, "fontFamilies", {
          get: function () {
              var result = this._fontFamilies;
              if (result == null) {
                  result = this.theme.getFontFamilies();
                  this._fontFamilies = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorText.prototype, "buttonFontColor", {
          get: function () {
              var result = this._buttonFontColor;
              if (result == null) {
                  result = this.newButtonFontColor();
                  this._buttonFontColor = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFontColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setTextColor(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorText.prototype, "inputFontSize", {
          get: function () {
              var result = this._inputFontSize;
              if (result == null) {
                  result = this.newInputFontSize();
                  this._inputFontSize = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputFontSize = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              text: {
                  value: 0
              },
              min: 0,
              on: {
                  input: function (size) {
                      _this._selection.setTextSize(size);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonFontSizeDecrease", {
          get: function () {
              var result = this._buttonFontSizeDecrease;
              if (result == null) {
                  result = this.newButtonFontSizeDecrease();
                  this._buttonFontSizeDecrease = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFontSizeDecrease = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_font_size_decrease
              },
              title: this.theme.getButtonFontSizeDecreaseTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextSizeDelta(-1);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonFontSizeIncrease", {
          get: function () {
              var result = this._buttonFontSizeIncrease;
              if (result == null) {
                  result = this.newButtonFontSizeIncrease();
                  this._buttonFontSizeIncrease = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFontSizeIncrease = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.editor_font_size_increase
              },
              title: this.theme.getButtonFontSizeIncreaseTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextSizeDelta(+1);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonFontItalic", {
          get: function () {
              var result = this._buttonFontItalic;
              if (result == null) {
                  result = this.newButtonFontItalic();
                  this._buttonFontItalic = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFontItalic = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.italic
              },
              toggle: true,
              title: this.theme.getButtonFontItalicTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextStyle(wcardinalUi.EShapeTextStyle.ITALIC);
                  },
                  inactive: function () {
                      _this._selection.setTextStyle(wcardinalUi.EShapeTextStyle.NORMAL);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonFontBold", {
          get: function () {
              var result = this._buttonFontBold;
              if (result == null) {
                  result = this.newButtonFontBold();
                  this._buttonFontBold = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFontBold = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.bold
              },
              toggle: true,
              title: this.theme.getButtonFontBoldTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextWeight(wcardinalUi.EShapeTextWeight.BOLD);
                  },
                  inactive: function () {
                      _this._selection.setTextWeight(wcardinalUi.EShapeTextWeight.NORMAL);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonOutline", {
          get: function () {
              var result = this._buttonOutline;
              if (result == null) {
                  result = this.newButtonOutline();
                  this._buttonOutline = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonOutline = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "100%",
              text: {
                  value: this.theme.getButtonOutlineLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      _this._selection.setTextOutlineEnabled(true);
                  },
                  inactive: function () {
                      _this._selection.setTextOutlineEnabled(false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonOutlineColor", {
          get: function () {
              var result = this._buttonOutlineColor;
              if (result == null) {
                  result = this.newButtonOutlineColor();
                  this._buttonOutlineColor = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonOutlineColor = function () {
          var _this = this;
          var result = new wcardinalUi.DButtonColor({
              width: "100%",
              on: {
                  change: function (value) {
                      _this._selection.setTextOutlineColor(value.color, value.alpha);
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          return result;
      };
      Object.defineProperty(EEditorText.prototype, "inputOutlineWidth", {
          get: function () {
              var _a;
              return ((_a = this._inputOutlineWidth) !== null && _a !== void 0 ? _a : (this._inputOutlineWidth = this.newInputOutlineWidth()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputOutlineWidth = function () {
          var _this = this;
          return new wcardinalUi.DInputRealAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputOutlineWidthLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 0,
                  step: 1,
                  max: 100,
                  on: {
                      change: function (value) {
                          _this._selection.setTextOutlineWidth(value * 0.01);
                      }
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignOutsideLeft", {
          get: function () {
              var result = this._buttonAlignOutsideLeft;
              if (result == null) {
                  result = this.newButtonAlignOutsideLeft();
                  this._buttonAlignOutsideLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignOutsideLeft = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_outside_left
              },
              title: this.theme.getButtonAlignOutsideLeftTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignHorizontal(wcardinalUi.EShapeTextAlignHorizontal.OUTSIDE_LEFT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignLeft", {
          get: function () {
              var result = this._buttonAlignLeft;
              if (result == null) {
                  result = this.newButtonAlignLeft();
                  this._buttonAlignLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignLeft = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_left
              },
              title: this.theme.getButtonAlignLeftTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignHorizontal(wcardinalUi.EShapeTextAlignHorizontal.LEFT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignCenter", {
          get: function () {
              var result = this._buttonAlignCenter;
              if (result == null) {
                  result = this.newButtonAlignCenter();
                  this._buttonAlignCenter = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignCenter = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_center
              },
              title: this.theme.getButtonAlignCenterTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignHorizontal(wcardinalUi.EShapeTextAlignHorizontal.CENTER);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignRight", {
          get: function () {
              var result = this._buttonAlignRight;
              if (result == null) {
                  result = this.newButtonAlignRight();
                  this._buttonAlignRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignRight = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_right
              },
              title: this.theme.getButtonAlignRightTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignHorizontal(wcardinalUi.EShapeTextAlignHorizontal.RIGHT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignOutsideRight", {
          get: function () {
              var result = this._buttonAlignOutsideRight;
              if (result == null) {
                  result = this.newButtonAlignOutsideRight();
                  this._buttonAlignOutsideRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignOutsideRight = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_outside_right
              },
              title: this.theme.getButtonAlignOutsideRightTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignHorizontal(wcardinalUi.EShapeTextAlignHorizontal.OUTSIDE_RIGHT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignOutsideTop", {
          get: function () {
              var result = this._buttonAlignOutsideTop;
              if (result == null) {
                  result = this.newButtonAlignOutsideTop();
                  this._buttonAlignOutsideTop = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignOutsideTop = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_outside_top
              },
              title: this.theme.getButtonAlignOutsideTopTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignVertical(wcardinalUi.EShapeTextAlignVertical.OUTSIDE_TOP);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignTop", {
          get: function () {
              var result = this._buttonAlignTop;
              if (result == null) {
                  result = this.newButtonAlignTop();
                  this._buttonAlignTop = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignTop = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_top
              },
              title: this.theme.getButtonAlignTopTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignVertical(wcardinalUi.EShapeTextAlignVertical.TOP);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignMiddle", {
          get: function () {
              var result = this._buttonAlignMiddle;
              if (result == null) {
                  result = this.newButtonAlignMiddle();
                  this._buttonAlignMiddle = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignMiddle = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_middle
              },
              title: this.theme.getButtonAlignMiddleTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignVertical(wcardinalUi.EShapeTextAlignVertical.MIDDLE);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignBottom", {
          get: function () {
              var result = this._buttonAlignBottom;
              if (result == null) {
                  result = this.newButtonAlignBottom();
                  this._buttonAlignBottom = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignBottom = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_bottom
              },
              title: this.theme.getButtonAlignBottomTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignVertical(wcardinalUi.EShapeTextAlignVertical.BOTTOM);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonAlignOutsideBottom", {
          get: function () {
              var result = this._buttonAlignOutsideBottom;
              if (result == null) {
                  result = this.newButtonAlignOutsideBottom();
                  this._buttonAlignOutsideBottom = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonAlignOutsideBottom = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_align_outside_bottom
              },
              title: this.theme.getButtonAlignOutsideBottomTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextAlignVertical(wcardinalUi.EShapeTextAlignVertical.OUTSIDE_BOTTOM);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonDirectionLeftToRight", {
          get: function () {
              var result = this._buttonDirectionLeftToRight;
              if (result == null) {
                  result = this.newButtonDirectionLeftToRight();
                  this._buttonDirectionLeftToRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonDirectionLeftToRight = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_direction_left_to_right
              },
              title: this.theme.getButtonDirectionLeftToRightTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextDirection(wcardinalUi.EShapeTextDirection.LEFT_TO_RIGHT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonDirectionTopToBottom", {
          get: function () {
              var result = this._buttonDirectionTopToBottom;
              if (result == null) {
                  result = this.newButtonDirectionTopToBottom();
                  this._buttonDirectionTopToBottom = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonDirectionTopToBottom = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_direction_top_to_bottom
              },
              title: this.theme.getButtonDirectionTopToBottomTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextDirection(wcardinalUi.EShapeTextDirection.TOP_TO_BOTTOM);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonDirectionBottomToTop", {
          get: function () {
              var result = this._buttonDirectionBottomToTop;
              if (result == null) {
                  result = this.newButtonDirectionBottomToTop();
                  this._buttonDirectionBottomToTop = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonDirectionBottomToTop = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_direction_bottom_to_top
              },
              title: this.theme.getButtonDirectionBottomToTopTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextDirection(wcardinalUi.EShapeTextDirection.BOTTOM_TO_TOP);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonDirectionRightToLeft", {
          get: function () {
              var result = this._buttonDirectionRightToLeft;
              if (result == null) {
                  result = this.newButtonDirectionRightToLeft();
                  this._buttonDirectionRightToLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonDirectionRightToLeft = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.text_direction_right_to_left
              },
              title: this.theme.getButtonDirectionRightToLeftTitle(),
              on: {
                  active: function () {
                      _this._selection.setTextDirection(wcardinalUi.EShapeTextDirection.RIGHT_TO_LEFT);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonClipping", {
          get: function () {
              var result = this._buttonClipping;
              if (result == null) {
                  result = this.newButtonClipping();
                  this._buttonClipping = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonClipping = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "100%",
              text: {
                  value: this.theme.getButtonClippingLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      _this._selection.setTextClipping(true);
                  },
                  inactive: function () {
                      _this._selection.setTextClipping(false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "buttonFitting", {
          get: function () {
              var result = this._buttonFitting;
              if (result == null) {
                  result = this.newButtonFitting();
                  this._buttonFitting = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newButtonFitting = function () {
          var _this = this;
          return new wcardinalUi.DButtonCheckRight({
              width: "100%",
              text: {
                  value: this.theme.getButtonFittingLabel()
              },
              padding: 0,
              background: {
                  color: null
              },
              on: {
                  active: function () {
                      _this._selection.setTextFitting(true);
                  },
                  inactive: function () {
                      _this._selection.setTextFitting(false);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputSpacingHorizontal", {
          get: function () {
              var result = this._inputSpacingHorizontal;
              if (result == null) {
                  result = this.newInputSpacingHorizontal();
                  this._inputSpacingHorizontal = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputSpacingHorizontal = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextSpacingHorizontal(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputSpacingVertical", {
          get: function () {
              var result = this._inputSpacingVertical;
              if (result == null) {
                  result = this.newInputSpacingVertical();
                  this._inputSpacingVertical = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputSpacingVertical = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextSpacingVertical(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputPaddingHorizontal", {
          get: function () {
              var result = this._inputPaddingHorizontal;
              if (result == null) {
                  result = this.newInputPaddingHorizontal();
                  this._inputPaddingHorizontal = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputPaddingHorizontal = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextPaddingHorizontal(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputPaddingVertical", {
          get: function () {
              var result = this._inputTextPaddingVertical;
              if (result == null) {
                  result = this.newInputPaddingVertical();
                  this._inputTextPaddingVertical = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputPaddingVertical = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextPaddingVertical(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputOffsetHorizontal", {
          get: function () {
              var result = this._inputOffsetHorizontal;
              if (result == null) {
                  result = this.newInputOffsetHorizontal();
                  this._inputOffsetHorizontal = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputOffsetHorizontal = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextOffsetHorizontal(value);
                  }
              }
          });
      };
      Object.defineProperty(EEditorText.prototype, "inputOffsetVertical", {
          get: function () {
              var result = this._inputOffsetVertical;
              if (result == null) {
                  result = this.newInputOffsetVertical();
                  this._inputOffsetVertical = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorText.prototype.newInputOffsetVertical = function () {
          var _this = this;
          return new wcardinalUi.DInputReal({
              weight: 1,
              step: 1,
              text: {
                  value: 0
              },
              on: {
                  change: function (value) {
                      _this._selection.setTextOffsetVertical(value);
                  }
              }
          });
      };
      EEditorText.prototype.onSelectionChange = function (selection) {
          var _a;
          this.state.isDisabled = selection.isEmpty();
          var last = selection.last();
          if (last != null) {
              var text = last.text;
              this.inputText.value = text.value;
              var textFamily = text.family;
              this.dropdownFontFamily.text = (_a = this.fontFamilies.get(textFamily)) !== null && _a !== void 0 ? _a : textFamily;
              var buttonFontColor = this.buttonFontColor.value;
              buttonFontColor.color = text.color;
              buttonFontColor.alpha = text.alpha;
              this.inputFontSize.value = text.size;
              this.buttonFontItalic.state.isActive = text.style === wcardinalUi.EShapeTextStyle.ITALIC;
              this.buttonFontBold.state.isActive = text.weight === wcardinalUi.EShapeTextWeight.BOLD;
              var outline = text.outline;
              this.buttonOutline.state.isActive = outline.enable;
              var buttonOutlineColor = this.buttonOutlineColor;
              var buttonOutlineColorValue = buttonOutlineColor.value;
              buttonOutlineColorValue.color = outline.color;
              buttonOutlineColorValue.alpha = outline.alpha;
              buttonOutlineColor.state.isDisabled = !outline.enable;
              var inputOutlineWidth = this.inputOutlineWidth;
              inputOutlineWidth.input.value = outline.width * 100;
              inputOutlineWidth.state.isDisabled = !outline.enable;
              this.buttonClipping.state.isActive = text.clipping;
              this.buttonFitting.state.isActive = text.fitting;
              var spacing = text.spacing;
              this.inputSpacingHorizontal.value = spacing.horizontal;
              this.inputSpacingVertical.value = spacing.vertical;
              var padding = text.padding;
              this.inputPaddingHorizontal.value = padding.horizontal;
              this.inputPaddingVertical.value = padding.vertical;
              var offset = text.offset;
              this.inputOffsetHorizontal.value = offset.horizontal;
              this.inputOffsetVertical.value = offset.vertical;
          }
      };
      EEditorText.prototype.getType = function () {
          return "EEditorText";
      };
      return EEditorText;
  }(wcardinalUi.DPane));

  var COMPARATOR = function (a, b) {
      return a[0] - b[0];
  };
  var EEditorTreeSelection = /** @class */ (function (_super) {
      __extends(EEditorTreeSelection, _super);
      function EEditorTreeSelection(parent, selection) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._selection = selection;
          return _this;
      }
      Object.defineProperty(EEditorTreeSelection.prototype, "parent", {
          get: function () {
              return this._parent;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorTreeSelection.prototype, "indices", {
          get: function () {
              var selection = this._selection;
              var result = [];
              this._parent.each(function (row, index) {
                  if (selection.contains(row)) {
                      result.push(index);
                  }
              });
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorTreeSelection.prototype, "rows", {
          get: function () {
              var selection = this._selection;
              var result = [];
              this._parent.each(function (row, index) {
                  if (selection.contains(row)) {
                      result.push(row);
                  }
              });
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorTreeSelection.prototype, "type", {
          get: function () {
              return wcardinalUi.DTableDataSelectionType.MULTIPLE;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorTreeSelection.prototype, "first", {
          get: function () {
              var row = this._selection.first();
              if (row) {
                  return this.toIndex(row);
              }
              return null;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EEditorTreeSelection.prototype, "last", {
          get: function () {
              var row = this._selection.last();
              if (row) {
                  return this.toIndex(row);
              }
              return null;
          },
          enumerable: false,
          configurable: true
      });
      EEditorTreeSelection.prototype.onNodeChange = function (nodes) {
          // DO NOTHING
      };
      EEditorTreeSelection.prototype.toggle = function (rowIndex) {
          var row = this._parent.get(rowIndex);
          if (row) {
              var selection = this._selection;
              var before = selection.store();
              selection.toggle(row);
              selection.focus();
              var after = selection.store();
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
          }
      };
      EEditorTreeSelection.prototype.add = function (rowIndex) {
          var row = this._parent.get(rowIndex);
          if (row) {
              var selection = this._selection;
              if (!selection.contains(row)) {
                  var before = selection.store();
                  selection.toggle(row);
                  selection.focus();
                  var after = selection.store();
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
              }
          }
      };
      EEditorTreeSelection.prototype.toIndex = function (target) {
          var result = null;
          this._parent.each(function (row, index) {
              if (target === row) {
                  result = index;
                  return false;
              }
              return true;
          });
          return result;
      };
      EEditorTreeSelection.prototype.addTo = function (rowIndex) {
          var last = this._selection.last();
          if (last != null) {
              var index = this.toIndex(last);
              if (index != null) {
                  this.addRange(index, false, rowIndex, true);
              }
          }
      };
      EEditorTreeSelection.prototype.addRange = function (from, includeFrom, to, includeTo) {
          var rows = [];
          var parent = this._parent;
          var selection = this._selection;
          if (from < to) {
              parent.each(function (row) {
                  if (!selection.contains(row)) {
                      rows.push(row);
                  }
              }, from + (includeFrom ? 0 : 1), to + (includeTo ? 1 : 0));
          }
          else {
              parent.each(function (row) {
                  if (!selection.contains(row)) {
                      rows.push(row);
                  }
              }, to + (includeTo ? 0 : 1), from + (includeFrom ? 1 : 0));
          }
          if (0 < rows.length) {
              var before = selection.store();
              selection.addAll(rows);
              selection.focus();
              var after = selection.store();
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
          }
      };
      EEditorTreeSelection.prototype.addAll = function (rowIndices) {
          if (0 < rowIndices.length) {
              var rows = [];
              var parent_1 = this._parent;
              var selection = this._selection;
              for (var i = 0, imax = rowIndices.length; i < imax; ++i) {
                  var row = parent_1.get(rowIndices[i]);
                  if (row && !selection.contains(row)) {
                      rows.push(row);
                  }
              }
              if (0 < rows.length) {
                  var before = selection.store();
                  selection.addAll(rows);
                  selection.focus();
                  var after = selection.store();
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
              }
          }
      };
      EEditorTreeSelection.prototype.contains = function (rowIndex) {
          var row = this._parent.get(rowIndex);
          if (row) {
              return this._selection.contains(row);
          }
          return false;
      };
      EEditorTreeSelection.prototype.remove = function (rowIndex) {
          var row = this._parent.get(rowIndex);
          if (row) {
              var selection = this._selection;
              if (selection.contains(row)) {
                  var before = selection.store();
                  selection.remove(row);
                  selection.focus();
                  var after = selection.store();
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
              }
          }
      };
      EEditorTreeSelection.prototype.clear = function () {
          var selection = this._selection;
          if (!selection.isEmpty()) {
              var before = selection.store();
              selection.clear();
              selection.focus();
              var after = selection.store();
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
          }
      };
      EEditorTreeSelection.prototype.clearAndAdd = function (rowIndex) {
          var row = this._parent.get(rowIndex);
          if (row) {
              var selection = this._selection;
              if (selection.contains(row)) {
                  if (1 < selection.size()) {
                      var before = selection.store();
                      selection.set(row);
                      selection.focus();
                      var after = selection.store();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                  }
                  else {
                      selection.focus();
                  }
              }
              else {
                  var before = selection.store();
                  selection.set(row);
                  selection.focus();
                  var after = selection.store();
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
              }
          }
      };
      EEditorTreeSelection.prototype.clearAndAddAll = function (rowIndices) {
          var selection = this._selection;
          if (!selection.isEmpty() || 0 < rowIndices.length) {
              var rows = [];
              var parent_2 = this._parent;
              for (var i = 0, imax = rowIndices.length; i < imax; ++i) {
                  var row = parent_2.get(rowIndices[i]);
                  if (row) {
                      rows.push(row);
                  }
              }
              var before = selection.store();
              selection.clearAndAddAll(rows);
              selection.focus();
              var after = selection.store();
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
          }
      };
      EEditorTreeSelection.prototype.shift = function (rowIndex, amount) {
          // DO NOTHING
      };
      EEditorTreeSelection.prototype.size = function () {
          return this._selection.size();
      };
      EEditorTreeSelection.prototype.isEmpty = function () {
          return this._selection.isEmpty();
      };
      EEditorTreeSelection.prototype.each = function (iteratee) {
          var selection = this._selection;
          this._parent.each(function (row, index) {
              if (selection.contains(row)) {
                  if (iteratee(index) === false) {
                      return false;
                  }
              }
              return true;
          });
      };
      EEditorTreeSelection.prototype.toArray = function () {
          var selection = this._selection;
          var result = [];
          this._parent.each(function (row, index) {
              if (selection.contains(row)) {
                  result.push([index, row]);
              }
          });
          return result;
      };
      EEditorTreeSelection.prototype.toSortedArray = function () {
          return this.toArray().sort(COMPARATOR);
      };
      EEditorTreeSelection.prototype.toObject = function () {
          var selection = this._selection;
          var result = {};
          this._parent.each(function (row, index) {
              if (selection.contains(row)) {
                  result[index] = row;
              }
          });
          return result;
      };
      EEditorTreeSelection.prototype.toMap = function () {
          var selection = this._selection;
          var result = new Map();
          this._parent.each(function (row, index) {
              if (selection.contains(row)) {
                  result.set(index, row);
              }
          });
          return result;
      };
      return EEditorTreeSelection;
  }(pixi_js.utils.EventEmitter));

  var EEditorTree = /** @class */ (function (_super) {
      __extends(EEditorTree, _super);
      function EEditorTree(options) {
          var _this = _super.call(this, options) || this;
          _this._icons = options.icons;
          var diagram = options.diagram;
          _this._diagram = diagram;
          _this._selection = options.selection;
          _this._isInitialized = false;
          _this._updatedParts = EToolSelectSelectionUpdatedPart.NONE;
          return _this;
      }
      EEditorTree.prototype.show = function () {
          _super.prototype.show.call(this);
          this.onShow();
          return this;
      };
      EEditorTree.prototype.onShow = function () {
          if (!this._isInitialized) {
              this._isInitialized = true;
              this.initLayout();
          }
          this.onSelectionChange(EToolSelectSelectionUpdatedPart.NONE);
      };
      EEditorTree.prototype.initLayout = function () {
          var _this = this;
          this.addChild(this.layoutOrder);
          this.addChild(this.table);
          // Selection change event handling
          this._selection.on("change", function (parts) {
              _this.onSelectionChange(parts);
          });
          // Layer change even handling
          var onLayerChangeBound = function () {
              _this.onLayerChange();
          };
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          if (canvas) {
              this.state.isDisabled = false;
              canvas.layer.on("change", onLayerChangeBound);
          }
          else {
              this.state.isDisabled = true;
          }
          diagram.on("set", function (newCanvas) {
              _this.state.isDisabled = false;
              newCanvas.layer.on("change", onLayerChangeBound);
          });
          diagram.on("ready", function () {
              _this.onLayerChange();
          });
          diagram.on("unset", function (oldCanvas) {
              _this.state.isDisabled = true;
              _this.onLayerChange();
              oldCanvas.layer.off("change", onLayerChangeBound);
          });
          this.onLayerChange();
      };
      Object.defineProperty(EEditorTree.prototype, "layoutOrder", {
          get: function () {
              var _a;
              return ((_a = this._layerOrder) !== null && _a !== void 0 ? _a : (this._layerOrder = this.newLayoutOrder()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newLayoutOrder = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [
                  this.newTextLabel(),
                  this.buttonBringToFront,
                  this.buttonBringForward,
                  this.buttonSendBackward,
                  this.buttonSendToBack
              ]
          });
      };
      EEditorTree.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorTree.prototype, "buttonBringToFront", {
          get: function () {
              var _a;
              return ((_a = this._buttonBringToFront) !== null && _a !== void 0 ? _a : (this._buttonBringToFront = this.newButtonBringToFront()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newButtonBringToFront = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_to_top
              },
              title: this.theme.getButtonBringToFrontTitle(),
              on: {
                  active: function () {
                      _this._selection.bringToFront();
                  }
              }
          });
      };
      Object.defineProperty(EEditorTree.prototype, "buttonBringForward", {
          get: function () {
              var _a;
              return ((_a = this._buttonBringForward) !== null && _a !== void 0 ? _a : (this._buttonBringForward = this.newButtonBringForward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newButtonBringForward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_up
              },
              title: this.theme.getButtonBringForwardTitle(),
              on: {
                  active: function () {
                      _this._selection.bringForward();
                  }
              }
          });
      };
      Object.defineProperty(EEditorTree.prototype, "buttonSendBackward", {
          get: function () {
              var _a;
              return ((_a = this._buttonSendBackward) !== null && _a !== void 0 ? _a : (this._buttonSendBackward = this.newButtonSendBackward()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newButtonSendBackward = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_down
              },
              title: this.theme.getButtonSendBackwardTitle(),
              on: {
                  active: function () {
                      _this._selection.sendBackward();
                  }
              }
          });
      };
      Object.defineProperty(EEditorTree.prototype, "buttonSendToBack", {
          get: function () {
              var _a;
              return ((_a = this._buttonSendToBack) !== null && _a !== void 0 ? _a : (this._buttonSendToBack = this.newButtonSendToBack()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newButtonSendToBack = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.arrow_to_bottom
              },
              title: this.theme.getButtonSendToBackTitle(),
              on: {
                  active: function () {
                      _this._selection.sendToBack();
                  }
              }
          });
      };
      EEditorTree.prototype.onSelectionChange = function (parts) {
          var _a;
          if (this.isShown()) {
              parts |= this._updatedParts;
              this._updatedParts = EToolSelectSelectionUpdatedPart.NONE;
              if (parts & EToolSelectSelectionUpdatedPart.TREE) {
                  this.table.data.nodes = (_a = this._diagram.layer) === null || _a === void 0 ? void 0 : _a.children;
              }
              else if (parts & EToolSelectSelectionUpdatedPart.SELECTION) {
                  this.table.data.update();
              }
              else if (parts & EToolSelectSelectionUpdatedPart.PROPERTY_ID) {
                  this.table.data.update(true);
              }
              this.layoutOrder.state.isEnabled = wcardinalUi.EShapeCapabilities.contains(this._selection.last(), wcardinalUi.EShapeCapability.ORDER_IN_LAYER);
          }
          else {
              this._updatedParts |= parts;
          }
      };
      EEditorTree.prototype.onLayerChange = function () {
          var _a;
          this.table.data.nodes = (_a = this._diagram.layer) === null || _a === void 0 ? void 0 : _a.children;
      };
      Object.defineProperty(EEditorTree.prototype, "table", {
          get: function () {
              var _a;
              return ((_a = this._table) !== null && _a !== void 0 ? _a : (this._table = this.newTable()));
          },
          enumerable: false,
          configurable: true
      });
      EEditorTree.prototype.newTable = function () {
          var _this = this;
          return new wcardinalUi.DTable({
              x: "padding",
              width: "padding",
              weight: 1,
              columns: [
                  {
                      type: "TREE",
                      editable: true,
                      getter: function (row) {
                          return toShapeLabel(row);
                      },
                      setter: function (row, columnIndex, cell) {
                          if (row.id !== cell) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyId(_this._selection, cell, [row]));
                          }
                      }
                  }
              ],
              data: new wcardinalUi.DTableDataTree({
                  reverse: true,
                  toChildren: function (shape) {
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.CHILDREN)) {
                          return shape.children;
                      }
                      return null;
                  },
                  selection: function (parent) {
                      return new EEditorTreeSelection(parent, _this._selection);
                  }
              }),
              on: {
                  keydown: function (e) {
                      if (wcardinalUi.UtilKeyboardEvent.isDeleteKey(e)) {
                          _this._selection.delete();
                          e.preventDefault();
                      }
                  }
              }
          });
      };
      EEditorTree.prototype.getType = function () {
          return "EEditorTree";
      };
      return EEditorTree;
  }(wcardinalUi.DLayoutVertical));

  var EEditorValidation = /** @class */ (function (_super) {
      __extends(EEditorValidation, _super);
      function EEditorValidation(options) {
          var _this = _super.call(this, options) || this;
          // Selection
          var selection = options.selection;
          _this._selection = selection;
          // Icons
          _this._icons = options.icons;
          // Verifier
          _this._validator = options.validator;
          // Diagram
          var diagram = options.diagram;
          _this._diagram = diagram;
          _this.state.isDisabled = diagram.canvas == null;
          diagram.on("unset", function () {
              _this.list.data.clear();
              _this.state.isDisabled = true;
          });
          diagram.on("set", function () {
              _this.state.isDisabled = false;
          });
          // Layout
          _this.addChild(new wcardinalUi.DLayoutHorizontal({
              x: "padding",
              width: "padding",
              height: "auto",
              children: [_this.newTextLabel(), _this.buttonRevalidate]
          }));
          _this.addChild(_this.list);
          return _this;
      }
      EEditorValidation.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              weight: 1,
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      Object.defineProperty(EEditorValidation.prototype, "buttonRevalidate", {
          get: function () {
              var result = this._buttonRevalidate;
              if (result == null) {
                  result = this.newButtonRevalidate();
                  this._buttonRevalidate = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorValidation.prototype.newButtonRevalidate = function () {
          var _this = this;
          return new wcardinalUi.DButtonAmbient({
              width: 30,
              image: {
                  source: this._icons.refresh
              },
              title: this.theme.getButtonRevalidateTitle(),
              on: {
                  active: function (emitter) {
                      _this.onButtonValidateActive(emitter);
                  }
              }
          });
      };
      EEditorValidation.prototype.onButtonValidateActive = function (opener) {
          var validator = this._validator;
          if (validator != null) {
              var canvas = this._diagram.canvas;
              if (canvas != null) {
                  var dialogProcessing_1 = this.dialogProcessing;
                  dialogProcessing_1.open(opener);
                  var data_1 = this.list.data;
                  try {
                      var result = validator(canvas);
                      if (wcardinalUi.isArray(result)) {
                          data_1.clearAndAddAll(result);
                          dialogProcessing_1.resolve();
                      }
                      else {
                          result.then(function (results) {
                              data_1.clearAndAddAll(results);
                              dialogProcessing_1.resolve();
                          }, function () {
                              data_1.clear();
                              dialogProcessing_1.reject();
                          });
                      }
                  }
                  catch (_a) {
                      data_1.clear();
                      dialogProcessing_1.reject();
                  }
              }
          }
      };
      Object.defineProperty(EEditorValidation.prototype, "list", {
          get: function () {
              var result = this._list;
              if (result == null) {
                  result = this.newList();
                  this._list = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorValidation.prototype.newList = function () {
          var _this = this;
          var result = new wcardinalUi.DList({
              width: "padding",
              weight: 1,
              data: {
                  toLabel: function (value) {
                      return value.message;
                  }
              },
              updater: {
                  newItem: function (data) {
                      return new wcardinalUi.DListItem(data, {
                          on: {
                              select: function (value, item) {
                                  _this.onListItemDown(value, item);
                              }
                          }
                      });
                  }
              }
          });
          return result;
      };
      EEditorValidation.prototype.onListItemDown = function (value, item) {
          var shape = value.shape;
          if (shape != null) {
              var canvas = this._diagram.canvas;
              var layer = shape.root.parent;
              if (canvas != null && layer != null) {
                  // Selection
                  var selection = this._selection;
                  var before = selection.store();
                  if (selection.set(shape)) {
                      selection.focus();
                      var after = selection.store();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                  }
                  else {
                      selection.focus();
                  }
                  // Change the active layer
                  var layerActive = canvas.layer.active;
                  if (layerActive !== layer) {
                      canvas.layer.active = layer;
                  }
              }
              else {
                  this.dialogError.open(item);
              }
          }
      };
      Object.defineProperty(EEditorValidation.prototype, "dialogError", {
          get: function () {
              var result = this._dialogError;
              if (result == null) {
                  result = this.newDialogError();
                  this._dialogError = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorValidation.prototype.newDialogError = function () {
          return new wcardinalUi.DDialogMessage({
              message: "No shapes found."
          });
      };
      Object.defineProperty(EEditorValidation.prototype, "dialogProcessing", {
          get: function () {
              var result = this._dialogProcessing;
              if (result == null) {
                  result = this.newDialogProcessing();
                  this._dialogProcessing = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EEditorValidation.prototype.newDialogProcessing = function () {
          return new wcardinalUi.DDialogProcessing({
              footer: {
                  button: {
                      ok: "OK",
                      cancel: null
                  }
              }
          });
      };
      EEditorValidation.prototype.getType = function () {
          return "EEditorValidation";
      };
      return EEditorValidation;
  }(wcardinalUi.DLayoutVertical));

  var EToolGroupImpl = /** @class */ (function () {
      function EToolGroupImpl() {
          this._isSuspended = false;
          this._active = null;
          this._activeParameter = null;
      }
      EToolGroupImpl.prototype.activate = function (target, parameter) {
          var oldActive = this._active;
          var oldActiveParameter = this._activeParameter;
          if (oldActive !== target || oldActiveParameter !== parameter) {
              this._activeParameter = parameter;
              if (oldActive !== target) {
                  if (oldActive) {
                      oldActive.deactivate();
                  }
                  this._active = target;
                  if (!this._isSuspended) {
                      target.activate();
                  }
              }
          }
      };
      EToolGroupImpl.prototype.deactivate = function (target, parameter) {
          if (this._active === target && this._activeParameter === parameter) {
              this._active = null;
              this._activeParameter = null;
              target.deactivate();
          }
      };
      EToolGroupImpl.prototype.suspend = function () {
          if (!this._isSuspended) {
              this._isSuspended = true;
              var active = this._active;
              if (active) {
                  active.deactivate();
              }
          }
      };
      EToolGroupImpl.prototype.resume = function () {
          if (this._isSuspended) {
              this._isSuspended = false;
              var active = this._active;
              if (active) {
                  active.activate();
              }
          }
      };
      EToolGroupImpl.prototype.isSuspended = function () {
          return this._isSuspended;
      };
      return EToolGroupImpl;
  }());

  var EToolImpl = /** @class */ (function (_super) {
      __extends(EToolImpl, _super);
      function EToolImpl() {
          var _this = _super.call(this) || this;
          _this._isActive = false;
          return _this;
      }
      EToolImpl.prototype.activate = function () {
          if (!this._isActive) {
              this._isActive = true;
              this.onActivate();
          }
      };
      EToolImpl.prototype.deactivate = function () {
          if (this._isActive) {
              this._isActive = false;
              this.onDeactivate();
          }
      };
      EToolImpl.prototype.onActivate = function () {
          // DO NOTHING
      };
      EToolImpl.prototype.onDeactivate = function () {
          // DO NOTHING
      };
      EToolImpl.prototype.isActive = function () {
          return this._isActive;
      };
      return EToolImpl;
  }(pixi_js.utils.EventEmitter));

  var FILL_COLOR = 0x1e87f0;
  var FILL_ALPHA = 0.5;
  var EToolSelectArea = /** @class */ (function (_super) {
      __extends(EToolSelectArea, _super);
      function EToolSelectArea() {
          var _this = _super.call(this) || this;
          _this._size = new pixi_js.Point();
          return _this;
      }
      Object.defineProperty(EToolSelectArea.prototype, "size", {
          get: function () {
              return this._size;
          },
          enumerable: false,
          configurable: true
      });
      EToolSelectArea.prototype.update = function () {
          this.clear();
          var size = this._size;
          var x = Math.min(0, size.x);
          var y = Math.min(0, size.y);
          var width = Math.abs(size.x);
          var height = Math.abs(size.y);
          this.beginFill(FILL_COLOR, FILL_ALPHA);
          this.drawRect(x, y, width, height);
          this.endFill();
      };
      return EToolSelectArea;
  }(pixi_js.Graphics));

  var EToolSelectMode;
  (function (EToolSelectMode) {
      EToolSelectMode[EToolSelectMode["NONE"] = 0] = "NONE";
      EToolSelectMode[EToolSelectMode["SELECT"] = 1] = "SELECT";
      EToolSelectMode[EToolSelectMode["TRANSLATE"] = 2] = "TRANSLATE";
      EToolSelectMode[EToolSelectMode["SCALE"] = 3] = "SCALE";
      EToolSelectMode[EToolSelectMode["ROTATE"] = 4] = "ROTATE";
  })(EToolSelectMode || (EToolSelectMode = {}));

  var EToolSelectModifierContainer = /** @class */ (function (_super) {
      __extends(EToolSelectModifierContainer, _super);
      function EToolSelectModifierContainer() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return EToolSelectModifierContainer;
  }(pixi_js.Container));

  var EToolSelectModifierHitArea = /** @class */ (function (_super) {
      __extends(EToolSelectModifierHitArea, _super);
      function EToolSelectModifierHitArea(modifier) {
          var _this = _super.call(this) || this;
          _this._modifier = modifier;
          return _this;
      }
      EToolSelectModifierHitArea.prototype.contains = function (x, y) {
          var modifier = this._modifier;
          var s = modifier.getAnchorSize() * 2;
          var t = s * 0.5;
          var w = modifier.width;
          var h = modifier.height;
          var p = w * 0.5;
          var q = h * 0.5;
          var d = modifier.getAnchorRotationDistance();
          var r = modifier.getAnchorRotationSize() * 2;
          // Top left
          if (0 - t <= x && 0 - t <= y && x <= 0 - t + s && y <= 0 - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.TOP_LEFT);
              return true;
          }
          // Top right
          if (w - t <= x && 0 - t <= y && x <= w - t + s && y <= 0 - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.TOP_RIGHT);
              return true;
          }
          // Bottom left
          if (0 - t <= x && h - t <= y && x <= 0 - t + s && y <= h - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.BOTTOM_LEFT);
              return true;
          }
          // Bottom right
          if (w - t <= x && h - t <= y && x <= w - t + s && y <= h - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.BOTTOM_RIGHT);
              return true;
          }
          // Top Center
          if (p - t <= x && 0 - t <= y && x <= p - t + s && y <= 0 - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.TOP_CENTER);
              return true;
          }
          // Middle Right
          if (w - t <= x && q - t <= y && x <= w - t + s && y <= q - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.MIDDLE_RIGHT);
              return true;
          }
          // Bottom Center
          if (p - t <= x && h - t <= y && x <= p - t + s && y <= h - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.BOTTOM_CENTER);
              return true;
          }
          // Middle Left
          if (0 - t <= x && q - t <= y && x <= 0 - t + s && y <= q - t + s) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.MIDDLE_LEFT);
              return true;
          }
          // Rotate
          if (p - r <= x && d - r <= y && x <= p + r && y <= d + r) {
              modifier.setLastHitAnchor(wcardinalUi.ESnapperModifierAnchor.ROTATION);
              return true;
          }
          return false;
      };
      return EToolSelectModifierHitArea;
  }(pixi_js.Rectangle));

  var EToolSelectModifier = /** @class */ (function (_super) {
      __extends(EToolSelectModifier, _super);
      function EToolSelectModifier(options) {
          var _this = _super.call(this) || this;
          _this.selected = false;
          _this.index = 0;
          _this._width = 0;
          _this._height = 0;
          _this._scaleBound = 1;
          _this._scaleBoundInverse = 1;
          _this._isAllowed = true;
          _this._lastHitAnchor = wcardinalUi.ESnapperModifierAnchor.NONE;
          if (options == null || options.editable !== false) {
              _this.cursor = "grab";
              _this.interactive = true;
              _this.hitArea = new EToolSelectModifierHitArea(_this);
          }
          else {
              _this.interactive = false;
          }
          _this.group = false;
          _this._anchorBase = new wcardinalUi.EShapeRectangle().attach(_this);
          _this._anchorsScale = [
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this),
              new wcardinalUi.EShapeRectangle().attach(_this)
          ];
          _this._anchorRotate = new wcardinalUi.EShapeCircle().attach(_this);
          return _this;
      }
      EToolSelectModifier.prototype.onPrerender = function () {
          var scale0 = this.getParentScale();
          var scale1 = this._scaleBound;
          if (0.001 < Math.abs(scale0 - scale1)) {
              this._scaleBound = scale0;
              this._scaleBoundInverse = 1 / scale0;
              this.update();
          }
      };
      EToolSelectModifier.prototype.render = function (renderer) {
          if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
              return;
          }
          this.onPrerender();
          _super.prototype.render.call(this, renderer);
      };
      EToolSelectModifier.prototype.getParentScale = function () {
          var parent = this.parent;
          if (parent != null) {
              var parentParent = parent.parent;
              if (parentParent != null) {
                  return parentParent.scale.y;
              }
          }
          return 1;
      };
      Object.defineProperty(EToolSelectModifier.prototype, "factor", {
          get: function () {
              return this._scaleBoundInverse;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EToolSelectModifier.prototype, "width", {
          get: function () {
              return this._width;
          },
          set: function (width) {
              this._width = width;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EToolSelectModifier.prototype, "height", {
          get: function () {
              return this._height;
          },
          set: function (height) {
              this._height = height;
          },
          enumerable: false,
          configurable: true
      });
      EToolSelectModifier.prototype.getLastHitAnchor = function () {
          return this._lastHitAnchor;
      };
      EToolSelectModifier.prototype.setLastHitAnchor = function (anchor) {
          var result = this._lastHitAnchor;
          this._lastHitAnchor = anchor;
          return result;
      };
      EToolSelectModifier.prototype.getAnchorSize = function () {
          return 7 * this._scaleBoundInverse;
      };
      EToolSelectModifier.prototype.getAnchorRotationDistance = function () {
          return (0 <= this._height ? -18 : +18) * this._scaleBoundInverse;
      };
      EToolSelectModifier.prototype.getAnchorRotationSize = function () {
          return 5 * this._scaleBoundInverse;
      };
      EToolSelectModifier.prototype.update = function () {
          var color = this.group ? 0x1ef087 : 0x1e87f0;
          var width = this._width;
          var height = this._height;
          var scaleInverse = this._scaleBoundInverse;
          var s = this.getAnchorSize();
          var w = width;
          var h = height;
          var p = w * 0.5;
          var q = h * 0.5;
          var d = this.getAnchorRotationDistance();
          var r = 2 * this.getAnchorRotationSize();
          var l = 2 * scaleInverse;
          var o = 1.5 * l;
          // Anchor base
          var anchorBase = this._anchorBase;
          anchorBase.lock(wcardinalUi.EShapeLockPart.UPLOADED);
          anchorBase.fill.enable = false;
          anchorBase.stroke.set(true, color, 0.333, l, 2);
          anchorBase.transform.position.set(width * 0.5, height * 0.5);
          anchorBase.size.set(width, height);
          anchorBase.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          // Anchor for rotation
          var anchorRotate = this._anchorRotate;
          anchorRotate.lock(wcardinalUi.EShapeLockPart.UPLOADED);
          anchorRotate.stroke.enable = false;
          anchorRotate.fill.set(true, color, 1.0);
          anchorRotate.size.set(r, r);
          anchorRotate.transform.position.set(p, d);
          anchorRotate.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          // Anchor for scaling
          var anchorsScale = this._anchorsScale;
          for (var i = 0, imax = anchorsScale.length; i < imax; ++i) {
              var anchorScale = anchorsScale[i];
              anchorScale.lock(wcardinalUi.EShapeLockPart.UPLOADED);
              anchorScale.stroke.enable = false;
              anchorScale.fill.set(true, color, 1.0);
              anchorScale.size.set(s, s);
          }
          anchorsScale[0].transform.position.set(-o, -o);
          anchorsScale[1].transform.position.set(+o + w, -o);
          anchorsScale[2].transform.position.set(-o, +o + h);
          anchorsScale[3].transform.position.set(+o + w, +o + h);
          anchorsScale[4].transform.position.set(p, -o);
          anchorsScale[5].transform.position.set(+o + w, q);
          anchorsScale[6].transform.position.set(p, +o + h);
          anchorsScale[7].transform.position.set(-o, q);
          for (var i = 0, imax = anchorsScale.length; i < imax; ++i) {
              anchorsScale[i].unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          }
      };
      EToolSelectModifier.prototype.allow = function () {
          this._isAllowed = true;
      };
      EToolSelectModifier.prototype.isAllowed = function () {
          return this._isAllowed;
      };
      EToolSelectModifier.prototype.disallow = function () {
          this._isAllowed = false;
      };
      EToolSelectModifier.prototype.destroy = function () {
          var parent = this.parent;
          if (parent) {
              parent.removeChild(this);
          }
      };
      return EToolSelectModifier;
  }(wcardinalUi.EShapeContainer));

  /*
   * Copyright (C) 2019 Toshiba Corporation
   * SPDX-License-Identifier: Apache-2.0
   */
  var UtilShapeConnectorTransformData = /** @class */ (function (_super) {
      __extends(UtilShapeConnectorTransformData, _super);
      function UtilShapeConnectorTransformData() {
          var _this = _super.call(this) || this;
          _this.tailVector = new pixi_js.Point();
          _this.headVector = new pixi_js.Point();
          return _this;
      }
      return UtilShapeConnectorTransformData;
  }(wcardinalUi.EShapeEditor));
  var UtilShapeConnectorTransforms = /** @class */ (function () {
      function UtilShapeConnectorTransforms() {
      }
      UtilShapeConnectorTransforms.prepare = function (connector) {
          var editor = null;
          if (connector.editor instanceof UtilShapeConnectorTransformData) {
              editor = connector.editor;
          }
          else {
              editor = new UtilShapeConnectorTransformData();
              connector.editor = editor;
          }
          // Edges
          var tailVector = editor.tailVector;
          var headVector = editor.headVector;
          var edge = connector.edge;
          edge.tail.local.copyTo(tailVector);
          edge.head.local.copyTo(headVector);
          var localTransform = connector.transform.localTransform;
          localTransform.applyInverse(tailVector, tailVector);
          localTransform.applyInverse(headVector, headVector);
          // Other preparations
          UtilShapeTransforms.prepare(connector);
      };
      UtilShapeConnectorTransforms.finalize = function (connector) {
          UtilShapeTransforms.finalize(connector);
      };
      UtilShapeConnectorTransforms.apply = function (connector, transform) {
          var editor = connector.editor;
          if (editor instanceof UtilShapeConnectorTransformData) {
              var localTransform = editor.localTransform;
              editor.internalTransformParentInverse
                  .copyTo(localTransform)
                  .append(transform)
                  .append(editor.internalTransform);
              var a = localTransform.a;
              var b = localTransform.b;
              var c = localTransform.c;
              var d = localTransform.d;
              var tx = localTransform.tx;
              var ty = localTransform.ty;
              var edge = connector.edge;
              var tail = edge.tail;
              var head = edge.head;
              var editorTailVector = editor.tailVector;
              var editorTailVectorX = editorTailVector.x;
              var editorTailVectorY = editorTailVector.y;
              var newTailLocalX = a * editorTailVectorX + c * editorTailVectorY + tx;
              var newTailLocalY = b * editorTailVectorX + d * editorTailVectorY + ty;
              var editorHeadVector = editor.headVector;
              var editorHeadVectorX = editorHeadVector.x;
              var editorHeadVectorY = editorHeadVector.y;
              var newHeadLocalX = a * editorHeadVectorX + c * editorHeadVectorY + tx;
              var newHeadLocalY = b * editorHeadVectorX + d * editorHeadVectorY + ty;
              edge.lock();
              tail.local.set(newTailLocalX, newTailLocalY);
              head.local.set(newHeadLocalX, newHeadLocalY);
              edge.unlock();
          }
      };
      return UtilShapeConnectorTransforms;
  }());

  var ECommandShapePropertyLineStyle = /** @class */ (function (_super) {
      __extends(ECommandShapePropertyLineStyle, _super);
      function ECommandShapePropertyLineStyle() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ECommandShapePropertyLineStyle.prototype.toCapability = function (shape) {
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE)) {
              return wcardinalUi.EShapeCapability.LINE;
          }
          return wcardinalUi.EShapeCapability.NONE;
      };
      return ECommandShapePropertyLineStyle;
  }(ECommandShapePropertyStrokeStyle));

  var initLeft = function (rect) {
      return rect.x;
  };
  var initCenter = function (rect) {
      return rect.x + rect.width * 0.5;
  };
  var initRight = function (rect) {
      return rect.x + rect.width;
  };
  var initTop = function (rect) {
      return rect.y;
  };
  var initMiddle = function (rect) {
      return rect.y + rect.height * 0.5;
  };
  var initBottom = function (rect) {
      return rect.y + rect.height;
  };
  var initWidth = function (rect) {
      return rect.width;
  };
  var initHeight = function (rect) {
      return rect.height;
  };
  var initZero = function (rect) {
      return 0;
  };
  var updateMin = function (valueA, valueB) {
      return Math.min(valueA, valueB);
  };
  var updateMax = function (valueA, valueB) {
      return Math.max(valueA, valueB);
  };
  var updateSum = function (valueA, valueB) {
      return valueA + valueB;
  };
  var finishupIdentity = function (value, size) {
      return value;
  };
  var finishupAverage = function (value, size) {
      return value / size;
  };
  var assingX = function (value, point) {
      point.x = value;
  };
  var assingY = function (value, point) {
      point.y = value;
  };
  var applyLeft = function (point, diff, scale, shape) {
      shape.transform.position.x = point.x + diff / scale.x;
  };
  var applyCenter = function (point, diff, scale, shape) {
      shape.transform.position.x = point.x;
  };
  var applyRight = function (point, diff, scale, shape) {
      shape.transform.position.x = point.x - diff / scale.x;
  };
  var applyTop = function (point, diff, scale, shape) {
      shape.transform.position.y = point.y + diff / scale.y;
  };
  var applyMiddle = function (point, diff, scale, shape) {
      shape.transform.position.y = point.y;
  };
  var applyBottom = function (point, diff, scale, shape) {
      shape.transform.position.y = point.y - diff / scale.y;
  };
  var EToolSelectSelection = /** @class */ (function (_super) {
      __extends(EToolSelectSelection, _super);
      function EToolSelectSelection(options) {
          var _this = _super.call(this) || this;
          var diagram = options.diagram;
          _this._diagram = diagram;
          var modifier = new EToolSelectModifier(options.modifier);
          _this._modifier = modifier;
          var modifierContainer = new EToolSelectModifierContainer();
          modifierContainer.addChild(modifier);
          diagram.on("unset", function (canvas) {
              if (modifierContainer.parent === canvas) {
                  // Because after this event, a canvas is destroyed.
                  // At that time, all its children also be destroyed.
                  // The modifier container therefore should be removed.
                  canvas.removeChild(modifierContainer);
              }
          });
          _this._modifierContainer = modifierContainer;
          _this._originGlobal = new pixi_js.Point();
          _this._originLocal = new pixi_js.Point();
          _this._rotationAxisGlobal = new pixi_js.Point();
          _this._scale = new pixi_js.Point();
          _this._scaleAxis0 = new pixi_js.Point();
          _this._scaleAxis1 = new pixi_js.Point();
          _this._scaleDet = 1;
          _this._scaleDetInverse = 1;
          _this._scaleTransform = new pixi_js.Matrix();
          _this._scaleTransformInverse = new pixi_js.Matrix();
          _this._scaleAnchor = wcardinalUi.ESnapperModifierAnchor.NONE;
          _this._shapes = [];
          _this._shapeBound = new pixi_js.Rectangle();
          _this._shapeBoundRect = new pixi_js.Rectangle();
          _this._alignPoint = new pixi_js.Point();
          _this._alignRectangle = new pixi_js.Rectangle();
          _this._shiftPoint1 = new pixi_js.Point();
          _this._shiftPoint2 = new pixi_js.Point();
          _this._transform = new pixi_js.Matrix();
          _this._translateDelta = new pixi_js.Point();
          _this._isUpdated = false;
          _this._updatedParts = EToolSelectSelectionUpdatedPart.NONE;
          _this._lockCount = 0;
          return _this;
      }
      EToolSelectSelection.prototype.lock = function () {
          this._lockCount += 1;
          if (this._lockCount === 1) {
              this._isUpdated = false;
              this._updatedParts = EToolSelectSelectionUpdatedPart.NONE;
          }
      };
      EToolSelectSelection.prototype.unlock = function () {
          this._lockCount -= 1;
          if (this._lockCount === 0) {
              if (this._isUpdated) {
                  this.update(this._updatedParts);
              }
          }
      };
      EToolSelectSelection.prototype.update = function (parts) {
          var parsed = EToolSelectSelectionUpdatedPart.ALL;
          if (parts != null) {
              if (wcardinalUi.isNumber(parts)) {
                  parsed = parts;
              }
              else {
                  // eslint-disable-next-line prefer-rest-params
                  parsed = this.toParts(arguments);
              }
          }
          if (this._lockCount <= 0) {
              this.updateModifier();
              this.emit("change", parsed, this);
          }
          else {
              this._isUpdated = true;
              this._updatedParts |= parsed;
          }
      };
      EToolSelectSelection.prototype.toParts = function (parts) {
          if (wcardinalUi.isNumber(parts)) {
              return parts;
          }
          var result = EToolSelectSelectionUpdatedPart.NONE;
          for (var i = 0, imax = parts.length; i < imax; ++i) {
              result |= EToolSelectSelectionUpdatedPart[parts[i]];
          }
          return result;
      };
      EToolSelectSelection.prototype.updateModifier = function () {
          var diagram = this._diagram;
          var modifier = this._modifier;
          if (modifier.isAllowed()) {
              var shapes = this._shapes;
              var canvas = diagram.canvas;
              var modifierContainer = this._modifierContainer;
              if (canvas == null || shapes.length <= 0) {
                  modifier.visible = false;
                  wcardinalUi.DApplications.update(diagram);
              }
              else if (shapes.length <= 1) {
                  var shape = shapes[0];
                  if (shape.parent instanceof wcardinalUi.EShapeBase) {
                      shape.updateTransform();
                      var internalTransform = shape.transform.internalTransform;
                      var a = internalTransform.a;
                      var b = internalTransform.b;
                      var c = internalTransform.c;
                      var d = internalTransform.d;
                      var pivot = shape.transform.pivot;
                      var modifierPosition = modifier.position;
                      modifierPosition.set(a * pivot.x + c * pivot.y + internalTransform.tx, b * pivot.x + d * pivot.y + internalTransform.ty);
                      var layer = shape.root.parent;
                      if (layer) {
                          modifierContainer.transform.position.copyFrom(layer.transform.position);
                      }
                      else {
                          modifierContainer.transform.position.set(0, 0);
                      }
                      var width = shape.size.x * Math.sqrt(a * a + b * b);
                      var height = shape.size.y * Math.sqrt(c * c + d * d);
                      modifier.width = width;
                      modifier.height = height;
                      modifier.pivot.set(width * 0.5, height * 0.5);
                      var rx = Math.atan2(-c, d);
                      var ry = Math.atan2(+b, a);
                      var skew = (ry - rx) * 0.5;
                      var rotation = (rx + ry) * 0.5;
                      modifier.rotation = rotation;
                      modifier.skew.set(skew, skew);
                  }
                  else {
                      shape.updateTransform();
                      var internalTransform = shape.transform.internalTransform;
                      var a = internalTransform.a;
                      var b = internalTransform.b;
                      var c = internalTransform.c;
                      var d = internalTransform.d;
                      var pivot = shape.transform.pivot;
                      var modifierPosition = modifier.position;
                      modifierPosition.set(a * pivot.x + c * pivot.y + internalTransform.tx, b * pivot.x + d * pivot.y + internalTransform.ty);
                      var layer = shape.root.parent;
                      if (layer) {
                          modifierContainer.transform.position.copyFrom(layer.transform.position);
                      }
                      else {
                          modifierContainer.transform.position.set(0, 0);
                      }
                      modifier.width = shape.size.x;
                      modifier.height = shape.size.y;
                      modifier.pivot.set(shape.size.x * 0.5, shape.size.y * 0.5);
                      modifier.rotation = shape.transform.rotation;
                      modifier.skew.copyFrom(shape.transform.skew);
                  }
                  modifier.visible = true;
                  modifier.group =
                      wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.CHILDREN) &&
                          0 < shape.children.length;
                  if (modifierContainer.parent !== canvas) {
                      canvas.addChild(modifierContainer);
                  }
                  modifier.update();
                  wcardinalUi.DApplications.update(diagram);
              }
              else {
                  var bound = this._shapeBound;
                  var tempRect = this._shapeBoundRect;
                  shapes[0].getBoundsInternal(false, bound);
                  for (var i = 1, imax = shapes.length; i < imax; ++i) {
                      var shape = shapes[i];
                      shape.getBoundsInternal(false, tempRect);
                      bound.enlarge(tempRect);
                  }
                  var layer = shapes[0].root.parent;
                  if (layer) {
                      modifierContainer.transform.position.copyFrom(layer.transform.position);
                  }
                  else {
                      modifierContainer.transform.position.set(0, 0);
                  }
                  modifier.position.set(bound.x, bound.y);
                  modifier.width = bound.width;
                  modifier.height = bound.height;
                  modifier.rotation = 0;
                  modifier.pivot.set(0, 0);
                  modifier.skew.set(0, 0);
                  modifier.visible = true;
                  modifier.group = false;
                  if (modifierContainer.parent !== canvas) {
                      canvas.addChild(modifierContainer);
                  }
                  modifier.update();
                  wcardinalUi.DApplications.update(diagram);
              }
          }
          else {
              modifier.visible = false;
              wcardinalUi.DApplications.update(diagram);
          }
      };
      EToolSelectSelection.prototype.toggle = function (shape) {
          var shapes = this._shapes;
          if (shapes.length <= 0) {
              var root = shape.root;
              root.selected = true;
              shapes.push(root);
          }
          else {
              var first = shapes[0];
              if (UtilShapeSearch.isParent(shape, first)) {
                  first.selected = false;
                  if (wcardinalUi.EShapeCapabilities.contains(first, wcardinalUi.EShapeCapability.CHILDREN)) {
                      var shapeOfParent = UtilShapeSearch.toOfParent(shape, first);
                      shapeOfParent.selected = true;
                      shapes[0] = shapeOfParent;
                  }
                  else {
                      shapes.splice(0, 1);
                  }
              }
              else if (first.parent === shape.parent) {
                  if (!shape.selected) {
                      shape.selected = true;
                      shapes.push(shape);
                  }
                  else {
                      shape.selected = false;
                      shapes.splice(shapes.indexOf(shape), 1);
                  }
              }
              else {
                  var sharedParent = UtilShapeSearch.toSharedParent(first, shape);
                  if (first.parent === sharedParent) {
                      var shapeOfParent = UtilShapeSearch.toOfParent(shape, sharedParent);
                      if (shapeOfParent.selected) {
                          shapeOfParent.selected = false;
                          shapes.splice(shapes.indexOf(shapeOfParent), 1);
                      }
                      else {
                          shapeOfParent.selected = true;
                          shapes.push(shapeOfParent);
                      }
                  }
                  else {
                      var newLength = 0;
                      for (var i = 0, imax = shapes.length; i < imax; ++i) {
                          var oldShape = shapes[i];
                          oldShape.selected = false;
                          var newShape = UtilShapeSearch.toOfParent(oldShape, sharedParent);
                          if (!newShape.selected) {
                              newShape.selected = true;
                              shapes[newLength] = newShape;
                              newLength += 1;
                          }
                      }
                      shapes.length = newLength;
                      var shapeOfParent = UtilShapeSearch.toOfParent(shape, sharedParent);
                      if (!shapeOfParent.selected) {
                          shapeOfParent.selected = true;
                          shapes.push(shapeOfParent);
                      }
                  }
              }
          }
          this.update(EToolSelectSelectionUpdatedPart.SELECTION);
      };
      /**
       * Please note that the specified targets must be root shapes.
       *
       * @param targets root shapes to be added
       */
      EToolSelectSelection.prototype.addAll = function (targets) {
          var shapes = this._shapes;
          var isChanged = false;
          // Convert to root shapes
          if (0 < shapes.length) {
              var first = shapes[0];
              if (first.root !== first) {
                  var oldShapes = shapes.slice(0);
                  shapes.length = 0;
                  for (var i = 0, imax = oldShapes.length; i < imax; ++i) {
                      var oldShape = oldShapes[i];
                      oldShape.selected = false;
                      var oldShapeRoot = oldShape.root;
                      if (!oldShapeRoot.selected) {
                          oldShapeRoot.selected = true;
                          shapes.push(oldShapeRoot);
                      }
                  }
                  isChanged = true;
              }
          }
          // Add targets
          for (var i = 0, imax = targets.length; i < imax; ++i) {
              var target = targets[i];
              if (!target.selected) {
                  target.selected = true;
                  shapes.push(target);
                  isChanged = true;
              }
          }
          if (isChanged) {
              this.update(EToolSelectSelectionUpdatedPart.SELECTION);
          }
          return isChanged;
      };
      EToolSelectSelection.prototype.clearAndAddAll = function (targets) {
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].selected = false;
          }
          shapes.length = 0;
          for (var i = 0, imax = targets.length; i < imax; ++i) {
              var target = targets[i];
              target.selected = true;
              shapes.push(target);
          }
          this.update(EToolSelectSelectionUpdatedPart.SELECTION);
          return true;
      };
      EToolSelectSelection.prototype.set = function (target) {
          var shapes = this._shapes;
          if (1 < shapes.length) {
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  shapes[i].selected = false;
              }
              shapes.length = 0;
              target.selected = true;
              shapes.push(target);
              this.update(EToolSelectSelectionUpdatedPart.SELECTION);
              return true;
          }
          else if (shapes.length === 1) {
              if (shapes[0] === target) {
                  return false;
              }
              else {
                  shapes[0].selected = false;
                  target.selected = true;
                  shapes[0] = target;
                  this.update(EToolSelectSelectionUpdatedPart.SELECTION);
                  return true;
              }
          }
          else {
              target.selected = true;
              shapes.push(target);
              this.update(EToolSelectSelectionUpdatedPart.SELECTION);
              return true;
          }
      };
      EToolSelectSelection.prototype.get = function () {
          return this._shapes;
      };
      EToolSelectSelection.prototype.first = function () {
          var shapes = this._shapes;
          return 0 < shapes.length ? shapes[0] : null;
      };
      EToolSelectSelection.prototype.last = function () {
          var shapes = this._shapes;
          return 0 < shapes.length ? shapes[shapes.length - 1] : null;
      };
      EToolSelectSelection.prototype.swapLast = function (expectedLast, newLast) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var last = shapes[shapes.length - 1];
              if (last === expectedLast) {
                  last.selected = false;
                  shapes[shapes.length - 1] = newLast;
                  newLast.selected = true;
                  this.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
              }
          }
      };
      EToolSelectSelection.prototype.remove = function (target) {
          var shapes = this._shapes;
          var index = shapes.indexOf(target);
          if (0 <= index) {
              target.selected = false;
              shapes.splice(index, 1);
              this.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
          }
      };
      EToolSelectSelection.prototype.contains = function (shape) {
          return shape.selected;
      };
      EToolSelectSelection.prototype.size = function () {
          return this._shapes.length;
      };
      EToolSelectSelection.prototype.isEmpty = function () {
          return this._shapes.length <= 0;
      };
      EToolSelectSelection.prototype.clear = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  shapes[i].selected = false;
              }
              this._shapes.length = 0;
              this.update(EToolSelectSelectionUpdatedPart.SELECTION);
              return true;
          }
          return false;
      };
      EToolSelectSelection.prototype.focus = function () {
          if (this.isEmpty()) {
              return false;
          }
          // Canvas
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          if (canvas == null) {
              return false;
          }
          // Canvas parent
          var cparent = canvas.parent;
          if (!(cparent instanceof wcardinalUi.DBase)) {
              return false;
          }
          // Center
          var cw = canvas.width;
          var ch = canvas.height;
          var p = cparent.padding;
          var pl = p.getLeft();
          var pt = p.getTop();
          var pr = p.getRight();
          var pb = p.getBottom();
          var sw = Math.max(0, cparent.width - pl - pr);
          var sh = Math.max(0, cparent.height - pt - pb);
          var cx = pl + (sw - cw) * 0.5;
          var cy = pt + (sh - ch) * 0.5;
          // Offset
          var modifier = this._modifier;
          var point = this._alignPoint;
          point.set(modifier.width * 0.5, modifier.height * 0.5);
          modifier.toGlobal(point, point, false);
          cparent.toLocal(point, undefined, point, false);
          var cposition = canvas.position;
          var ox = cw * 0.5 - (point.x - cposition.x);
          var oy = ch * 0.5 - (point.y - cposition.y);
          // Move
          diagram.view.moveTo(cx + ox, cy + oy);
          return true;
      };
      EToolSelectSelection.prototype.prepare = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  var shape = shapes[i];
                  if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                      UtilShapeConnectorTransforms.prepare(shape);
                  }
                  else {
                      UtilShapeTransforms.prepare(shape);
                  }
              }
              return true;
          }
          return false;
      };
      EToolSelectSelection.prototype.prepareTranslateSnap = function () {
          var diagram = this._diagram;
          if (diagram instanceof wcardinalUi.DDiagramEditor) {
              diagram.snapper.prepareForTranslate(this._modifier);
          }
      };
      EToolSelectSelection.prototype.prepareRotateSnap = function () {
          var diagram = this._diagram;
          if (diagram instanceof wcardinalUi.DDiagramEditor) {
              diagram.snapper.prepareForRotate(this._modifier);
          }
      };
      EToolSelectSelection.prototype.prepareScaleSnap = function () {
          var diagram = this._diagram;
          if (diagram instanceof wcardinalUi.DDiagramEditor) {
              diagram.snapper.prepareForScale(this._modifier, this._scaleAnchor);
          }
      };
      EToolSelectSelection.prototype.prepareTranslate = function () {
          return this.prepare();
      };
      EToolSelectSelection.prototype.prepareRotate = function (global) {
          if (this.prepare()) {
              // Origin
              var originGlobal = this._originGlobal;
              var originLocal = this._originLocal;
              var modifier = this._modifier;
              originLocal.set(modifier.width * 0.5, modifier.height * 0.5);
              originGlobal.copyFrom(originLocal);
              modifier.updateTransform();
              modifier.transform.localTransform.apply(originLocal, originLocal);
              modifier.transform.worldTransform.apply(originGlobal, originGlobal);
              // Axis
              if (global == null) {
                  return true;
              }
              else {
                  var rotationAxisGlobal = this._rotationAxisGlobal;
                  var vx = global.x - originGlobal.x;
                  var vy = global.y - originGlobal.y;
                  var v = Math.sqrt(vx * vx + vy * vy);
                  if (0.001 < v) {
                      var vi = 1 / v;
                      rotationAxisGlobal.set(vx * vi, vy * vi);
                      return true;
                  }
                  else {
                      this.finalize();
                      return false;
                  }
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.prepareScale = function (anchor) {
          if (this.prepare()) {
              if (this.prepareScaleOriginAndAxes(anchor)) {
                  var modifier = this._modifier;
                  var rotation = modifier.rotation;
                  var skew = modifier.skew;
                  var originLocal = this._originLocal;
                  var scaleTransform = this._scaleTransform;
                  scaleTransform.setTransform(0, 0, 0, 0, 1, 1, rotation, skew.x, skew.y).invert();
                  scaleTransform.apply(originLocal, originLocal);
                  scaleTransform.translate(-originLocal.x, -originLocal.y);
                  scaleTransform.copyTo(this._scaleTransformInverse).invert();
                  return true;
              }
              else {
                  this.finalize();
                  return false;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.prepareScaleOriginAndAxes = function (anchor) {
          var modifier = this._modifier;
          modifier.updateTransform();
          var localTransform = modifier.transform.localTransform;
          var worldTransform = modifier.transform.worldTransform;
          var width = modifier.width;
          var height = modifier.height;
          var originGlobal = this._originGlobal;
          var originLocal = this._originLocal;
          this._scaleAnchor = anchor;
          switch (anchor) {
              case wcardinalUi.ESnapperModifierAnchor.TOP_LEFT:
                  originLocal.set(width, height);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxes(0, height, width, 0, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.TOP_CENTER:
                  originLocal.set(width * 0.5, height);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxis(width * 0.5, 0, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.TOP_RIGHT:
                  originLocal.set(0, height);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxes(width, height, 0, 0, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.MIDDLE_LEFT:
                  originLocal.set(width, height * 0.5);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxis(0, height * 0.5, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.NONE:
                  originLocal.set(width * 0.5, height * 0.5);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  if (0.001 < Math.abs(width)) {
                      this._scaleAxis0.x = width;
                  }
                  else {
                      return false;
                  }
                  if (0.001 < Math.abs(height)) {
                      this._scaleAxis0.y = height;
                  }
                  else {
                      return false;
                  }
                  return true;
              case wcardinalUi.ESnapperModifierAnchor.MIDDLE_RIGHT:
                  originLocal.set(0, height * 0.5);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxis(width, height * 0.5, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_LEFT:
                  originLocal.set(width, 0);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxes(0, 0, width, height, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_CENTER:
                  originLocal.set(width * 0.5, 0);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxis(width * 0.5, height, originGlobal);
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_RIGHT:
                  originLocal.set(0, 0);
                  originGlobal.copyFrom(originLocal);
                  localTransform.apply(originLocal, originLocal);
                  worldTransform.apply(originGlobal, originGlobal);
                  return this.prepareScaleAxes(width, 0, 0, height, originGlobal);
          }
          return false;
      };
      EToolSelectSelection.prototype.prepareScaleAxis = function (x, y, origin) {
          var axis = this._scaleAxis0;
          axis.set(x, y);
          this._modifier.toGlobal(axis, axis, true);
          axis.x -= origin.x;
          axis.y -= origin.y;
          var v = Math.sqrt(axis.x * axis.x + axis.y * axis.y);
          if (0.001 < v) {
              var vi = 1 / v;
              axis.x *= vi;
              axis.y *= vi;
              this._scaleDet = v;
              this._scaleDetInverse = vi;
              return true;
          }
          return false;
      };
      EToolSelectSelection.prototype.prepareScaleAxes = function (x0, y0, x1, y1, originGlobal) {
          var modifier = this._modifier;
          var worldTransform = modifier.transform.worldTransform;
          // v0
          var axis0 = this._scaleAxis0;
          axis0.set(x0, y0);
          worldTransform.apply(axis0, axis0);
          axis0.x -= originGlobal.x;
          axis0.y -= originGlobal.y;
          // v1
          var axis1 = this._scaleAxis1;
          axis1.set(x1, y1);
          worldTransform.apply(axis1, axis1);
          axis1.x -= originGlobal.x;
          axis1.y -= originGlobal.y;
          var det = axis0.x * axis1.y - axis0.y * axis1.x;
          if (0.001 < Math.abs(det)) {
              this._scaleDet = det;
              this._scaleDetInverse = 1 / det;
              return true;
          }
          return false;
      };
      EToolSelectSelection.prototype.finalize = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  var shape = shapes[i];
                  if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                      UtilShapeConnectorTransforms.finalize(shape);
                  }
                  else {
                      UtilShapeTransforms.finalize(shape);
                  }
              }
          }
      };
      EToolSelectSelection.prototype.saveForTranslate = function () {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPosition(this));
      };
      EToolSelectSelection.prototype.saveForRotate = function () {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPositionAndRotate(this));
      };
      EToolSelectSelection.prototype.saveForScale = function () {
          wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyAll(this));
      };
      EToolSelectSelection.prototype.alignLeft = function () {
          this.align(initLeft, initWidth, updateMin, finishupIdentity, assingX, applyLeft);
      };
      EToolSelectSelection.prototype.alignCenter = function () {
          this.align(initCenter, initZero, updateSum, finishupAverage, assingX, applyCenter);
      };
      EToolSelectSelection.prototype.alignRight = function () {
          this.align(initRight, initWidth, updateMax, finishupIdentity, assingX, applyRight);
      };
      EToolSelectSelection.prototype.alignTop = function () {
          this.align(initTop, initHeight, updateMin, finishupIdentity, assingY, applyTop);
      };
      EToolSelectSelection.prototype.alignMiddle = function () {
          this.align(initMiddle, initZero, updateSum, finishupAverage, assingY, applyMiddle);
      };
      EToolSelectSelection.prototype.alignBottom = function () {
          this.align(initBottom, initHeight, updateMax, finishupIdentity, assingY, applyBottom);
      };
      EToolSelectSelection.prototype.align = function (init, initSpace, update, finishup, assing, apply) {
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          var shapes = this._shapes;
          var shapesLength = shapes.length;
          if (canvas && 1 <= shapesLength) {
              var parent_1 = shapes[0].parent;
              if (parent_1) {
                  var point = this._alignPoint;
                  var rectangle = this._alignRectangle;
                  var isFirst = true;
                  var value = 0;
                  var data = [];
                  for (var i = 0; i < shapesLength; ++i) {
                      var shape = shapes[i];
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                          shape.getBounds(false, rectangle);
                          if (isFirst) {
                              isFirst = false;
                              value = init(rectangle);
                          }
                          else {
                              value = update(value, init(rectangle));
                          }
                          data.push([initSpace(rectangle), shape]);
                      }
                  }
                  var dataLength = data.length;
                  if (1 <= dataLength) {
                      if (dataLength <= 1) {
                          value = init(canvas.getBounds(false, rectangle));
                      }
                      value = finishup(value, dataLength);
                      point.set(0, 0);
                      assing(value, point);
                      parent_1.toLocal(point, undefined, point);
                      var scale = canvas.scale;
                      for (var i = 0; i < dataLength; ++i) {
                          var datum = data[i];
                          apply(point, datum[0] * 0.5, scale, datum[1]);
                      }
                      this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
                  }
              }
          }
      };
      EToolSelectSelection.prototype.distributeHorizontally = function () {
          this.distribute(initCenter, initWidth, assingX, applyLeft);
      };
      EToolSelectSelection.prototype.distributeVertically = function () {
          this.distribute(initMiddle, initHeight, assingY, applyTop);
      };
      EToolSelectSelection.prototype.distribute = function (init, initSpace, assing, apply) {
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          var shapes = this._shapes;
          var shapesLength = shapes.length;
          if (canvas && 1 <= shapesLength) {
              var parent_2 = shapes[0].parent;
              if (parent_2) {
                  var point = this._alignPoint;
                  var rectangle = this._alignRectangle;
                  var spaceTotal = 0;
                  var data = [];
                  for (var i = 0; i < shapesLength; ++i) {
                      var shape = shapes[i];
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                          shape.getBounds(false, rectangle);
                          var space = initSpace(rectangle);
                          spaceTotal += space;
                          data.push([init(rectangle), space, shape]);
                      }
                  }
                  var dataLength = data.length;
                  if (2 < dataLength) {
                      data.sort(function (a, b) {
                          return a[0] - b[0];
                      });
                      var first = data[0];
                      var last = data[dataLength - 1];
                      var spaceLeft = last[0] - first[0] - (spaceTotal - last[1] * 0.5 - first[1] * 0.5);
                      var margin = spaceLeft / (dataLength - 1);
                      point.set(0, 0);
                      assing(first[0], point);
                      parent_2.toLocal(point, undefined, point);
                      var diff = first[1] * 0.5 + margin;
                      var scale = canvas.scale;
                      for (var i = 1, imax = dataLength - 1; i < imax; ++i) {
                          var datum = data[i];
                          var shape = datum[2];
                          diff += datum[1] * 0.5;
                          apply(point, diff, scale, shape);
                          diff += datum[1] * 0.5 + margin;
                      }
                      this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
                  }
                  else if (dataLength === 1) {
                      point.set(0, 0);
                      assing(init(canvas.getBounds(false, rectangle)), point);
                      parent_2.toLocal(point, undefined, point);
                      var datum = data[0];
                      apply(point, 0, canvas.scale, datum[2]);
                      this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
                  }
              }
          }
      };
      EToolSelectSelection.prototype.replace = function (shapeFactory) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_3 = shapes[0].parent;
              if (parent_3) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeReplace(parent_3, shapeFactory, this));
              }
          }
      };
      EToolSelectSelection.prototype.group = function () {
          var shapes = this._shapes;
          if (2 <= shapes.length) {
              var parent_4 = shapes[0].parent;
              if (parent_4) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeGroup(parent_4, this));
              }
          }
      };
      EToolSelectSelection.prototype.hasUngroupable = function (shapes) {
          for (var i = shapes.length - 1; 0 <= i; --i) {
              if (this.isUngroupable(shapes[i])) {
                  return true;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.isUngroupable = function (shape) {
          return (shape instanceof wcardinalUi.EShapeGroup &&
              wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.CHILDREN) &&
              wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.UNGROUPING));
      };
      EToolSelectSelection.prototype.ungroup = function () {
          var shapes = this._shapes;
          if (this.hasUngroupable(shapes)) {
              var parent_5 = shapes[0].parent;
              if (parent_5) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeUngroup(parent_5, this));
              }
          }
      };
      EToolSelectSelection.prototype.setFill = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyFillColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setFillEnabled = function (enable) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyFillEnable(this, enable));
          }
      };
      EToolSelectSelection.prototype.setStroke = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setStrokeWidth = function (width) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeWidth(this, width));
          }
      };
      EToolSelectSelection.prototype.setStrokeAlign = function (align) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeAlign(this, align));
          }
      };
      EToolSelectSelection.prototype.setStrokeSide = function (side, isOn) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              if (isOn) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeSideOn(this, side));
              }
              else {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeSideOff(this, side));
              }
          }
      };
      EToolSelectSelection.prototype.setStrokeStyle = function (add, remove) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeStyle(this, add, remove));
          }
      };
      EToolSelectSelection.prototype.setStrokeEnabled = function (enable) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyStrokeEnable(this, enable));
          }
      };
      EToolSelectSelection.prototype.setLineStyle = function (add, remove) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineStyle(this, add, remove));
          }
      };
      EToolSelectSelection.prototype.setLineTailType = function (type) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineTailType(this, type));
          }
      };
      EToolSelectSelection.prototype.setLineTailSizeX = function (size) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineTailSizeX(this, size));
          }
      };
      EToolSelectSelection.prototype.setLineTailSizeY = function (size) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineTailSizeY(this, size));
          }
      };
      EToolSelectSelection.prototype.setLineTailColor = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineTailColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setLineTailMargin = function (margin) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineTailMargin(this, margin));
          }
      };
      EToolSelectSelection.prototype.setLineHeadType = function (type) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineHeadType(this, type));
          }
      };
      EToolSelectSelection.prototype.setLineHeadSizeX = function (size) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineHeadSizeX(this, size));
          }
      };
      EToolSelectSelection.prototype.setLineHeadSizeY = function (size) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineHeadSizeY(this, size));
          }
      };
      EToolSelectSelection.prototype.setLineHeadColor = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineHeadColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setLineHeadMargin = function (margin) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyLineHeadMargin(this, margin));
          }
      };
      EToolSelectSelection.prototype.setPointsStyle = function (add, remove) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPointsStyle(this, add, remove));
          }
      };
      EToolSelectSelection.prototype.setText = function (text) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextValue(this, text));
          }
      };
      EToolSelectSelection.prototype.setTextColor = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setTextFamily = function (family) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextFamily(this, family));
          }
      };
      EToolSelectSelection.prototype.setTextSize = function (size) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextSize(this, size));
          }
      };
      EToolSelectSelection.prototype.setTextSizeDelta = function (delta) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextSizeDelta(this, delta));
          }
      };
      EToolSelectSelection.prototype.setTextWeight = function (weight) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextWeight(this, weight));
          }
      };
      EToolSelectSelection.prototype.setTextStyle = function (style) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextStyle(this, style));
          }
      };
      EToolSelectSelection.prototype.setTextAlignHorizontal = function (align) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextAlignHorizontal(this, align));
          }
      };
      EToolSelectSelection.prototype.setTextAlignVertical = function (align) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextAlignVertical(this, align));
          }
      };
      EToolSelectSelection.prototype.setTextPaddingHorizontal = function (padding) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextPaddingHorizontal(this, padding));
          }
      };
      EToolSelectSelection.prototype.setTextPaddingVertical = function (padding) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextPaddingVertical(this, padding));
          }
      };
      EToolSelectSelection.prototype.setTextOffsetHorizontal = function (offset) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextOffsetHorizontal(this, offset));
          }
      };
      EToolSelectSelection.prototype.setTextOffsetVertical = function (offset) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextOffsetVertical(this, offset));
          }
      };
      EToolSelectSelection.prototype.setTextOutlineColor = function (color, alpha) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextOutlineColor(this, [color, alpha]));
          }
      };
      EToolSelectSelection.prototype.setTextOutlineWidth = function (width) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextOutlineWidth(this, width));
          }
      };
      EToolSelectSelection.prototype.setTextOutlineEnabled = function (enable) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextOutlineEnable(this, enable));
          }
      };
      EToolSelectSelection.prototype.setTextClipping = function (clipping) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextClipping(this, clipping));
          }
      };
      EToolSelectSelection.prototype.setTextFitting = function (fitting) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextFitting(this, fitting));
          }
      };
      EToolSelectSelection.prototype.setTextSpacingHorizontal = function (spacing) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextSpacingHorizontal(this, spacing));
          }
      };
      EToolSelectSelection.prototype.setTextSpacingVertical = function (spacing) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextSpacingVertical(this, spacing));
          }
      };
      EToolSelectSelection.prototype.setTextDirection = function (direction) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTextDirection(this, direction));
          }
      };
      EToolSelectSelection.prototype.setInteractive = function (interactive) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyInteractive(this, interactive));
          }
      };
      EToolSelectSelection.prototype.setFocusable = function (isFocusable) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyFocusable(this, isFocusable));
          }
      };
      EToolSelectSelection.prototype.setShortcut = function (shortcut) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyShortcut(this, shortcut));
          }
      };
      EToolSelectSelection.prototype.setTitle = function (title) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyTitle(this, title));
          }
      };
      EToolSelectSelection.prototype.setCursor = function (cursor) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyCursor(this, cursor));
          }
      };
      EToolSelectSelection.prototype.setRadius = function (radius) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyRadius(this, radius));
          }
      };
      EToolSelectSelection.prototype.setCorner = function (corner, isOn) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              if (isOn) {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyCornerOn(this, corner));
              }
              else {
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyCornerOff(this, corner));
              }
          }
      };
      EToolSelectSelection.prototype.setImage = function (image) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyImage(this, image, undefined));
          }
      };
      EToolSelectSelection.prototype.setGradient = function (image, gradient) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyImage(this, image, gradient));
          }
      };
      EToolSelectSelection.prototype.fitToImage = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyImageFitTo(this));
          }
      };
      EToolSelectSelection.prototype.clearImage = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyImageClear(this));
          }
      };
      EToolSelectSelection.prototype.bringToFront = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_6 = shapes[0].parent;
              if (parent_6) {
                  var children = parent_6.children;
                  // Update indices
                  var offset = children.length;
                  var indices = [];
                  for (var i = offset - 1; 0 <= i; --i) {
                      var child = children[i];
                      if (child.selected) {
                          child.index = offset + i;
                          indices.push(i);
                      }
                      else {
                          child.index = i;
                      }
                  }
                  // Sort
                  children.sort(UtilShapeSearch.COMPARATOR_INDEX);
                  //
                  var isChanged = false;
                  for (var i = 0, imax = indices.length; i < imax; ++i) {
                      if (offset - 1 - i !== indices[i]) {
                          isChanged = true;
                      }
                  }
                  //
                  if (isChanged) {
                      parent_6.toDirty();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTreeBringToFront(indices, parent_6, this));
                      this.update(EToolSelectSelectionUpdatedPart.TREE);
                  }
                  return true;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.bringForward = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_7 = shapes[0].parent;
              if (parent_7) {
                  var isChanged = false;
                  var children = parent_7.children;
                  var indices = [];
                  var previous = null;
                  for (var i = children.length - 1; 0 <= i; --i) {
                      var child = children[i];
                      if (child.selected) {
                          if (previous) {
                              children[i] = children[i + 1];
                              children[i + 1] = child;
                              indices.push(i);
                              isChanged = true;
                          }
                      }
                      else {
                          previous = child;
                      }
                  }
                  if (isChanged) {
                      parent_7.toDirty();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTreeBringForward(indices, parent_7, this));
                      this.update(EToolSelectSelectionUpdatedPart.TREE);
                  }
                  return isChanged;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.sendBackward = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_8 = shapes[0].parent;
              if (parent_8) {
                  var isChanged = false;
                  var children = parent_8.children;
                  var indices = [];
                  var previous = null;
                  for (var i = 0, imax = children.length; i < imax; ++i) {
                      var child = children[i];
                      if (child.selected) {
                          if (previous) {
                              children[i] = children[i - 1];
                              children[i - 1] = child;
                              indices.push(i);
                              isChanged = true;
                          }
                      }
                      else {
                          previous = child;
                      }
                  }
                  if (isChanged) {
                      parent_8.toDirty();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTreeSendBackward(indices, parent_8, this));
                      this.update(EToolSelectSelectionUpdatedPart.TREE);
                  }
                  return isChanged;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.sendToBack = function () {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_9 = shapes[0].parent;
              if (parent_9) {
                  var children = parent_9.children;
                  // Update indices
                  var indices = [];
                  var offset = children.length;
                  for (var i = 0; i < offset; ++i) {
                      var child = children[i];
                      if (child.selected) {
                          child.index = i - offset;
                          indices.push(i);
                      }
                      else {
                          child.index = i;
                      }
                  }
                  // Sort
                  children.sort(UtilShapeSearch.COMPARATOR_INDEX);
                  //
                  var isChanged = false;
                  for (var i = 0; i < indices.length; ++i) {
                      if (i !== indices[i]) {
                          isChanged = true;
                      }
                  }
                  //
                  if (isChanged) {
                      parent_9.toDirty();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeTreeSendToBack(indices, parent_9, this));
                      this.update(EToolSelectSelectionUpdatedPart.TREE);
                  }
                  return true;
              }
          }
          return false;
      };
      EToolSelectSelection.prototype.serialize = function () {
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          if (canvas == null) {
              return null;
          }
          // Update UUID
          var manager = new wcardinalUi.EShapeResourceManagerSerialization();
          var shapes = this._shapes;
          var shapesLength = shapes.length;
          if (0 < shapesLength) {
              var root = shapes[0].root;
              if (root != null) {
                  var layer = root.parent;
                  if (layer instanceof wcardinalUi.DDiagramLayer) {
                      layer.addUuid(manager);
                      layer.updateUuid(manager);
                  }
              }
          }
          // Shape set
          var shapeSet = new Set();
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapeSet.add(shapes[i]);
          }
          // Serialize selected shapes
          var items = [];
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var item = shape.serialize(manager);
              item[16] = 0;
              if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                  var item29 = item[29];
                  if (item29 & wcardinalUi.EShapeCapability.LINE_TAIL) {
                      if (!shapeSet.has(shape.edge.tail.acceptor.shape)) {
                          item29 &= ~wcardinalUi.EShapeCapability.LINE_TAIL;
                      }
                  }
                  if (item29 & wcardinalUi.EShapeCapability.LINE_HEAD) {
                      if (!shapeSet.has(shape.edge.head.acceptor.shape)) {
                          item29 &= ~wcardinalUi.EShapeCapability.LINE_HEAD;
                      }
                  }
                  item[29] = item29;
              }
              items.push(item);
          }
          // Done
          var serialized = {
              version: wcardinalUi.DDiagramSerializedVersion,
              name: canvas.name,
              label: canvas.label,
              width: canvas.width,
              height: canvas.height,
              summary: canvas.summary,
              description: canvas.description,
              resources: manager.resources,
              data: manager.data,
              pieces: manager.pieces,
              items: items,
              layers: [
                  [
                      diagram instanceof wcardinalUi.DDiagramEditor
                          ? diagram.theme.getBaseLayerLabel()
                          : "Base Layer"
                  ]
              ]
          };
          return JSON.stringify(serialized);
      };
      EToolSelectSelection.prototype.deserialize = function (data) {
          var _this = this;
          var diagram = this._diagram;
          var layer = diagram.layer;
          if (layer != null) {
              var parsed_1 = wcardinalUi.DDiagrams.parse(data);
              if (parsed_1 != null) {
                  wcardinalUi.DDiagrams.toPieceData(diagram.controller, parsed_1.pieces, wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR).then(function (pieceData) {
                      _this.deserialize_(layer, parsed_1, pieceData);
                  });
              }
          }
      };
      EToolSelectSelection.prototype.deserialize_ = function (layer, parsed, pieceData) {
          var _this = this;
          var manager = new wcardinalUi.EShapeResourceManagerDeserialization(parsed, parsed.pieces, pieceData, wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR, 0);
          var shapePromise = wcardinalUi.deserializeAll(parsed.items, manager);
          if (shapePromise) {
              shapePromise.then(function (shapes) {
                  var shift = _this.calcShift(shapes, layer);
                  var shapesLength = shapes.length;
                  var layerChildren = layer.children;
                  for (var i = 0; i < shapesLength; ++i) {
                      var shape = shapes[i];
                      shape.parent = layer;
                      shape.uploaded = undefined;
                      layerChildren.push(shape);
                  }
                  layer.onChildTransformChange();
                  layer.toDirty();
                  for (var i = 0; i < shapesLength; ++i) {
                      shapes[i].onAttach();
                  }
                  _this.shift(shapes, shift);
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate(shapes, layer, _this, true));
              });
          }
      };
      EToolSelectSelection.prototype.calcShift = function (shapes, parent) {
          if (shapes.length <= 0) {
              return null;
          }
          var work1 = this._shiftPoint1;
          var work2 = this._shiftPoint2;
          var first = shapes[0];
          first.updateTransform();
          var firstTransform = first.transform;
          work1.copyFrom(firstTransform.pivot);
          firstTransform.worldTransform.apply(work1, work1);
          parent.transform.worldTransform.apply(work1, work1);
          var gx = work1.x;
          var gy = work1.y;
          var delta = 0;
          while (true) {
              work1.set(gx + delta, gy + delta);
              var found = parent.hitTestBBox(work1, function (target) {
                  if (target.type === first.type) {
                      target.updateTransform();
                      var targetTransform = target.transform;
                      work2.copyFrom(targetTransform.pivot);
                      targetTransform.worldTransform.apply(work2, work2);
                      var dx = work2.x - (gx + delta);
                      var dy = work2.y - (gy + delta);
                      return Math.abs(dx) <= 0.1 && Math.abs(dy) <= 0.1;
                  }
                  return false;
              });
              if (found == null) {
                  work1.set(gx + delta, gy + delta);
                  parent.toLocal(work1, undefined, work1);
                  work2.set(work1.x - firstTransform.position.x, work1.y - firstTransform.position.y);
                  return work2;
              }
              delta += 10;
          }
      };
      EToolSelectSelection.prototype.shift = function (shapes, amount) {
          if (shapes.length <= 0 || amount == null) {
              return;
          }
          var ax = amount.x;
          var ay = amount.y;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                  var position = shape.transform.position;
                  position.set(position.x + ax, position.y + ay);
              }
              else if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                  var edge = shape.edge;
                  var head = edge.head;
                  var tail = edge.tail;
                  if (head.acceptor.shape == null && tail.acceptor.shape == null) {
                      edge.lock();
                      var headLocal = head.local;
                      headLocal.set(headLocal.x + ax, headLocal.y + ay);
                      var tailLocal = tail.local;
                      tailLocal.set(tailLocal.x + ax, tailLocal.y + ay);
                      edge.unlock();
                  }
              }
          }
      };
      EToolSelectSelection.prototype.setId = function (id) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyId(this, id));
          }
      };
      EToolSelectSelection.prototype.addActionValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeActionValueAdd(value, this));
          }
      };
      EToolSelectSelection.prototype.replaceActionValue = function (target, value, list) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeActionValueReplace(target, value, this, list));
          }
      };
      EToolSelectSelection.prototype.removeActionValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeActionValueRemove(value, this));
          }
      };
      EToolSelectSelection.prototype.bringActionValueForward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeActionValueBringForward(value, this));
          }
      };
      EToolSelectSelection.prototype.sendActionValueBackward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeActionValueSendBackward(value, this));
          }
      };
      EToolSelectSelection.prototype.addDataValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataValueAdd(value, this));
          }
      };
      EToolSelectSelection.prototype.replaceDataValue = function (oldValue, newValue, list) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataValueReplace(oldValue, newValue, this, list));
          }
      };
      EToolSelectSelection.prototype.removeDataValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataValueRemove(value, this));
          }
      };
      EToolSelectSelection.prototype.bringDataValueForward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataValueBringForward(value, this));
          }
      };
      EToolSelectSelection.prototype.sendDataValueBackward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataValueSendBackward(value, this));
          }
      };
      EToolSelectSelection.prototype.addDataMappingValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataMappingValueAdd(value, this));
          }
      };
      EToolSelectSelection.prototype.replaceDataMappingValue = function (oldValue, newValue, list) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataMappingValueReplace(oldValue, newValue, this, list));
          }
      };
      EToolSelectSelection.prototype.removeDataMappingValue = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataMappingValueRemove(value, this));
          }
      };
      EToolSelectSelection.prototype.bringDataMappingValueForward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataMappingValueBringForward(value, this));
          }
      };
      EToolSelectSelection.prototype.sendDataMappingValueBackward = function (value) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDataMappingValueSendBackward(value, this));
          }
      };
      EToolSelectSelection.prototype.setPositionX = function (x) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPositionX(this, x));
          }
      };
      EToolSelectSelection.prototype.setPositionY = function (y) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPositionY(this, y));
          }
      };
      EToolSelectSelection.prototype.setPositionLeft = function (left) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPositionLeft(this, left));
          }
      };
      EToolSelectSelection.prototype.setPositionTop = function (top) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyPositionTop(this, top));
          }
      };
      EToolSelectSelection.prototype.setSizeX = function (x) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertySizeX(this, x));
          }
      };
      EToolSelectSelection.prototype.setSizeY = function (y) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertySizeY(this, y));
          }
      };
      EToolSelectSelection.prototype.setRotation = function (rotation) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyRotation(this, rotation));
          }
      };
      EToolSelectSelection.prototype.setSkew = function (skew) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertySkew(this, skew));
          }
      };
      EToolSelectSelection.prototype.toInternalVector = function (vector, result) {
          // Convert to the internal coordinate vector
          // A = modifier.parent.worldTransform
          // (ndx, ndy)^T = A^-1 (0, 0)^T - A^-1 (dx, dy)^T
          var modifier = this._modifier;
          modifier.updateTransform();
          var worldTransform = modifier.parent.worldTransform;
          var a = worldTransform.a;
          var b = worldTransform.b;
          var c = worldTransform.c;
          var d = worldTransform.d;
          var detInverse = 1 / (a * d - c * b);
          result.set((d * vector.x - c * vector.y) * detInverse, (a * vector.y - b * vector.x) * detInverse);
          return result;
      };
      EToolSelectSelection.prototype.translate = function (dx, dy, snap) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var work = this._translateDelta;
              work.set(dx, dy);
              this.toInternalVector(work, work);
              if (snap) {
                  var diagram = this._diagram;
                  if (diagram instanceof wcardinalUi.DDiagramEditor) {
                      diagram.snapper.toTranslationSnapped(work, work);
                  }
              }
              var transform = this._transform.set(1, 0, 0, 1, work.x, work.y);
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  var shape = shapes[i];
                  if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                      var edge = shape.edge;
                      if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                          UtilShapeConnectorTransforms.apply(shape, transform);
                      }
                  }
                  else {
                      var capability = wcardinalUi.EShapeCapability.NONE;
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                          capability |= wcardinalUi.EShapeCapability.POSITION;
                      }
                      if (capability !== wcardinalUi.EShapeCapability.NONE) {
                          UtilShapeTransforms.apply(shape, transform, capability);
                      }
                  }
              }
              this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
          }
      };
      EToolSelectSelection.prototype.rotateTo = function (global, snap) {
          var rotationAxisGlobal = this._rotationAxisGlobal;
          var originGlobal = this._originGlobal;
          var vx = global.x - originGlobal.x;
          var vy = global.y - originGlobal.y;
          var v = Math.sqrt(vx * vx + vy * vy);
          if (0.001 < v) {
              var vi = 1 / v;
              var nx = vx * vi;
              var ny = vy * vi;
              var dot = Math.max(-1, Math.min(1, rotationAxisGlobal.x * nx + rotationAxisGlobal.y * ny));
              var cross = rotationAxisGlobal.x * ny - rotationAxisGlobal.y * nx;
              var rotation = 0 <= cross ? +Math.acos(dot) : -Math.acos(dot);
              if (snap) {
                  var diagram = this._diagram;
                  if (diagram instanceof wcardinalUi.DDiagramEditor) {
                      var baseRotation = this._modifier.rotation;
                      rotation = diagram.snapper.toRotationSnapped(baseRotation, rotation);
                  }
              }
              this.rotate(rotation);
          }
      };
      EToolSelectSelection.prototype.rotate = function (rotation) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var originLocal = this._originLocal;
              var transform = this._transform
                  .identity()
                  .translate(-originLocal.x, -originLocal.y)
                  .rotate(rotation)
                  .translate(+originLocal.x, +originLocal.y);
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  var shape = shapes[i];
                  if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                      var edge = shape.edge;
                      if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                          UtilShapeConnectorTransforms.apply(shape, transform);
                      }
                  }
                  else {
                      var capability = wcardinalUi.EShapeCapability.NONE;
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                          capability |= wcardinalUi.EShapeCapability.POSITION;
                      }
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.ROTATION)) {
                          capability |= wcardinalUi.EShapeCapability.ROTATION;
                      }
                      if (capability !== wcardinalUi.EShapeCapability.NONE) {
                          UtilShapeTransforms.apply(shape, transform, capability);
                      }
                  }
              }
              this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
          }
      };
      EToolSelectSelection.prototype.getScale = function (dx, dy, anchor, keepRatio, result) {
          switch (anchor) {
              case wcardinalUi.ESnapperModifierAnchor.TOP_LEFT:
                  this.getScaleXY(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.TOP_CENTER:
                  this.getScaleY(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.TOP_RIGHT:
                  this.getScaleXY(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.MIDDLE_LEFT:
                  this.getScaleX(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.NONE:
                  var axis = this._scaleAxis0;
                  var width = axis.x;
                  var height = axis.y;
                  var scaleX = (width + dx) / width;
                  var scaleY = (height + dy) / height;
                  if (keepRatio) {
                      result.x = result.y = Math.max(scaleX, scaleY);
                  }
                  else {
                      result.set(scaleX, scaleY);
                  }
                  break;
              case wcardinalUi.ESnapperModifierAnchor.MIDDLE_RIGHT:
                  this.getScaleX(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_LEFT:
                  this.getScaleXY(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_CENTER:
                  this.getScaleY(dx, dy, keepRatio, result);
                  break;
              case wcardinalUi.ESnapperModifierAnchor.BOTTOM_RIGHT:
                  this.getScaleXY(dx, dy, keepRatio, result);
                  break;
          }
      };
      EToolSelectSelection.prototype.getScaleX = function (dx, dy, keepRatio, result) {
          var scale = this.calcScale(dx, dy);
          if (keepRatio) {
              result.set(scale, scale);
          }
          else {
              result.set(scale, 1);
          }
      };
      EToolSelectSelection.prototype.getScaleY = function (dx, dy, keepRatio, result) {
          var scale = this.calcScale(dx, dy);
          if (keepRatio) {
              result.set(scale, scale);
          }
          else {
              result.set(1, scale);
          }
      };
      EToolSelectSelection.prototype.calcScale = function (dx, dy) {
          var axis = this._scaleAxis0;
          var dot = axis.x * dx + axis.y * dy;
          return (this._scaleDet + dot) * this._scaleDetInverse;
      };
      EToolSelectSelection.prototype.getScaleXY = function (dx, dy, keepRatio, result) {
          // v0
          var axis0 = this._scaleAxis0;
          var vx0 = axis0.x;
          var vy0 = axis0.y;
          // v1
          var axis1 = this._scaleAxis1;
          var vx1 = axis1.x;
          var vy1 = axis1.y;
          // v2
          var vx2 = vx0 + vx1 + dx;
          var vy2 = vy0 + vy1 + dy;
          // A = | vx0, vx1 |
          //     | vy0, vy1 |
          // D = (dx, dy)^T
          // V0 = (vx0, vy0)^T
          // V1 = (vx1, vy1)^T
          // V2 = V0 + V1 + D;
          // A x = V
          //
          // det A = vx0 * vy1 - vy0 * vx1
          // (det A) A^-1 = |  vy1 -vx1 |
          //                | -vy0  vx0 |
          var detInverse = this._scaleDetInverse;
          var scaleX = (+vy1 * vx2 - vx1 * vy2) * detInverse;
          var scaleY = (-vy0 * vx2 + vx0 * vy2) * detInverse;
          this.setScale(scaleX, scaleY, keepRatio, result);
      };
      EToolSelectSelection.prototype.setScale = function (scaleX, scaleY, keepRatio, result) {
          if (keepRatio) {
              if (0 <= scaleX) {
                  if (0 <= scaleY) {
                      var scale = Math.max(scaleX, scaleY);
                      result.set(scale, scale);
                  }
                  else {
                      var scale = Math.max(scaleX, -scaleY);
                      result.set(scale, -scale);
                  }
              }
              else {
                  if (0 <= scaleY) {
                      var scale = Math.max(-scaleX, scaleY);
                      result.set(-scale, scale);
                  }
                  else {
                      var scale = Math.min(scaleX, scaleY);
                      result.set(scale, scale);
                  }
              }
          }
          else {
              result.set(scaleX, scaleY);
          }
          return result;
      };
      EToolSelectSelection.prototype.makeScaleTransform = function (scale, result) {
          return this._scaleTransform
              .copyTo(result)
              .scale(scale.x, scale.y)
              .prepend(this._scaleTransformInverse);
      };
      EToolSelectSelection.prototype.scale = function (dx, dy, keepRatio, snap) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var scale = this._scale;
              var scaleAnchor = this._scaleAnchor;
              this.getScale(dx, dy, scaleAnchor, keepRatio, scale);
              var transform = this._transform;
              this.makeScaleTransform(scale, transform);
              if (snap) {
                  var diagram = this._diagram;
                  if (diagram instanceof wcardinalUi.DDiagramEditor) {
                      if (diagram.snapper.toScaleSnapped(transform, scaleAnchor, keepRatio, scale)) {
                          this.makeScaleTransform(scale, transform);
                      }
                  }
              }
              for (var i = 0, imax = shapes.length; i < imax; ++i) {
                  var shape = shapes[i];
                  if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                      var edge = shape.edge;
                      if (edge.tail.acceptor.shape == null && edge.head.acceptor.shape == null) {
                          UtilShapeConnectorTransforms.apply(shape, transform);
                      }
                  }
                  else {
                      var capability = wcardinalUi.EShapeCapability.NONE;
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.POSITION)) {
                          capability |= wcardinalUi.EShapeCapability.POSITION;
                      }
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.WIDTH)) {
                          capability |= wcardinalUi.EShapeCapability.WIDTH;
                      }
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.HEIGHT)) {
                          capability |= wcardinalUi.EShapeCapability.HEIGHT;
                      }
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.ROTATION)) {
                          capability |= wcardinalUi.EShapeCapability.ROTATION;
                      }
                      if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.SKEW)) {
                          capability |= wcardinalUi.EShapeCapability.SKEW;
                      }
                      if (capability !== wcardinalUi.EShapeCapability.NONE) {
                          UtilShapeTransforms.apply(shape, transform, capability);
                      }
                  }
              }
              this.update(EToolSelectSelectionUpdatedPart.PROPERTY);
          }
      };
      EToolSelectSelection.prototype.delete = function (save) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              var parent_10 = shapes[0].parent;
              if (parent_10) {
                  if (save !== false) {
                      var deleteds = UtilShapeDeleter.delete(parent_10, shapes, true);
                      if (deleteds) {
                          var indices = UtilShapeSearch.toIndices(deleteds);
                          wcardinalUi.DControllers.getCommandController().push(new ECommandShapeDelete(deleteds, indices, parent_10, this, true));
                      }
                  }
                  else {
                      UtilShapeDeleter.delete(parent_10, shapes, false);
                  }
                  this.update(EToolSelectSelectionUpdatedPart.TREE | EToolSelectSelectionUpdatedPart.SELECTION);
              }
          }
      };
      EToolSelectSelection.prototype.createChildren = function (creator) {
          this.lock();
          var commands = [];
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var created = creator(shape);
              if (created) {
                  commands.push(new ECommandShapeCreate(created, shape, this, false));
              }
          }
          if (0 < commands.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandComposition(commands, this));
              this.update(EToolSelectSelectionUpdatedPart.TREE);
          }
          this.unlock();
      };
      EToolSelectSelection.prototype.deleteChildren = function (deletor) {
          this.lock();
          var commands = [];
          var shapes = this._shapes;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var targets = deletor(shape);
              if (targets) {
                  for (var j = 0, jmax = targets.length; j < jmax; ++j) {
                      targets[j].selected = true;
                  }
                  var deleteds = UtilShapeDeleter.delete(shape, undefined, true);
                  if (deleteds) {
                      var indices = UtilShapeSearch.toIndices(deleteds);
                      commands.push(new ECommandShapeDelete(deleteds, indices, shape, this, false));
                  }
              }
          }
          if (0 < commands.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandComposition(commands, this));
              this.update(EToolSelectSelectionUpdatedPart.TREE);
          }
          this.unlock();
      };
      EToolSelectSelection.prototype.lockCapability = function (target) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyCapabilityLock(this, target));
          }
      };
      EToolSelectSelection.prototype.unlockCapability = function (target) {
          var shapes = this._shapes;
          if (0 < shapes.length) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapePropertyCapabilityUnlock(this, target));
          }
      };
      EToolSelectSelection.prototype.store = function () {
          return this._shapes.slice(0);
      };
      EToolSelectSelection.prototype.restore = function (stored) {
          var shapes = this._shapes;
          // Unselect
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              shapes[i].selected = false;
          }
          shapes.length = 0;
          // Select
          for (var i = 0, imax = stored.length; i < imax; ++i) {
              var newShape = stored[i];
              newShape.selected = true;
              shapes.push(newShape);
          }
          // Done
          this.update(EToolSelectSelectionUpdatedPart.SELECTION);
      };
      Object.defineProperty(EToolSelectSelection.prototype, "modifier", {
          get: function () {
              return this._modifier;
          },
          enumerable: false,
          configurable: true
      });
      return EToolSelectSelection;
  }(pixi_js.utils.EventEmitter));

  var UtilShapeAreaSelect = /** @class */ (function () {
      function UtilShapeAreaSelect() {
      }
      UtilShapeAreaSelect.isShapeIn = function (shape, rect) {
          var _a;
          var bound = shape.getBounds(false, ((_a = this._work) !== null && _a !== void 0 ? _a : (this._work = new pixi_js.Rectangle())));
          var x = bound.x;
          var y = bound.y;
          var w = bound.width;
          var h = bound.height;
          return (rect.contains(x, y) &&
              rect.contains(x + w, y) &&
              rect.contains(x, y + h) &&
              rect.contains(x + w, y + h));
      };
      UtilShapeAreaSelect.findShapes = function (container, rect, result) {
          var children = container.children;
          for (var i = 0, imax = children.length; i < imax; ++i) {
              var child = children[i];
              if (this.isShapeIn(child, rect)) {
                  result.push(child);
              }
          }
      };
      return UtilShapeAreaSelect;
  }());

  var UtilHitTest = /** @class */ (function () {
      function UtilHitTest() {
      }
      UtilHitTest.execute = function (global, target, interactionManager) {
          var _a, _b;
          var offsets = ((_a = UtilHitTest.OFFSETS) !== null && _a !== void 0 ? _a : (UtilHitTest.OFFSETS = this.newOffsets()));
          var work = ((_b = UtilHitTest.WORK) !== null && _b !== void 0 ? _b : (UtilHitTest.WORK = new pixi_js.Point()));
          var x = global.x;
          var y = global.y;
          if (interactionManager) {
              for (var i = 0, imax = offsets.length; i < imax; i += 1) {
                  work.set(x + offsets[i], y + offsets[i + 1]);
                  var result = interactionManager.hitTest(work, target);
                  if (result != null) {
                      return result;
                  }
              }
          }
          else {
              for (var i = 0, imax = offsets.length; i < imax; i += 1) {
                  work.set(x + offsets[i], y + offsets[i + 1]);
                  var result = target.hitTest(work);
                  if (result != null) {
                      return result;
                  }
              }
          }
          return null;
      };
      UtilHitTest.newOffsets = function () {
          return [
              +0, +0, -1, -1, +1, -1, +1, +1, -1, +1, +0, -2, +2, +0, +0, -2, -2, +0, -2, -2, +2, -2,
              +2, +2, -2, +2, +0, -4, +4, +0, +0, -4, -4, +0
          ];
      };
      return UtilHitTest;
  }());

  var toSelectionOptions = function (options) {
      var selection = options.selection;
      return {
          diagram: options.diagram,
          modifier: selection && selection.modifier
      };
  };
  var EToolSelect = /** @class */ (function (_super) {
      __extends(EToolSelect, _super);
      function EToolSelect(options) {
          var _this = _super.call(this) || this;
          _this._selection = new EToolSelectSelection(toSelectionOptions(options));
          _this._area = new EToolSelectArea();
          _this._diagram = options.diagram;
          _this._applicationLayer = null;
          _this._onDownPoint = new pixi_js.Point();
          _this._onMovePoint = new pixi_js.Point();
          _this._onUpPoint = new pixi_js.Point();
          _this._areaRect = new pixi_js.Rectangle();
          _this._mode = 0 /* EToolSelectMode.NONE */;
          _this._isFirstMove = false;
          _this._childSelectTime = -1;
          _this._childSelectChild = null;
          var allow = options.allow;
          if (allow) {
              _this._isTransformationAllowed = allow.transformation !== false;
              _this._isDeletionAllowed = allow.deletion !== false;
          }
          else {
              _this._isTransformationAllowed = true;
              _this._isDeletionAllowed = true;
          }
          _this._onDownBound = function (e) {
              _this.onDown(e);
          };
          _this._onMoveBound = function (e) {
              _this.onMove(e);
          };
          _this._onUpBound = function (e) {
              _this.onUp(e);
          };
          _this._onKeydownBound = function (e) {
              _this.onKeydown(e);
          };
          _this._onKeyupBound = function (e) {
              _this.onKeyup(e);
          };
          _this._onDblClickBound = function (e) {
              _this.onDblClick(e);
          };
          return _this;
      }
      Object.defineProperty(EToolSelect.prototype, "selection", {
          get: function () {
              return this._selection;
          },
          enumerable: false,
          configurable: true
      });
      EToolSelect.prototype.onActivate = function () {
          var diagram = this._diagram;
          diagram.on(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
          diagram.on("dblclick", this._onDblClickBound);
          diagram.on("keydown", this._onKeydownBound);
          diagram.on("keyup", this._onKeyupBound);
      };
      EToolSelect.prototype.onDeactivate = function () {
          var diagram = this._diagram;
          diagram.off(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
          diagram.off("dblclick", this._onDblClickBound);
          diagram.off("keydown", this._onKeydownBound);
          diagram.off("keyup", this._onKeyupBound);
      };
      EToolSelect.prototype.onDown = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var diagram = this._diagram;
          var diagramCanvas = diagram.canvas;
          var diagramLayer = diagram.layer;
          if (diagramCanvas && diagramLayer) {
              var isAddMode = originalEvent.ctrlKey || originalEvent.shiftKey;
              if (this._mode === 1 /* EToolSelectMode.SELECT */) {
                  this._mode = 0 /* EToolSelectMode.NONE */;
                  this.onSelectEnd(diagramCanvas, diagramLayer, isAddMode);
                  return;
              }
              var global_1 = e.data.global;
              var onDownPoint = this._onDownPoint;
              onDownPoint.copyFrom(global_1);
              var selection = this._selection;
              var modifier = selection.modifier;
              var hitObject = this.hitTest(global_1, modifier, diagramLayer);
              var commandController = wcardinalUi.DControllers.getCommandController();
              if (hitObject instanceof wcardinalUi.EShapeBase) {
                  if (isAddMode) {
                      var before = selection.store();
                      selection.toggle(hitObject);
                      var after = selection.store();
                      commandController.push(new ECommandShapeSelect(before, after, selection));
                  }
                  else if (!selection.contains(hitObject)) {
                      var first = selection.first();
                      if (first == null) {
                          var before = selection.store();
                          if (selection.set(hitObject.root)) {
                              var after = selection.store();
                              commandController.push(new ECommandShapeSelect(before, after, selection));
                          }
                      }
                      else {
                          var selected = UtilShapeSearch.toSelected(hitObject);
                          if (selected != null) {
                              if (wcardinalUi.EShapeCapabilities.contains(selected, wcardinalUi.EShapeCapability.CHILDREN)) {
                                  this._childSelectTime = Date.now();
                                  this._childSelectChild = UtilShapeSearch.toOfParent(hitObject, selected);
                              }
                          }
                          else {
                              var sharedParent = UtilShapeSearch.toSharedParent(first, hitObject);
                              var before = selection.store();
                              if (selection.set(UtilShapeSearch.toOfParent(hitObject, sharedParent))) {
                                  var after = selection.store();
                                  commandController.push(new ECommandShapeSelect(before, after, selection));
                              }
                          }
                      }
                  }
                  if (this._isTransformationAllowed && selection.prepareTranslate()) {
                      selection.prepareTranslateSnap();
                      this._mode = 2 /* EToolSelectMode.TRANSLATE */;
                      this._isFirstMove = true;
                  }
              }
              else if (hitObject === modifier) {
                  switch (modifier.getLastHitAnchor()) {
                      case wcardinalUi.ESnapperModifierAnchor.ROTATION:
                          if (selection.prepareRotate(global_1)) {
                              selection.prepareRotateSnap();
                              this._mode = 4 /* EToolSelectMode.ROTATE */;
                              this._isFirstMove = true;
                          }
                          break;
                      default:
                          if (selection.prepareScale(modifier.getLastHitAnchor())) {
                              selection.prepareScaleSnap();
                              this._mode = 3 /* EToolSelectMode.SCALE */;
                              this._isFirstMove = true;
                          }
                  }
              }
              else {
                  // Select area
                  var area = this._area;
                  diagramCanvas.toLocal(global_1, undefined, onDownPoint);
                  area.x = onDownPoint.x;
                  area.y = onDownPoint.y;
                  area.size.set(0, 0);
                  area.update();
                  diagramCanvas.addChild(area);
                  wcardinalUi.DApplications.update(diagram);
                  // Select mode
                  this._mode = 1 /* EToolSelectMode.SELECT */;
              }
              if (this._mode !== 0 /* EToolSelectMode.NONE */) {
                  var oldApplicationLayer = this._applicationLayer;
                  if (oldApplicationLayer) {
                      this._applicationLayer = null;
                      var oldInteractionManager = oldApplicationLayer.renderer.plugins.interaction;
                      oldInteractionManager.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
                      var onUpBound = this._onUpBound;
                      oldInteractionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
                      oldInteractionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
                      oldInteractionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
                  }
                  var newApplicationLayer = wcardinalUi.DApplications.getLayer(diagram);
                  if (newApplicationLayer) {
                      this._applicationLayer = newApplicationLayer;
                      var newInteractionManager = newApplicationLayer.renderer.plugins.interaction;
                      newInteractionManager.on(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
                      var onUpBound = this._onUpBound;
                      newInteractionManager.on(wcardinalUi.UtilPointerEvent.up, onUpBound);
                      newInteractionManager.on(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
                      newInteractionManager.on(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
                  }
              }
          }
      };
      EToolSelect.prototype.onMove = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var diagram = this._diagram;
          var diagramCanvas = diagram.canvas;
          var diagramLayer = diagram.layer;
          var mode = this._mode;
          var applicationLayer = this._applicationLayer;
          if (diagramCanvas && diagramLayer && mode !== 0 /* EToolSelectMode.NONE */ && applicationLayer) {
              var global_2 = e.data.global;
              applicationLayer.lock();
              var onDownPoint = this._onDownPoint;
              if (mode === 1 /* EToolSelectMode.SELECT */) {
                  var area = this._area;
                  var onMovePoint = diagramCanvas.toLocal(global_2, undefined, this._onMovePoint);
                  area.x = Math.min(onDownPoint.x, onMovePoint.x);
                  area.y = Math.min(onDownPoint.y, onMovePoint.y);
                  area.size.set(Math.max(onDownPoint.x, onMovePoint.x) - area.x, Math.max(onDownPoint.y, onMovePoint.y) - area.y);
                  area.update();
              }
              else {
                  var dx = global_2.x - onDownPoint.x;
                  var dy = global_2.y - onDownPoint.y;
                  if (1 <= Math.abs(dx) || 1 <= Math.abs(dy)) {
                      var isFirstMove = this._isFirstMove;
                      this._isFirstMove = false;
                      this._childSelectChild = null;
                      var selection = this._selection;
                      selection.modifier.disallow();
                      switch (mode) {
                          case 2 /* EToolSelectMode.TRANSLATE */:
                              if (isFirstMove) {
                                  selection.saveForTranslate();
                              }
                              selection.translate(dx, dy, true);
                              break;
                          case 4 /* EToolSelectMode.ROTATE */:
                              if (isFirstMove) {
                                  selection.saveForRotate();
                              }
                              selection.rotateTo(global_2, true);
                              break;
                          case 3 /* EToolSelectMode.SCALE */:
                              if (isFirstMove) {
                                  selection.saveForScale();
                              }
                              var keepRatio = originalEvent.shiftKey;
                              selection.scale(dx, dy, keepRatio, true);
                              break;
                      }
                  }
              }
              applicationLayer.unlock();
              applicationLayer.update();
          }
      };
      EToolSelect.prototype.hitTest = function (global, modifier, diagramLayer) {
          // Modifier
          if (this._isTransformationAllowed && modifier.visible) {
              var applicationLayer = wcardinalUi.DApplications.getLayer(diagramLayer);
              if (applicationLayer) {
                  var interactionManager = applicationLayer.renderer.plugins.interaction;
                  var modifierHit = UtilHitTest.execute(global, modifier, interactionManager);
                  if (modifierHit != null) {
                      return modifierHit;
                  }
              }
          }
          // Layer
          if (diagramLayer.visible) {
              return UtilHitTest.execute(global, diagramLayer);
          }
          // Found nothing
          return null;
      };
      EToolSelect.prototype.onSelectEnd = function (canvas, diagramLayer, isAddMode) {
          var area = this._area;
          var selection = this._selection;
          var commandController = wcardinalUi.DControllers.getCommandController();
          if (0 < area.size.x && 0 < area.size.y) {
              var areaRect = area.getBounds(false, this._areaRect);
              var foundShapes = [];
              UtilShapeAreaSelect.findShapes(diagramLayer, areaRect, foundShapes);
              if (isAddMode) {
                  if (0 < foundShapes.length) {
                      var before = selection.store();
                      if (selection.addAll(foundShapes)) {
                          var after = selection.store();
                          commandController.push(new ECommandShapeSelect(before, after, selection));
                      }
                  }
              }
              else {
                  if (0 < foundShapes.length || !selection.isEmpty()) {
                      var before = selection.store();
                      if (selection.clearAndAddAll(foundShapes)) {
                          var after = selection.store();
                          commandController.push(new ECommandShapeSelect(before, after, selection));
                      }
                  }
              }
          }
          else if (!isAddMode) {
              if (!selection.isEmpty()) {
                  var before = selection.store();
                  if (selection.clear()) {
                      var after = selection.store();
                      commandController.push(new ECommandShapeSelect(before, after, selection));
                  }
              }
          }
          canvas.removeChild(area);
          wcardinalUi.DApplications.update(diagramLayer);
      };
      EToolSelect.prototype.onUp = function (e) {
          var diagram = this._diagram;
          var diagramCanvas = diagram.canvas;
          var diagramLayer = diagram.layer;
          var mode = this._mode;
          var applicationLayer = this._applicationLayer;
          if (applicationLayer) {
              this._applicationLayer = null;
              var interactionManager = applicationLayer.renderer.plugins.interaction;
              interactionManager.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
              var onUpBound = this._onUpBound;
              interactionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
          }
          if (diagramCanvas && diagramLayer && mode !== 0 /* EToolSelectMode.NONE */) {
              this._mode = 0 /* EToolSelectMode.NONE */;
              if (mode === 1 /* EToolSelectMode.SELECT */) {
                  var originalEvent = e.data.originalEvent;
                  var isAddMode = originalEvent.ctrlKey || originalEvent.shiftKey;
                  this.onSelectEnd(diagramCanvas, diagramLayer, isAddMode);
              }
              else {
                  var selection = this._selection;
                  // Finalize
                  selection.finalize();
                  // Select the child
                  var childSelectChild = this._childSelectChild;
                  if (childSelectChild != null) {
                      this._childSelectChild = null;
                      var elapsedTime = Date.now() - this._childSelectTime;
                      if (elapsedTime < 333) {
                          var before = selection.store();
                          if (selection.set(childSelectChild)) {
                              var after = selection.store();
                              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                          }
                      }
                  }
                  //
                  selection.modifier.allow();
                  selection.updateModifier();
                  if (applicationLayer) {
                      applicationLayer.update();
                  }
              }
          }
      };
      EToolSelect.prototype.getRotateAmount = function (e) {
          return (Math.PI * (e.ctrlKey ? 1 : 15)) / 180;
      };
      EToolSelect.prototype.getScaleAmount = function (e) {
          return e.ctrlKey ? 1 : 10;
      };
      EToolSelect.prototype.getTranslateAmount = function (e) {
          return e.ctrlKey ? 1 : 10;
      };
      EToolSelect.prototype.onKeydown = function (e) {
          var selection = this._selection;
          if (!selection.isEmpty()) {
              if (this._isTransformationAllowed) {
                  if (wcardinalUi.UtilKeyboardEvent.isArrowUpKey(e)) {
                      if (e.shiftKey) {
                          if (selection.prepareScale(wcardinalUi.ESnapperModifierAnchor.NONE)) {
                              selection.saveForScale();
                              selection.scale(0, this.getScaleAmount(e), false, false);
                              selection.finalize();
                          }
                      }
                      else {
                          if (selection.prepareTranslate()) {
                              selection.saveForTranslate();
                              selection.translate(0, -this.getTranslateAmount(e), false);
                              selection.finalize();
                          }
                      }
                      e.preventDefault();
                  }
                  else if (wcardinalUi.UtilKeyboardEvent.isArrowRightKey(e)) {
                      if (e.altKey) {
                          if (selection.prepareRotate()) {
                              selection.saveForRotate();
                              selection.rotate(this.getRotateAmount(e));
                              selection.finalize();
                          }
                      }
                      else if (e.shiftKey) {
                          if (selection.prepareScale(wcardinalUi.ESnapperModifierAnchor.NONE)) {
                              selection.saveForScale();
                              selection.scale(this.getScaleAmount(e), 0, false, false);
                              selection.finalize();
                          }
                      }
                      else {
                          if (selection.prepareTranslate()) {
                              selection.saveForTranslate();
                              selection.translate(this.getTranslateAmount(e), 0, false);
                              selection.finalize();
                          }
                      }
                      e.preventDefault();
                  }
                  else if (wcardinalUi.UtilKeyboardEvent.isArrowDownKey(e)) {
                      if (e.shiftKey) {
                          if (selection.prepareScale(wcardinalUi.ESnapperModifierAnchor.NONE)) {
                              selection.saveForScale();
                              selection.scale(0, -this.getScaleAmount(e), false, false);
                              selection.finalize();
                          }
                      }
                      else {
                          if (selection.prepareTranslate()) {
                              selection.saveForTranslate();
                              selection.translate(0, this.getTranslateAmount(e), false);
                              selection.finalize();
                          }
                      }
                      e.preventDefault();
                  }
                  else if (wcardinalUi.UtilKeyboardEvent.isArrowLeftKey(e)) {
                      if (e.altKey) {
                          if (selection.prepareRotate()) {
                              selection.saveForRotate();
                              selection.rotate(-this.getRotateAmount(e));
                              selection.finalize();
                          }
                      }
                      else if (e.shiftKey) {
                          if (selection.prepareScale(wcardinalUi.ESnapperModifierAnchor.NONE)) {
                              selection.saveForScale();
                              selection.scale(-this.getScaleAmount(e), 0, false, false);
                              selection.finalize();
                          }
                      }
                      else {
                          if (selection.prepareTranslate()) {
                              selection.saveForTranslate();
                              selection.translate(-this.getTranslateAmount(e), 0, false);
                              selection.finalize();
                          }
                      }
                      e.preventDefault();
                  }
              }
              if (this._isDeletionAllowed) {
                  if (wcardinalUi.UtilKeyboardEvent.isDeleteKey(e)) {
                      selection.delete();
                      e.preventDefault();
                  }
              }
          }
          if (wcardinalUi.UtilKeyboardEvent.isSelectAllKey(e)) {
              var first = selection.first();
              var parent_1 = first == null ? this._diagram.layer : first.parent;
              if (parent_1 != null) {
                  var children = parent_1.children;
                  if (0 < children.length) {
                      var before = selection.store();
                      if (e.altKey) {
                          var types = new Set();
                          for (var i = 0, imax = before.length; i < imax; ++i) {
                              types.add(before[i].type);
                          }
                          var after = [];
                          for (var i = 0, imax = children.length; i < imax; ++i) {
                              var child = children[i];
                              if (child.selected) {
                                  after.push(child);
                              }
                              else if (types.has(child.type)) {
                                  after.push(child);
                              }
                          }
                          if (selection.clearAndAddAll(after)) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                          }
                      }
                      else {
                          if (selection.clearAndAddAll(children)) {
                              var after = selection.store();
                              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeSelect(before, after, selection));
                          }
                      }
                  }
              }
          }
      };
      EToolSelect.prototype.onKeyup = function (e) {
          // DO NOTHING
      };
      EToolSelect.prototype.onDblClick = function (e) {
          var selection = this._selection;
          var last = selection.last();
          if (last != null) {
              this.emit("edit", last, this);
          }
      };
      return EToolSelect;
  }(EToolImpl));

  var EToolShapeAcceptorEdgeRenderer = /** @class */ (function (_super) {
      __extends(EToolShapeAcceptorEdgeRenderer, _super);
      function EToolShapeAcceptorEdgeRenderer(edge) {
          var _this = _super.call(this) || this;
          _this._edge = edge;
          _this._circles = _this.newCircles();
          _this._foundEdges = [];
          _this._radius = wcardinalUi.EShapeDefaults.SIZE_X * 2;
          _this._scaleBound = 1;
          _this._scaleBoundInverse = 1;
          _this._type = wcardinalUi.EShapeAcceptorEdgeType.TAIL;
          _this._x = 0;
          _this._y = 0;
          _this._ox = 0;
          _this._oy = 0;
          _this._isDirty = false;
          _this._isBegan = false;
          _this._doUpdateBound = function () {
              _this._timeout = null;
              if (_this._isDirty) {
                  _this._isDirty = false;
                  if (_this._isBegan) {
                      _this.visible = true;
                      _this.doUpdate();
                  }
              }
          };
          return _this;
      }
      EToolShapeAcceptorEdgeRenderer.prototype.newCircles = function () {
          var result = [];
          var color = wcardinalUi.EShapeDefaults.STROKE_COLOR;
          var alpha = wcardinalUi.EShapeDefaults.STROKE_ALPHA;
          for (var i = 0, imax = 64; i < imax; ++i) {
              var shape = new wcardinalUi.EShapeCircle();
              shape.stroke.set(false);
              shape.fill.set(true, color, alpha);
              shape.visible = false;
              shape.attach(this);
              result.push(shape);
          }
          return result;
      };
      EToolShapeAcceptorEdgeRenderer.prototype.begin = function (canvas) {
          canvas.addChild(this);
          var layer = canvas.layer.active;
          if (layer != null) {
              var position = layer.transform.position;
              this._ox = position.x;
              this._oy = position.y;
          }
          else {
              this._ox = 0;
              this._oy = 0;
          }
          this.visible = false;
          this._isBegan = true;
      };
      EToolShapeAcceptorEdgeRenderer.prototype.end = function () {
          var parent = this.parent;
          if (parent != null) {
              parent.removeChild(this);
          }
          this.visible = false;
          this._isBegan = false;
      };
      EToolShapeAcceptorEdgeRenderer.prototype.onPrerender = function () {
          var scale0 = this.getParentScale();
          var scale1 = this._scaleBound;
          if (0.001 < Math.abs(scale0 - scale1)) {
              this._scaleBound = scale0;
              this._scaleBoundInverse = 1 / scale0;
              var size = this.getCircleSize();
              var circles = this._circles;
              for (var i = 0, imax = circles.length; i < imax; ++i) {
                  circles[i].size.set(size, size);
              }
          }
      };
      EToolShapeAcceptorEdgeRenderer.prototype.render = function (renderer) {
          if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {
              return;
          }
          this.onPrerender();
          _super.prototype.render.call(this, renderer);
      };
      EToolShapeAcceptorEdgeRenderer.prototype.getParentScale = function () {
          var parent = this.parent;
          if (parent != null) {
              return parent.scale.y;
          }
          return 1;
      };
      EToolShapeAcceptorEdgeRenderer.prototype.getCircleSize = function () {
          return 10 * Math.min(1, this._scaleBoundInverse);
      };
      EToolShapeAcceptorEdgeRenderer.prototype.update = function (type, x, y) {
          if (this._isBegan) {
              this._type = type;
              this._x = x;
              this._y = y;
              if (this._timeout == null) {
                  this.visible = true;
                  this.doUpdate();
                  this._timeout = window.setTimeout(this._doUpdateBound, 100);
              }
              else {
                  this._isDirty = true;
              }
          }
      };
      EToolShapeAcceptorEdgeRenderer.prototype.doUpdate = function () {
          var radius = this._radius;
          var circles = this._circles;
          var circlesLength = circles.length;
          var edges = this._foundEdges;
          this._edge.findAll(this._type, this._x, this._y, radius, circlesLength, edges);
          var edgesLength = edges.length;
          var ox = this._ox;
          var oy = this._oy;
          var size = this.getCircleSize();
          var isize = Math.min(circlesLength, edgesLength);
          var distance = radius * radius;
          for (var i = 0; i < isize; ++i) {
              var edge = edges[i];
              var edgeCenter = edge.center;
              var circle = circles[i];
              circle.lock(wcardinalUi.EShapeLockPart.UPLOADED);
              circle.transform.position.set(ox + edgeCenter.x, oy + edgeCenter.y);
              circle.size.set(size, size);
              circle.fill.alpha = 0.5 * Math.max(0, 1 - edge.distance / distance);
              circle.visible = true;
              circle.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          }
          for (var i = isize; i < circlesLength; ++i) {
              circles[i].visible = false;
          }
          wcardinalUi.DApplications.update(this);
      };
      return EToolShapeAcceptorEdgeRenderer;
  }(wcardinalUi.EShapeContainer));

  var SIZE = 10;
  var EToolShapeAcceptorEdge = /** @class */ (function () {
      function EToolShapeAcceptorEdge(diagram, canvasMode) {
          this._diagram = diagram;
          this._canvasMode = canvasMode;
          this._renderer = new EToolShapeAcceptorEdgeRenderer(this);
          this._work = new Set();
      }
      EToolShapeAcceptorEdge.prototype.begin = function (canvas, shape) {
          this.clear();
          this._shape = shape;
          if (canvas != null) {
              this._renderer.begin(canvas);
          }
      };
      EToolShapeAcceptorEdge.prototype.end = function () {
          this._renderer.end();
          this.clear();
      };
      EToolShapeAcceptorEdge.prototype.update = function (type, x, y) {
          this._renderer.update(type, x, y);
      };
      EToolShapeAcceptorEdge.prototype.show = function () {
          this._renderer.visible = true;
      };
      EToolShapeAcceptorEdge.prototype.hide = function () {
          this._renderer.visible = false;
      };
      Object.defineProperty(EToolShapeAcceptorEdge.prototype, "edges", {
          get: function () {
              var result = this._edges;
              if (result == null) {
                  result = this.newEdges();
                  this._edges = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      EToolShapeAcceptorEdge.prototype.newEdges = function () {
          var result = new Map();
          var layer = this._diagram.layer;
          if (layer) {
              var layerPositionX = 0;
              var layerPositionY = 0;
              if (this._canvasMode) {
                  var layerPosition = layer.transform.position;
                  layerPositionX = layerPosition.x;
                  layerPositionY = layerPosition.y;
              }
              var shape = this._shape;
              if (shape != null) {
                  var shapeParent = shape.parent;
                  if (shapeParent != null) {
                      this.addAll(shapeParent.children, layerPositionX, layerPositionY, result);
                  }
              }
              else {
                  this.addAll(layer.children, layerPositionX, layerPositionY, result);
              }
          }
          return result;
      };
      EToolShapeAcceptorEdge.prototype.addAll = function (shapes, lx, ly, result) {
          var _this = this;
          var _loop_1 = function (i, imax) {
              var shape = shapes[i];
              if (!(shape instanceof wcardinalUi.EShapeConnectorLine)) {
                  var size = shape.size;
                  var sx = size.x;
                  var sy = size.y;
                  var transform = shape.transform;
                  var internal = transform.internalTransform;
                  var a = internal.a;
                  var b = internal.b;
                  var c = internal.c;
                  var d = internal.d;
                  var pivot = transform.pivot;
                  var px = pivot.x;
                  var py = pivot.y;
                  var matrix_1 = new pixi_js.Matrix(a * sx, b * sx, c * sy, d * sy, internal.tx + lx + (a * px + c * py), internal.ty + ly + (b * px + d * py));
                  wcardinalUi.EShapeAcceptors.get(shape.type).each(shape, function (edge, id) {
                      _this.add(matrix_1, id, edge, shape, result);
                  });
                  if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.CHILDREN)) {
                      var children = shape.children;
                      if (children) {
                          this_1.addAll(children, lx, ly, result);
                      }
                  }
              }
          };
          var this_1 = this;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              _loop_1(i);
          }
      };
      EToolShapeAcceptorEdge.prototype.add = function (matrix, id, acceptorEdge, shape, coordinateToEdges) {
          var aes = acceptorEdge.size;
          var aesx = aes.x;
          var aesy = aes.y;
          var aex = acceptorEdge.x;
          var aey = acceptorEdge.y;
          var a = matrix.a;
          var b = matrix.b;
          var c = matrix.c;
          var d = matrix.d;
          var tx = matrix.tx;
          var ty = matrix.ty;
          var x = a * aex + c * aey + tx;
          var y = b * aex + d * aey + ty;
          var edge = {
              shape: shape,
              id: id,
              x: null,
              y: null,
              acceptor: acceptorEdge,
              matrix: matrix,
              local: new pixi_js.Point(x, y),
              center: new pixi_js.Point(x, y),
              distance: 0
          };
          if (aesx === 0 && aesy === 0) {
              var gx = this.toGridIndex(x);
              var gy = this.toGridIndex(y);
              var coordinate = this.toCoordinate(gx, gy);
              var edges = coordinateToEdges.get(coordinate);
              if (edges == null) {
                  coordinateToEdges.set(coordinate, [edge]);
              }
              else {
                  edges.push(edge);
              }
          }
          else {
              var aesxh = aesx * 0.5;
              var aesyh = aesy * 0.5;
              var aex0 = aex - aesxh;
              var aey0 = aey - aesyh;
              var aex1 = aex + aesxh;
              var aey1 = aey - aesyh;
              var aex2 = aex + aesxh;
              var aey2 = aey + aesyh;
              var aex3 = aex - aesxh;
              var aey3 = aey + aesyh;
              var x0 = a * aex0 + c * aey0;
              var y0 = b * aex0 + d * aey0;
              var x1 = a * aex1 + c * aey1;
              var y1 = b * aex1 + d * aey1;
              var x2 = a * aex2 + c * aey2;
              var y2 = b * aex2 + d * aey2;
              var x3 = a * aex3 + c * aey3;
              var y3 = b * aex3 + d * aey3;
              var x4 = Math.min(x0, x1, x2, x3) + tx;
              var y4 = Math.min(y0, y1, y2, y3) + ty;
              var x5 = Math.max(x0, x1, x2, x3) + tx;
              var y5 = Math.max(y0, y1, y2, y3) + ty;
              var ix0 = Math.floor(x4 / SIZE);
              var iy0 = Math.floor(y4 / SIZE);
              var ix1 = Math.ceil(x5 / SIZE);
              var iy1 = Math.ceil(y5 / SIZE);
              for (var ix = ix0; ix <= ix1; ++ix) {
                  for (var iy = iy0; iy <= iy1; ++iy) {
                      var coordinate = this.toCoordinate(ix, iy);
                      var edges = coordinateToEdges.get(coordinate);
                      if (edges == null) {
                          coordinateToEdges.set(coordinate, [edge]);
                      }
                      else {
                          edges.push(edge);
                      }
                  }
              }
          }
      };
      EToolShapeAcceptorEdge.prototype.toCoordinate = function (ix, iy) {
          return (ix % 1024) + (iy % 1024 << 10);
      };
      EToolShapeAcceptorEdge.prototype.toGridIndex = function (x) {
          return Math.round(x / SIZE);
      };
      EToolShapeAcceptorEdge.prototype.find = function (type, x, y) {
          var result = null;
          var distance = 0;
          var edges = this.edges;
          var threshold = SIZE * SIZE;
          for (var ix = -SIZE; ix <= SIZE; ix += SIZE) {
              for (var iy = -SIZE; iy <= SIZE; iy += SIZE) {
                  var gix = this.toGridIndex(x + ix);
                  var giy = this.toGridIndex(y + iy);
                  var foundEdges = edges.get(this.toCoordinate(gix, giy));
                  if (foundEdges == null) {
                      continue;
                  }
                  for (var i = 0, imax = foundEdges.length; i < imax; ++i) {
                      var foundEdge = foundEdges[i];
                      var acceptorEdge = foundEdge.acceptor;
                      if ((acceptorEdge.type & type) === 0) {
                          continue;
                      }
                      var size = acceptorEdge.size;
                      var sx = size.x;
                      var sy = size.y;
                      if (sx === 0 && sy === 0) {
                          var center = foundEdge.center;
                          var dx = x - center.x;
                          var dy = y - center.y;
                          var dd = dx * dx + dy * dy;
                          if (dd <= threshold && (result == null || dd < distance)) {
                              result = foundEdge;
                              distance = dd;
                          }
                      }
                      else {
                          var matrix = foundEdge.matrix;
                          var a = matrix.a;
                          var b = matrix.b;
                          var c = matrix.c;
                          var d = matrix.d;
                          var tx = matrix.tx;
                          var ty = matrix.ty;
                          var det = a * d - c * b;
                          if (0.0000001 < Math.abs(det)) {
                              var di = 1 / det;
                              var xtx = x - tx;
                              var yty = y - ty;
                              var lx = (+d * xtx - c * yty) * di;
                              var ly = (-b * xtx + a * yty) * di;
                              var sxh = sx * 0.5;
                              var syh = sy * 0.5;
                              var aex = acceptorEdge.x;
                              var aey = acceptorEdge.y;
                              var lx0 = aex - sxh;
                              var ly0 = aey - syh;
                              var lx1 = aex + sxh;
                              var ly1 = aey + syh;
                              var lx2 = Math.min(lx1, Math.max(lx0, lx));
                              var ly2 = Math.min(ly1, Math.max(ly0, ly));
                              var x0 = a * lx2 + c * ly2 + tx;
                              var y0 = b * lx2 + d * ly2 + ty;
                              var dx = x - x0;
                              var dy = y - y0;
                              var dd = dx * dx + dy * dy;
                              if (dd <= threshold && (result == null || dd < distance)) {
                                  result = foundEdge;
                                  result.x = lx2;
                                  result.y = ly2;
                                  result.local.set(x0, y0);
                                  distance = dd;
                              }
                          }
                          else {
                              var center = foundEdge.center;
                              var dx = x - center.x;
                              var dy = y - center.y;
                              var dd = dx * dx + dy * dy;
                              if (dd <= threshold && (result == null || dd < distance)) {
                                  result = foundEdge;
                                  distance = dd;
                              }
                          }
                      }
                  }
              }
          }
          return result;
      };
      EToolShapeAcceptorEdge.prototype.findAll = function (type, x, y, range, limit, result) {
          var edges = this.edges;
          range = Math.ceil(range / SIZE) * SIZE;
          var threshold = range * range;
          var work = this._work;
          work.clear();
          this.findAllS1(type, x, y, 0, 0, edges, threshold, work);
          for (var ir = SIZE; ir <= range && work.size < limit; ir += SIZE) {
              this.findAllS2(type, x, y, edges, threshold, ir, work);
          }
          var iresult = -1;
          work.forEach(function (found) {
              result[++iresult] = found;
          });
          result.length = work.size;
          result.sort(this.compare);
          return result;
      };
      EToolShapeAcceptorEdge.prototype.findAllS2 = function (type, x, y, edges, threshold, radius, result) {
          for (var dx = -radius; dx <= radius; dx += SIZE) {
              this.findAllS1(type, x, y, dx, -radius, edges, threshold, result);
              this.findAllS1(type, x, y, dx, +radius, edges, threshold, result);
          }
          for (var dy = -radius + SIZE, iymax = radius - SIZE; dy <= iymax; dy += SIZE) {
              this.findAllS1(type, x, y, -radius, dy, edges, threshold, result);
              this.findAllS1(type, x, y, +radius, dy, edges, threshold, result);
          }
      };
      EToolShapeAcceptorEdge.prototype.findAllS1 = function (type, x, y, dx, dy, edges, threshold, result) {
          var gix = this.toGridIndex(x + dx);
          var giy = this.toGridIndex(y + dy);
          var foundEdges = edges.get(this.toCoordinate(gix, giy));
          if (foundEdges) {
              for (var i = 0, imax = foundEdges.length; i < imax; ++i) {
                  var foundEdge = foundEdges[i];
                  if (foundEdge.acceptor.type & type) {
                      var foundEdgeLocal = foundEdge.local;
                      var sx = x - foundEdgeLocal.x;
                      var sy = y - foundEdgeLocal.y;
                      var sd = sx * sx + sy * sy;
                      if (sd <= threshold) {
                          foundEdge.distance = sd;
                          result.add(foundEdge);
                      }
                  }
              }
          }
      };
      EToolShapeAcceptorEdge.prototype.compare = function (a, b) {
          var ad = a.distance;
          var bd = b.distance;
          return ad < bd ? -1 : ad > bd ? +1 : 0;
      };
      EToolShapeAcceptorEdge.prototype.clear = function () {
          this._edges = undefined;
      };
      return EToolShapeAcceptorEdge;
  }());

  var EToolShapeCreateLineConnectorPhase = {
      OFF: -1,
      TAIL: 0,
      HEAD: 1,
      DONE: 2
  };
  var EToolShapeCreateLineConnector = /** @class */ (function (_super) {
      __extends(EToolShapeCreateLineConnector, _super);
      function EToolShapeCreateLineConnector(options) {
          var _this = _super.call(this) || this;
          _this._options = options;
          _this._selection = options.selection;
          _this._diagram = options.diagram;
          _this._edge = new EToolShapeAcceptorEdge(options.diagram, false);
          _this._newShape = options.newShape || (function () { return _this.newShape(); });
          _this._phase = EToolShapeCreateLineConnectorPhase.OFF;
          _this._work = new pixi_js.Point();
          _this._onDownBound = function (e) {
              _this.onDown(e);
          };
          _this._onMoveBound = function (e) {
              _this.onMove(e);
          };
          _this._onUpBound = function (e) {
              _this.onUp(e);
          };
          _this._onKeyDownBound = function (e) {
              _this.onKeyDown(e);
          };
          _this._onSetBound = function (canvas) {
              _this.onSet(canvas);
          };
          _this._onUnsetBound = function (canvas) {
              _this.onUnset(canvas);
          };
          return _this;
      }
      EToolShapeCreateLineConnector.prototype.onActivate = function () {
          this._phase = EToolShapeCreateLineConnectorPhase.TAIL;
          var diagram = this._diagram;
          var layer = wcardinalUi.DApplications.getLayer(diagram);
          if (layer) {
              var interactionManager = layer.renderer.plugins.interaction;
              diagram.on(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
              diagram.on(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
              var onUpBound = this._onUpBound;
              interactionManager.on(wcardinalUi.UtilPointerEvent.up, onUpBound);
              interactionManager.on(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
              interactionManager.on(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              diagram.on("keydown", this._onKeyDownBound);
              diagram.on("set", this._onSetBound);
              diagram.on("unset", this._onUnsetBound);
          }
          this._edge.begin(diagram.canvas, null);
          var selection = this._selection;
          selection.modifier.disallow();
          selection.updateModifier();
      };
      EToolShapeCreateLineConnector.prototype.onDeactivate = function () {
          var diagram = this._diagram;
          var layer = wcardinalUi.DApplications.getLayer(diagram);
          if (layer) {
              var interactionManager = layer.renderer.plugins.interaction;
              diagram.off(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
              diagram.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
              var onUpBound = this._onUpBound;
              interactionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              diagram.off("keydown", this._onKeyDownBound);
              diagram.off("set", this._onSetBound);
              diagram.off("unset", this._onUnsetBound);
          }
          this._edge.end();
          var selection = this._selection;
          selection.modifier.allow();
          selection.updateModifier();
          var connector = this._connector;
          if (connector != null) {
              this._connector = undefined;
              connector.detach();
              connector.destroy();
          }
          this._phase = EToolShapeCreateLineConnectorPhase.OFF;
      };
      EToolShapeCreateLineConnector.prototype.onSet = function (canvas) {
          this._edge.begin(canvas, null);
      };
      EToolShapeCreateLineConnector.prototype.onUnset = function (canvas) {
          this._edge.end();
          var connector = this._connector;
          if (connector != null) {
              this._connector = undefined;
              connector.detach();
              connector.destroy();
          }
          this._phase = EToolShapeCreateLineConnectorPhase.TAIL;
      };
      EToolShapeCreateLineConnector.prototype.onDown = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          switch (this._phase) {
              case EToolShapeCreateLineConnectorPhase.OFF:
                  break;
              case EToolShapeCreateLineConnectorPhase.TAIL:
                  if (this.onTail(e)) {
                      this._phase = EToolShapeCreateLineConnectorPhase.HEAD;
                  }
                  break;
              case EToolShapeCreateLineConnectorPhase.HEAD:
                  if (this.onHead(e)) {
                      this._phase = EToolShapeCreateLineConnectorPhase.DONE;
                  }
                  break;
              case EToolShapeCreateLineConnectorPhase.DONE:
                  break;
          }
      };
      EToolShapeCreateLineConnector.prototype.onMove = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          switch (this._phase) {
              case EToolShapeCreateLineConnectorPhase.OFF:
                  break;
              case EToolShapeCreateLineConnectorPhase.TAIL:
                  this.onTail(e);
                  break;
              case EToolShapeCreateLineConnectorPhase.HEAD:
                  this.onHead(e);
                  break;
              case EToolShapeCreateLineConnectorPhase.DONE:
                  break;
          }
      };
      EToolShapeCreateLineConnector.prototype.onUp = function (e) {
          this.onDone();
      };
      EToolShapeCreateLineConnector.prototype.onTail = function (e) {
          var diagram = this._diagram;
          var layer = diagram.layer;
          if (layer) {
              var connector = this._connector;
              var global_1 = e.data.global;
              var local = layer.toLocal(global_1, undefined, this._work);
              var edge = this._edge.find(wcardinalUi.EShapeAcceptorEdgeType.TAIL, local.x, local.y);
              this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.TAIL, local.x, local.y);
              if (this.isTailAccepted(connector, local, edge)) {
                  if (connector == null) {
                      connector = this._newShape();
                      connector.fill.alpha = 1;
                      this._connector = connector;
                      connector.attach(layer);
                  }
                  this.onTailAccepted(connector, local, edge);
                  wcardinalUi.DApplications.update(diagram);
                  return true;
              }
              else {
                  if (connector != null) {
                      this.onTailUnaccepted(connector, local);
                      wcardinalUi.DApplications.update(diagram);
                      return false;
                  }
              }
          }
          return false;
      };
      EToolShapeCreateLineConnector.prototype.isDanglingEdgeAllowed = function () {
          var _a;
          return (_a = this._options.dangling) !== null && _a !== void 0 ? _a : false;
      };
      EToolShapeCreateLineConnector.prototype.isTailAccepted = function (connector, local, edge) {
          if (edge == null) {
              return this.isDanglingEdgeAllowed();
          }
          else {
              return true;
          }
      };
      EToolShapeCreateLineConnector.prototype.getTailType = function () {
          return wcardinalUi.EShapePointsMarkerType.CIRCLE;
      };
      EToolShapeCreateLineConnector.prototype.onTailAccepted = function (connector, local, edge) {
          connector.points.marker.tail.type = this.getTailType();
          if (edge != null) {
              connector.edge.tail.set(edge.shape, edge.id, edge.x, edge.y, 0, edge.local.x, edge.local.y, undefined, undefined, edge.acceptor.side);
              connector.edge.head.local.copyFrom(edge.local);
          }
          else {
              connector.edge.tail.set(null, null, null, null, 0, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
              connector.edge.head.local.copyFrom(local);
          }
      };
      EToolShapeCreateLineConnector.prototype.onTailUnaccepted = function (connector, local) {
          connector.points.marker.tail.type = wcardinalUi.EShapePointsMarkerType.NONE;
          connector.edge.tail.set(null, null, null, null, 0, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          connector.edge.head.local.copyFrom(local);
      };
      EToolShapeCreateLineConnector.prototype.newShape = function () {
          var result = new wcardinalUi.EShapeConnectorLine();
          result.fill.alpha = 1;
          return result;
      };
      EToolShapeCreateLineConnector.prototype.onHead = function (e) {
          var diagram = this._diagram;
          var layer = diagram.layer;
          if (layer) {
              var connector = this._connector;
              if (connector) {
                  var global_2 = e.data.global;
                  var local = layer.toLocal(global_2, undefined, this._work);
                  var edge = this._edge.find(wcardinalUi.EShapeAcceptorEdgeType.HEAD, local.x, local.y);
                  this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.HEAD, local.x, local.y);
                  if (this.isHeadAccepted(connector, local, edge)) {
                      this.onHeadAccepted(connector, local, edge);
                      wcardinalUi.DApplications.update(diagram);
                      return true;
                  }
                  else {
                      this.onHeadUnaccepted(connector, local);
                      wcardinalUi.DApplications.update(diagram);
                      return false;
                  }
              }
          }
          return false;
      };
      EToolShapeCreateLineConnector.prototype.isHeadAccepted = function (connector, local, edge) {
          if (edge == null) {
              return this.isDanglingEdgeAllowed();
          }
          else {
              return !this.isSameAcceptor(connector.edge.tail.acceptor, edge);
          }
      };
      EToolShapeCreateLineConnector.prototype.isSameAcceptor = function (a, b) {
          return a.shape === b.shape && a.edge === b.id && a.x === b.x && a.y === b.y;
      };
      EToolShapeCreateLineConnector.prototype.getHeadType = function () {
          return wcardinalUi.EShapePointsMarkerType.TRIANGLE;
      };
      EToolShapeCreateLineConnector.prototype.onHeadAccepted = function (connector, local, edge) {
          connector.points.marker.head.type = this.getHeadType();
          if (edge != null) {
              connector.edge.head.set(edge.shape, edge.id, edge.x, edge.y, 10, edge.local.x, edge.local.y, undefined, undefined, edge.acceptor.side);
          }
          else {
              connector.edge.head.set(null, null, null, null, 10, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          }
      };
      EToolShapeCreateLineConnector.prototype.onHeadUnaccepted = function (connector, local) {
          connector.points.marker.head.type = wcardinalUi.EShapePointsMarkerType.NONE;
          connector.edge.head.set(null, null, null, null, 0, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
      };
      EToolShapeCreateLineConnector.prototype.onDone = function () {
          if (this._phase === EToolShapeCreateLineConnectorPhase.DONE) {
              this._phase = EToolShapeCreateLineConnectorPhase.OFF;
              var connector = this._connector;
              if (connector) {
                  this._connector = undefined;
                  var diagram = this._diagram;
                  var layer = diagram.layer;
                  if (layer) {
                      connector.edge.attach();
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([connector], layer, this._selection, true));
                  }
                  else {
                      connector.detach();
                      connector.destroy();
                  }
                  this.emit("done", this);
              }
          }
      };
      EToolShapeCreateLineConnector.prototype.onCancel = function () {
          var connector = this._connector;
          if (connector != null) {
              this._connector = undefined;
              connector.detach();
              connector.destroy();
          }
          if (this._phase !== EToolShapeCreateLineConnectorPhase.OFF) {
              this._phase = EToolShapeCreateLineConnectorPhase.OFF;
              this.emit("cancel", this);
          }
      };
      EToolShapeCreateLineConnector.prototype.onKeyDown = function (e) {
          if (wcardinalUi.UtilKeyboardEvent.isCancelKey(e)) {
              this.onCancel();
          }
      };
      return EToolShapeCreateLineConnector;
  }(EToolImpl));

  var EToolShapeCreateElbowConnector = /** @class */ (function (_super) {
      __extends(EToolShapeCreateElbowConnector, _super);
      function EToolShapeCreateElbowConnector() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EToolShapeCreateElbowConnector.prototype.newShape = function () {
          var result = new wcardinalUi.EShapeConnectorElbow();
          result.fill.alpha = 1;
          return result;
      };
      return EToolShapeCreateElbowConnector;
  }(EToolShapeCreateLineConnector));

  var EToolShapeCreateLine = /** @class */ (function (_super) {
      __extends(EToolShapeCreateLine, _super);
      function EToolShapeCreateLine(options) {
          var _this = _super.call(this) || this;
          _this._options = options;
          _this._selection = options.selection;
          _this._diagram = options.diagram;
          _this._isNewPoint = false;
          _this._onDownPoint = new pixi_js.Point();
          _this._onMovePoint = new pixi_js.Point();
          _this._onDownBound = function (e) {
              _this.onDown(e);
          };
          _this._onMoveBound = function (e) {
              _this.onMove(e);
          };
          _this._onDblClickBound = function () {
              _this.onDblClick();
          };
          _this._onKeydownBound = function (e) {
              _this.onKeydown(e);
          };
          return _this;
      }
      EToolShapeCreateLine.prototype.onActivate = function () {
          var diagram = this._diagram;
          diagram.on(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
          diagram.on(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
          diagram.on("dblclick", this._onDblClickBound);
          diagram.on("keydown", this._onKeydownBound);
          var selection = this._selection;
          selection.modifier.disallow();
          selection.updateModifier();
      };
      EToolShapeCreateLine.prototype.onDeactivate = function () {
          var diagram = this._diagram;
          diagram.off(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
          diagram.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
          diagram.off("dblclick", this._onDblClickBound);
          diagram.off("keydown", this._onKeydownBound);
          this.onCancel();
          var selection = this._selection;
          selection.modifier.allow();
          selection.updateModifier();
      };
      EToolShapeCreateLine.prototype.onDown = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var diagram = this._diagram;
          var canvas = diagram.canvas;
          var layer = diagram.layer;
          if (canvas && layer) {
              this._isNewPoint = true;
              var line = this._line;
              if (line == null) {
                  var onDownPoint = this._onDownPoint;
                  canvas.toLocal(e.data.global, undefined, onDownPoint);
                  diagram.snapper.toSnapped(onDownPoint, onDownPoint);
                  layer.transform.localTransform.applyInverse(onDownPoint, onDownPoint);
                  var newLine = wcardinalUi.createLine([onDownPoint.x, onDownPoint.y], [], wcardinalUi.EShapeDefaults.STROKE_WIDTH, wcardinalUi.EShapePointsStyle.NONE);
                  newLine.attach(layer);
                  this._line = newLine;
              }
          }
      };
      EToolShapeCreateLine.prototype.onMove = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var line = this._line;
          if (line) {
              var diagram = this._diagram;
              var canvas = diagram.canvas;
              if (canvas) {
                  var values = line.points.values;
                  if (this._isNewPoint) {
                      this._isNewPoint = false;
                      values.push(0, 0);
                  }
                  var onMovePoint = this._onMovePoint;
                  canvas.toLocal(e.data.global, undefined, onMovePoint);
                  diagram.snapper.toSnapped(onMovePoint, onMovePoint);
                  var parent_1 = line.parent;
                  if (parent_1) {
                      parent_1.transform.localTransform.applyInverse(onMovePoint, onMovePoint);
                  }
                  var position = line.transform.position;
                  var x = onMovePoint.x - position.x;
                  var y = onMovePoint.y - position.y;
                  var length_1 = values.length;
                  if (originalEvent.shiftKey && 4 <= length_1) {
                      var px = values[length_1 - 4];
                      var py = values[length_1 - 3];
                      var dx = x - px;
                      var dy = y - py;
                      var dangle = Math.PI * 0.25;
                      var angle = Math.round(Math.atan2(dy, dx) / dangle) * dangle;
                      var d = Math.sqrt(dx * dx + dy * dy) | 0;
                      values[length_1 - 2] = px + d * Math.cos(angle);
                      values[length_1 - 1] = py + d * Math.sin(angle);
                  }
                  else {
                      values[length_1 - 2] = x | 0;
                      values[length_1 - 1] = y | 0;
                  }
                  line.points.values = values;
                  wcardinalUi.DApplications.update(diagram);
              }
          }
      };
      EToolShapeCreateLine.prototype.toValues = function (line) {
          var position = line.transform.position;
          var px = position.x;
          var py = position.y;
          var values = line.points.values;
          var result = [];
          var prevx = NaN;
          var prevy = NaN;
          for (var i = 0, imax = values.length; i < imax; i += 2) {
              var x = values[i + 0];
              var y = values[i + 1];
              if (prevx !== x || prevy !== y) {
                  result.push(px + x, py + y);
                  prevx = x;
                  prevy = y;
              }
          }
          return result;
      };
      EToolShapeCreateLine.prototype.add = function (values) {
          var diagram = this._diagram;
          var layer = diagram.layer;
          if (layer && 4 <= values.length) {
              var newLine = wcardinalUi.createLine(values, [], wcardinalUi.EShapeDefaults.STROKE_WIDTH, wcardinalUi.EShapePointsStyle.NONE);
              newLine.attach(layer);
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([newLine], layer, this._selection, true));
          }
      };
      EToolShapeCreateLine.prototype.onDblClick = function () {
          var line = this._line;
          if (line) {
              this._line = undefined;
              line.detach();
              this.add(this.toValues(line));
              wcardinalUi.DApplications.update(this._diagram);
              this.emit("done", this);
          }
      };
      EToolShapeCreateLine.prototype.onCancel = function () {
          var line = this._line;
          if (line) {
              line.points.values.length -= 2;
              this.onDblClick();
          }
      };
      EToolShapeCreateLine.prototype.onKeydown = function (e) {
          if (wcardinalUi.UtilKeyboardEvent.isCancelKey(e)) {
              this.onCancel();
          }
      };
      return EToolShapeCreateLine;
  }(EToolImpl));

  var EToolShapeCreate = /** @class */ (function (_super) {
      __extends(EToolShapeCreate, _super);
      function EToolShapeCreate(selection, diagram) {
          var _this = _super.call(this) || this;
          _this._selection = selection;
          _this._diagram = diagram;
          _this._applicationLayer = null;
          _this._onDownPoint = new pixi_js.Point();
          _this._onMovePoint = new pixi_js.Point();
          _this._shape = null;
          _this._creator = undefined;
          _this._onDownBound = function (e) {
              _this.onDown(e);
          };
          _this._onMoveBound = function (e) {
              _this.onMove(e);
          };
          _this._onUpBound = function (e) {
              _this.onUp(e);
          };
          return _this;
      }
      Object.defineProperty(EToolShapeCreate.prototype, "shape", {
          get: function () {
              return this._creator;
          },
          set: function (creator) {
              this._creator = creator;
          },
          enumerable: false,
          configurable: true
      });
      EToolShapeCreate.prototype.onActivate = function () {
          this._diagram.on(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
      };
      EToolShapeCreate.prototype.onDeactivate = function () {
          this._diagram.off(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
          this.onDone();
      };
      EToolShapeCreate.prototype.onDown = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var selection = this._selection;
          var diagram = this._diagram;
          var diagramLayer = diagram.layer;
          var creator = this._creator;
          if (diagramLayer != null && creator != null && this._shape == null) {
              var onDownPoint = diagramLayer.toLocal(e.data.global, undefined, this._onDownPoint);
              diagram.snapper.toSnapped(onDownPoint, onDownPoint);
              this._onMovePoint.copyFrom(onDownPoint);
              var shape = (this._shape = creator());
              wcardinalUi.toResized(shape, onDownPoint, onDownPoint, originalEvent.ctrlKey, originalEvent.shiftKey);
              shape.attach(diagramLayer);
              selection.modifier.disallow();
              wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([shape], diagramLayer, this._selection, true));
              var oldApplicationLayer = this._applicationLayer;
              if (oldApplicationLayer) {
                  this._applicationLayer = null;
                  var oldInteractionManager = oldApplicationLayer.renderer.plugins.interaction;
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
                  var onUpBound = this._onUpBound;
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              }
              var newApplicationLayer = wcardinalUi.DApplications.getLayer(diagram);
              if (newApplicationLayer) {
                  this._applicationLayer = newApplicationLayer;
                  var newInteractionManager = newApplicationLayer.renderer.plugins.interaction;
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
                  var onUpBound = this._onUpBound;
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.up, onUpBound);
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              }
          }
      };
      EToolShapeCreate.prototype.onMove = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var shape = this._shape;
          if (shape) {
              var diagram = this._diagram;
              var diagramLayer = diagram.layer;
              var selection = this._selection;
              var applicationLayer = this._applicationLayer;
              if (diagramLayer && applicationLayer) {
                  applicationLayer.lock();
                  var onDownPoint = this._onDownPoint;
                  var onMovePoint = diagramLayer.toLocal(e.data.global, undefined, this._onMovePoint);
                  diagram.snapper.toSnapped(onMovePoint, onMovePoint);
                  wcardinalUi.toResized(shape, onDownPoint, onMovePoint, originalEvent.ctrlKey, originalEvent.shiftKey);
                  selection.update("PROPERTY");
                  applicationLayer.unlock();
                  applicationLayer.update();
              }
          }
      };
      EToolShapeCreate.prototype.onUp = function (e) {
          this.onDone();
      };
      EToolShapeCreate.prototype.onDone = function () {
          var shape = this._shape;
          if (shape) {
              this._shape = null;
              var selection = this._selection;
              var onDownPoint = this._onDownPoint;
              var onMovePoint = this._onMovePoint;
              var applicationLayer = this._applicationLayer;
              if (applicationLayer) {
                  this._applicationLayer = null;
                  var interactionManager = applicationLayer.renderer.plugins.interaction;
                  interactionManager.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
                  var onUpBound = this._onUpBound;
                  interactionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
                  interactionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
                  interactionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
                  applicationLayer.lock();
                  if (onDownPoint.x === onMovePoint.x && onDownPoint.y === onMovePoint.y) {
                      onMovePoint.set(onDownPoint.x + 100, onDownPoint.y + 100);
                      wcardinalUi.toResized(shape, onDownPoint, onMovePoint, false, false);
                  }
                  selection.modifier.allow();
                  selection.update("PROPERTY");
                  applicationLayer.unlock();
                  applicationLayer.update();
              }
              this.emit("done", this);
          }
      };
      return EToolShapeCreate;
  }(EToolImpl));

  var EToolShapeEditLineHitArea = /** @class */ (function (_super) {
      __extends(EToolShapeEditLineHitArea, _super);
      function EToolShapeEditLineHitArea(parent) {
          var _this = _super.call(this) || this;
          _this._parent = parent;
          _this._capability = wcardinalUi.EShapeCapability.LINE_TAIL | wcardinalUi.EShapeCapability.LINE_HEAD;
          return _this;
      }
      Object.defineProperty(EToolShapeEditLineHitArea.prototype, "capability", {
          get: function () {
              return this._capability;
          },
          set: function (capability) {
              this._capability = capability;
          },
          enumerable: false,
          configurable: true
      });
      EToolShapeEditLineHitArea.prototype.contains = function (x, y) {
          var parent = this._parent;
          if (parent.isEditing()) {
              return true;
          }
          var points = parent.points;
          var pointsClosed = parent.closed;
          var capability = this._capability;
          var hasTail = !!(capability & wcardinalUi.EShapeCapability.LINE_TAIL);
          var hasHead = !!(capability & wcardinalUi.EShapeCapability.LINE_HEAD);
          // Anchors
          var s = parent.getAnchorSize() * 2;
          var thresholdLine = s * s;
          var thresholdAnchor = thresholdLine * 2;
          for (var i = hasTail ? 0 : 1, imax = points.length - (hasHead ? 0 : 1); i < imax; ++i) {
              var point = points[i];
              var dx = point.x - x;
              var dy = point.y - y;
              var d = dx * dx + dy * dy;
              if (d < thresholdAnchor) {
                  parent.setLastHitAnchor(i);
                  return true;
              }
          }
          // Lines
          for (var i = 0, imax = points.length - 1; i < imax; ++i) {
              var p0 = points[i + 0];
              var p1 = points[i + 1];
              var hitPoint = this.calcHitPoint(x, y, p0.x, p0.y, p1.x, p1.y, thresholdLine);
              if (0 <= hitPoint) {
                  parent.setLastHitSegment(i, hitPoint);
                  return true;
              }
          }
          if (hasTail && hasHead && pointsClosed) {
              var p0 = points[points.length - 1];
              var p1 = points[0];
              var hitPoint = this.calcHitPoint(x, y, p0.x, p0.y, p1.x, p1.y, thresholdLine);
              if (0 <= hitPoint) {
                  parent.setLastHitSegment(points.length - 1, hitPoint);
                  return true;
              }
          }
          parent.setLastHitSegment(-1, -1);
          return false;
      };
      EToolShapeEditLineHitArea.prototype.calcHitPoint = function (x, y, p0x, p0y, p1x, p1y, threshold) {
          var d0x = p1x - p0x;
          var d0y = p1y - p0y;
          var d1x = x - p0x;
          var d1y = y - p0y;
          var a = d0x * d0x + d0y * d0y;
          var b = d0x * d1x + d0y * d1y;
          var c = d1x * d1x + d1y * d1y;
          if (0.0001 < a) {
              var t = Math.max(0, Math.min(1, b / a));
              var d = a * t * t - 2 * b * t + c;
              if (d < threshold) {
                  return t;
              }
          }
          return -1;
      };
      return EToolShapeEditLineHitArea;
  }(pixi_js.Rectangle));

  var EToolShapeEditLineBase = /** @class */ (function (_super) {
      __extends(EToolShapeEditLineBase, _super);
      function EToolShapeEditLineBase(options) {
          var _this = _super.call(this) || this;
          _this._options = options;
          _this._selection = options.selection;
          _this._diagram = options.diagram;
          _this._onDownPoint = new pixi_js.Point();
          _this._points = [];
          _this._pointsStyle = wcardinalUi.EShapePointsStyle.NONE;
          _this._onMovePoint = new pixi_js.Point();
          _this._isEditing = false;
          _this._isEdited = false;
          _this._isActive = false;
          _this._shape = null;
          _this._capability = wcardinalUi.EShapeCapability.LINE_TAIL | wcardinalUi.EShapeCapability.LINE_HEAD;
          _this._scaleBound = 1;
          _this._scaleBoundInverse = 1;
          _this._lastHitAnchor = -1;
          _this._lastHitSegment = -1;
          _this._lastHitSegmentPosition = -1;
          _this._targetCopy = new pixi_js.Point();
          _this._target = null;
          _this._targetIndex = -1;
          _this._onDownBound = function (e) {
              _this.onDown(e);
          };
          _this._onMoveBound = function (e) {
              _this.onMove(e);
          };
          _this._onUpBound = function (e) {
              _this.onUp(e);
          };
          _this._onKeydownBound = function (e) {
              _this.onKeydown(e);
          };
          _this._onSetBound = function (canvas) {
              _this.onSet(canvas);
          };
          _this._onUnsetBound = function (canvas) {
              _this.onUnset(canvas);
          };
          _this.cursor = "grab";
          _this.interactive = true;
          _this.hitArea = new EToolShapeEditLineHitArea(_this);
          _this._unformatted = {
              length: 0,
              plength: 0,
              values: [],
              segments: [],
              style: wcardinalUi.EShapePointsStyle.NONE
          };
          _this._formatted = {
              length: 0,
              plength: 0,
              values: [],
              segments: [],
              style: wcardinalUi.EShapePointsStyle.NONE
          };
          return _this;
      }
      EToolShapeEditLineBase.prototype.onPrerender = function () {
          var scale0 = this.getParentScale();
          var scale1 = this._scaleBound;
          if (0.001 < Math.abs(scale0 - scale1)) {
              this._scaleBound = scale0;
              this._scaleBoundInverse = 1 / scale0;
              this.reshape();
          }
      };
      EToolShapeEditLineBase.prototype.getParentScale = function () {
          var parent = this.parent;
          return parent != null ? parent.scale.y : 1;
      };
      EToolShapeEditLineBase.prototype.render = function (renderer) {
          this.onPrerender();
          _super.prototype.render.call(this, renderer);
      };
      EToolShapeEditLineBase.prototype.getAnchorSize = function () {
          return 6 * this._scaleBoundInverse;
      };
      EToolShapeEditLineBase.prototype.activate = function () {
          if (!this._isActive) {
              this._isActive = true;
              this.onActivate();
          }
      };
      EToolShapeEditLineBase.prototype.onActivate = function () {
          this._isEditing = false;
          this._isEdited = false;
          this._target = null;
          this._targetIndex = -1;
          var diagram = this._diagram;
          var layer = wcardinalUi.DApplications.getLayer(diagram);
          if (layer) {
              var interactionManager = layer.renderer.plugins.interaction;
              diagram.on(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
              interactionManager.on(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
              var onUpBound = this._onUpBound;
              interactionManager.on(wcardinalUi.UtilPointerEvent.up, onUpBound);
              interactionManager.on(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
              interactionManager.on(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              diagram.on("keydown", this._onKeydownBound);
              diagram.on("set", this._onSetBound);
              diagram.on("unset", this._onUnsetBound);
          }
          var selection = this._selection;
          selection.modifier.disallow();
          selection.updateModifier();
      };
      EToolShapeEditLineBase.prototype.deactivate = function () {
          if (this._isActive) {
              this._isActive = false;
              this.onDeactivate();
          }
      };
      EToolShapeEditLineBase.prototype.onDeactivate = function () {
          this._isEditing = false;
          this._isEdited = false;
          this._target = null;
          this._targetIndex = -1;
          this.shape = null;
          var diagram = this._diagram;
          var layer = wcardinalUi.DApplications.getLayer(diagram);
          if (layer) {
              var interactionManager = layer.renderer.plugins.interaction;
              diagram.off(wcardinalUi.UtilPointerEvent.down, this._onDownBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.move, this._onMoveBound);
              var onUpBound = this._onUpBound;
              interactionManager.off(wcardinalUi.UtilPointerEvent.up, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.cancel, onUpBound);
              diagram.off("keydown", this._onKeydownBound);
              diagram.off("set", this._onSetBound);
              diagram.off("unset", this._onUnsetBound);
          }
          var selection = this._selection;
          selection.modifier.allow();
          selection.updateModifier();
      };
      EToolShapeEditLineBase.prototype.onSet = function (canvas) {
          // DO NOTHING
      };
      EToolShapeEditLineBase.prototype.onUnset = function (canvas) {
          this.onCancel();
      };
      EToolShapeEditLineBase.prototype.isActive = function () {
          return this._isActive;
      };
      EToolShapeEditLineBase.prototype.isEditing = function () {
          return this._isEditing;
      };
      Object.defineProperty(EToolShapeEditLineBase.prototype, "points", {
          get: function () {
              return this._points;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EToolShapeEditLineBase.prototype, "closed", {
          get: function () {
              return (this._pointsStyle & wcardinalUi.EShapePointsStyle.CLOSED) !== 0;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(EToolShapeEditLineBase.prototype, "shape", {
          get: function () {
              return this._shape;
          },
          set: function (shape) {
              var _a, _b;
              if (this._shape !== shape) {
                  this._shape = shape;
                  var capability = this.toCapability(shape);
                  this.hitArea.capability = capability;
                  this._capability = capability;
                  this._isEdited = false;
                  if (shape == null) {
                      this._points = [];
                      this._pointsStyle = wcardinalUi.EShapePointsStyle.NONE;
                      this._formatter = undefined;
                      var parent_1 = this.parent;
                      if (parent_1) {
                          parent_1.removeChild(this);
                          wcardinalUi.DApplications.update(this);
                      }
                  }
                  else {
                      var points = shape.points;
                      if (points) {
                          shape.updateTransform();
                          this._points = this.toPoints(shape, points, this.toTransform(shape));
                          var pointsStyle = points.style;
                          this._pointsStyle = pointsStyle;
                          this._formatter =
                              (_a = points.formatter) !== null && _a !== void 0 ? _a : (_b = wcardinalUi.EShapePointsFormatters.find(pointsStyle)) === null || _b === void 0 ? void 0 : _b.formatter;
                      }
                      else {
                          this._points = [];
                          this._pointsStyle = wcardinalUi.EShapePointsStyle.NONE;
                          this._formatter = undefined;
                      }
                      this.reshape();
                      var canvas = this._diagram.canvas;
                      if (canvas) {
                          canvas.addChild(this);
                      }
                  }
              }
          },
          enumerable: false,
          configurable: true
      });
      EToolShapeEditLineBase.prototype.toTransform = function (shape) {
          var _a;
          var result = ((_a = this._workTransform) !== null && _a !== void 0 ? _a : (this._workTransform = new pixi_js.Matrix()));
          result.copyFrom(shape.transform.internalTransform);
          // If the layer this shape belongs to has a non-zero position,
          // we have to take that into consideration.
          var parent = shape.root.parent;
          if (parent) {
              result.prepend(parent.transform.localTransform);
          }
          return result;
      };
      EToolShapeEditLineBase.prototype.toPoints = function (shape, points, transform) {
          var result = [];
          var values = points.values;
          for (var i = 0, imax = values.length; i < imax; i += 2) {
              var point = new pixi_js.Point(values[i + 0], values[i + 1]);
              result.push(transform.apply(point, point));
          }
          return result;
      };
      EToolShapeEditLineBase.prototype.setLastHitAnchor = function (index) {
          if (this._lastHitAnchor !== index || this._lastHitSegment !== -1) {
              this._lastHitAnchor = index;
              this._lastHitSegment = -1;
              this._lastHitSegmentPosition = -1;
              this.reshape();
              wcardinalUi.DApplications.update(this);
          }
      };
      EToolShapeEditLineBase.prototype.setLastHitSegment = function (index, position) {
          this._lastHitSegmentPosition = position;
          if (this._lastHitAnchor !== -1 || this._lastHitSegment !== index) {
              this._lastHitAnchor = -1;
              this._lastHitSegment = index;
              this.reshape();
              wcardinalUi.DApplications.update(this);
          }
      };
      EToolShapeEditLineBase.prototype.reshape = function () {
          var graphics = this;
          var points = this._points;
          var pointsLength = points.length;
          var pointsStyle = this._pointsStyle;
          var formatter = this._formatter;
          var pointsClosed = !!(pointsStyle & wcardinalUi.EShapePointsStyle.CLOSED);
          var capability = this._capability;
          var hasTail = !!(capability & wcardinalUi.EShapeCapability.LINE_TAIL);
          var hasHead = !!(capability & wcardinalUi.EShapeCapability.LINE_HEAD);
          graphics.clear();
          if (0 < pointsLength) {
              var s = this.getAnchorSize();
              var hs = s * 0.5;
              var color = 0x1e87f0;
              var colorHit = 0xf36f27;
              var colorFormatted = 0xaaaaaa;
              var alpha = 1;
              var alphaFormatted = 0.5;
              var anchor = this._lastHitAnchor;
              var segment = this._lastHitSegment;
              // Formatted
              if (formatter != null) {
                  var unformatted = this._unformatted;
                  var uvalues = unformatted.values;
                  var usegments = unformatted.segments;
                  for (var i = 0, j = 0; i < pointsLength; i += 1, j += 2) {
                      var point = points[i];
                      uvalues[j] = point.x;
                      uvalues[j + 1] = point.y;
                  }
                  var formatted = this._formatted;
                  formatter(pointsLength, uvalues, usegments, pointsStyle, formatted);
                  var fvalues = formatted.values;
                  graphics.lineStyle(hs, colorFormatted, alphaFormatted);
                  if (0 < fvalues.length) {
                      graphics.moveTo(fvalues[0], fvalues[1]);
                      for (var i = 2, imax = fvalues.length; i < imax; i += 2) {
                          graphics.lineTo(fvalues[i], fvalues[i + 1]);
                      }
                  }
              }
              // Line
              for (var i = 0, imax = pointsLength - 1; i < imax; ++i) {
                  var p0 = points[i];
                  var p1 = points[i + 1];
                  var c = segment === i ? colorHit : color;
                  graphics.lineStyle(hs, c, alpha);
                  graphics.moveTo(p0.x, p0.y);
                  graphics.lineTo(p1.x, p1.y);
              }
              if (hasTail && hasHead && pointsClosed) {
                  var i = points.length - 1;
                  var p0 = points[i];
                  var p1 = points[0];
                  var c = segment === i ? colorHit : color;
                  graphics.lineStyle(hs, c, alpha);
                  graphics.moveTo(p0.x, p0.y);
                  graphics.lineTo(p1.x, p1.y);
              }
              // Anchors
              var targetIndex = this._targetIndex;
              for (var i = hasTail ? 0 : 1, imax = pointsLength - (hasHead ? 0 : 1); i < imax; ++i) {
                  var point = points[i];
                  var c = anchor === i || targetIndex === i ? colorHit : color;
                  graphics.lineStyle(hs, c, alpha);
                  graphics.beginFill(c, alpha);
                  graphics.drawRect(point.x - hs, point.y - hs, s, s);
                  graphics.endFill();
              }
          }
      };
      EToolShapeEditLineBase.prototype.replace = function () {
          var oldShape = this._shape;
          var points = this._points;
          if (oldShape && oldShape.parent && 2 <= points.length) {
              var values = this.toValues(points, oldShape);
              if (2 < values.length) {
                  var newShape = this.newShape(values, [], this._pointsStyle, oldShape);
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeReplaceOne(newShape, oldShape, oldShape.parent, this._selection));
              }
          }
      };
      EToolShapeEditLineBase.prototype.toValues = function (points, shape) {
          shape.updateTransform();
          var transform = this.toTransform(shape).invert();
          var result = [];
          var a = transform.a;
          var b = transform.b;
          var c = transform.c;
          var d = transform.d;
          var tx = transform.tx;
          var ty = transform.ty;
          var pprevx = NaN;
          var pprevy = NaN;
          for (var i = 0, imax = points.length; i < imax; ++i) {
              var point = points[i];
              var px = point.x;
              var py = point.y;
              if (pprevx !== px || pprevy !== py) {
                  var x = a * px + c * py + tx;
                  var y = b * px + d * py + ty;
                  result.push(x, y);
                  pprevx = x;
                  pprevy = y;
              }
          }
          return result;
      };
      EToolShapeEditLineBase.prototype.onDown = function (e) {
          if (e.target === this) {
              var originalEvent = e.data.originalEvent;
              if (originalEvent.altKey) {
                  return;
              }
              var diagram = this._diagram;
              var canvas = diagram.canvas;
              if (canvas != null && !this._isEditing) {
                  var lastHitAnchor = this._lastHitAnchor;
                  var points = this._points;
                  var onDownPoint = this._onDownPoint;
                  if (0 <= lastHitAnchor && lastHitAnchor < points.length) {
                      this._isEditing = true;
                      canvas.toLocal(e.data.global, undefined, onDownPoint);
                      this._target = points[lastHitAnchor];
                      this._targetCopy.copyFrom(this._target);
                      this._targetIndex = lastHitAnchor;
                      this.onTargetChange(lastHitAnchor, onDownPoint);
                      this.reshape();
                      wcardinalUi.DApplications.update(this);
                  }
                  else {
                      var lastHitSegment = this._lastHitSegment;
                      if (0 <= lastHitSegment) {
                          this._lastHitSegment = -1;
                          this._isEditing = true;
                          canvas.toLocal(e.data.global, undefined, onDownPoint);
                          var p0 = points[lastHitSegment + 0];
                          var p1 = points[lastHitSegment < points.length - 1 ? lastHitSegment + 1 : 0];
                          var t = this._lastHitSegmentPosition;
                          var ti = 1 - t;
                          var x = ti * p0.x + t * p1.x;
                          var y = ti * p0.y + t * p1.y;
                          var point = new pixi_js.Point(x, y);
                          points.splice(lastHitSegment + 1, 0, point);
                          this._target = point;
                          this._targetCopy.copyFrom(point);
                          this._targetIndex = lastHitSegment + 1;
                          this.onTargetChange(this._targetIndex, onDownPoint);
                          this.reshape();
                          wcardinalUi.DApplications.update(this);
                      }
                  }
              }
          }
          else {
              this.onDone();
          }
      };
      EToolShapeEditLineBase.prototype.onTargetChange = function (targetIndex, point) {
          // DO NOTHING
      };
      EToolShapeEditLineBase.prototype.onMove = function (e) {
          if (this._isEditing) {
              var originalEvent = e.data.originalEvent;
              if (originalEvent.altKey) {
                  return;
              }
              var diagram = this._diagram;
              var canvas = diagram.canvas;
              var target = this._target;
              var targetCopy = this._targetCopy;
              if (canvas && target) {
                  this._isEdited = true;
                  var onDownPoint = this._onDownPoint;
                  var onMovePoint = canvas.toLocal(e.data.global, undefined, this._onMovePoint);
                  target.set(targetCopy.x + onMovePoint.x - onDownPoint.x, targetCopy.y + onMovePoint.y - onDownPoint.y);
                  this.toSnapped(target, diagram, target);
                  if (originalEvent.shiftKey) {
                      var points = this._points;
                      var targetIndex = this._targetIndex;
                      var previousIndex = 0 < targetIndex ? targetIndex - 1 : targetIndex + 1;
                      if (0 <= previousIndex && previousIndex < points.length) {
                          var previous = points[previousIndex];
                          var dx = target.x - previous.x;
                          var dy = target.y - previous.y;
                          var dangle = Math.PI * 0.25;
                          var angle = Math.round(Math.atan2(dy, dx) / dangle) * dangle;
                          var d = Math.sqrt(dx * dx + dy * dy);
                          target.set(previous.x + d * Math.cos(angle), previous.y + d * Math.sin(angle));
                      }
                  }
                  this.onTargetMove(onMovePoint);
                  this.reshape();
                  wcardinalUi.DApplications.update(this);
              }
          }
          else {
              this.onTargetNotMove(e);
          }
      };
      EToolShapeEditLineBase.prototype.onTargetMove = function (point) {
          // DO NOTHING
      };
      EToolShapeEditLineBase.prototype.onTargetNotMove = function (e) {
          // DO NOTHING
      };
      EToolShapeEditLineBase.prototype.toSnapped = function (target, diagram, result) {
          diagram.snapper.toSnapped(target, result);
      };
      EToolShapeEditLineBase.prototype.onUp = function (e) {
          if (this._isEditing) {
              this._isEditing = false;
              this._target = null;
          }
      };
      EToolShapeEditLineBase.prototype.onDone = function () {
          this._isEditing = false;
          if (this._isEdited) {
              this._isEdited = false;
              this.replace();
          }
          this.emit("done", this);
      };
      EToolShapeEditLineBase.prototype.onCancel = function () {
          this._isEditing = false;
          this._isEdited = false;
          var parent = this.parent;
          if (parent) {
              parent.removeChild(this);
              wcardinalUi.DApplications.update(this);
          }
          this.emit("cancel", this);
      };
      EToolShapeEditLineBase.prototype.onKeydown = function (e) {
          if (wcardinalUi.UtilKeyboardEvent.isCancelKey(e)) {
              this.onDone();
          }
          else if (wcardinalUi.UtilKeyboardEvent.isDeleteKey(e)) {
              var targetIndex = this._targetIndex;
              var points = this._points;
              if (0 <= targetIndex && targetIndex < points.length && 2 < points.length) {
                  this._isEdited = true;
                  points.splice(targetIndex, 1);
                  if (targetIndex === points.length) {
                      this._targetIndex -= 1;
                      this.onTargetChange(this._targetIndex, null);
                  }
                  this.reshape();
                  wcardinalUi.DApplications.update(this);
              }
          }
      };
      return EToolShapeEditLineBase;
  }(pixi_js.Graphics));

  var EToolShapeEditLineConnector = /** @class */ (function (_super) {
      __extends(EToolShapeEditLineConnector, _super);
      function EToolShapeEditLineConnector(options) {
          var _this = _super.call(this, options) || this;
          _this._edge = new EToolShapeAcceptorEdge(_this._diagram, true);
          _this._work = new pixi_js.Point();
          return _this;
      }
      EToolShapeEditLineConnector.prototype.toCapability = function (shape) {
          var result = wcardinalUi.EShapeCapability.NONE;
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_TAIL)) {
              result |= wcardinalUi.EShapeCapability.LINE_TAIL;
          }
          if (wcardinalUi.EShapeCapabilities.contains(shape, wcardinalUi.EShapeCapability.LINE_HEAD)) {
              result |= wcardinalUi.EShapeCapability.LINE_HEAD;
          }
          return result;
      };
      EToolShapeEditLineConnector.prototype.onActivate = function () {
          this._edge.begin(this._diagram.canvas, this._shape);
          this._edgeTail = undefined;
          this._edgeHead = undefined;
          _super.prototype.onActivate.call(this);
      };
      EToolShapeEditLineConnector.prototype.onDeactivate = function () {
          this._edge.end();
          this._edgeTail = undefined;
          this._edgeHead = undefined;
          _super.prototype.onDeactivate.call(this);
      };
      EToolShapeEditLineConnector.prototype.onTargetChange = function (targetIndex, point) {
          if (targetIndex === 0) {
              var edge = this._edge;
              edge.show();
              if (point != null) {
                  edge.update(wcardinalUi.EShapeAcceptorEdgeType.TAIL, point.x, point.y);
              }
          }
          else if (targetIndex === this._points.length - 1) {
              var edge = this._edge;
              edge.show();
              if (point != null) {
                  edge.update(wcardinalUi.EShapeAcceptorEdgeType.HEAD, point.x, point.y);
              }
          }
          else {
              this._edge.hide();
          }
      };
      EToolShapeEditLineConnector.prototype.onTargetMove = function (point) {
          var targetIndex = this._targetIndex;
          if (targetIndex === 0) {
              this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.TAIL, point.x, point.y);
          }
          else if (targetIndex === this._points.length - 1) {
              this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.HEAD, point.x, point.y);
          }
      };
      EToolShapeEditLineConnector.prototype.onTargetNotMove = function (e) {
          var targetIndex = this._targetIndex;
          if (targetIndex === 0) {
              var canvas = this._diagram.canvas;
              if (canvas) {
                  var onMovePoint = canvas.toLocal(e.data.global, undefined, this._onMovePoint);
                  this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.TAIL, onMovePoint.x, onMovePoint.y);
              }
          }
          else if (targetIndex === this._points.length - 1) {
              var canvas = this._diagram.canvas;
              if (canvas) {
                  var onMovePoint = canvas.toLocal(e.data.global, undefined, this._onMovePoint);
                  this._edge.update(wcardinalUi.EShapeAcceptorEdgeType.HEAD, onMovePoint.x, onMovePoint.y);
              }
          }
      };
      EToolShapeEditLineConnector.prototype.toSnapped = function (target, diagram, result) {
          var targetIndex = this._targetIndex;
          if (targetIndex === 0) {
              var edge = this._edge.find(wcardinalUi.EShapeAcceptorEdgeType.TAIL, target.x, target.y);
              if (edge != null) {
                  result.copyFrom(edge.local);
              }
              this._edgeTail = edge;
          }
          else {
              var points = this._points;
              var pointsLength = points.length;
              if (targetIndex === pointsLength - 1) {
                  var edge = this._edge.find(wcardinalUi.EShapeAcceptorEdgeType.HEAD, target.x, target.y);
                  if (edge != null) {
                      result.copyFrom(edge.local);
                  }
                  this._edgeHead = edge;
              }
              else {
                  diagram.snapper.toSnapped(target, result);
              }
          }
      };
      EToolShapeEditLineConnector.prototype.toPoints = function (shape, points, transform) {
          var result = [];
          if (shape instanceof wcardinalUi.EShapeConnectorLine) {
              var edge = shape.edge;
              var tailLocal = edge.tail.local;
              var headLocal = edge.head.local;
              var transformPosition = shape.transform.position;
              var px = transformPosition.x;
              var py = transformPosition.y;
              var x0 = tailLocal.x - px;
              var y0 = tailLocal.y - py;
              var x1 = headLocal.x - px;
              var y1 = headLocal.y - py;
              var tailPoint = new pixi_js.Point(x0, y0);
              result.push(transform.apply(tailPoint, tailPoint));
              var bodyValues = shape.body.values;
              var bodyValuesLength = bodyValues.length;
              if (0 < bodyValuesLength) {
                  var cx = (x1 + x0) * 0.5;
                  var cy = (y1 + y0) * 0.5;
                  var dx = x1 - x0;
                  var dy = y1 - y0;
                  var a = Math.atan2(dy, dx);
                  var l = Math.sqrt(dx * dx + dy * dy);
                  var c = Math.cos(a) * l;
                  var s = Math.sin(a) * l;
                  for (var i = 0; i < bodyValuesLength; i += 2) {
                      var x = bodyValues[i + 0];
                      var y = bodyValues[i + 1];
                      var x2 = cx + c * x - s * y;
                      var y2 = cy + c * y + s * x;
                      var middlePoint = new pixi_js.Point(x2, y2);
                      result.push(transform.apply(middlePoint, middlePoint));
                  }
              }
              var headPoint = new pixi_js.Point(x1, y1);
              result.push(transform.apply(headPoint, headPoint));
          }
          return result;
      };
      EToolShapeEditLineConnector.prototype.newShape = function (values, segments, style, oldShape) {
          var boundary = wcardinalUi.toPointsBoundary(values, [0, 0, 0, 0]);
          var cx = (boundary[2] + boundary[0]) * 0.5;
          var cy = (boundary[3] + boundary[1]) * 0.5;
          var sx = boundary[2] - boundary[0];
          var sy = boundary[3] - boundary[1];
          var result = oldShape.clone();
          var transform = result.transform;
          var transformPosition = transform.position;
          var px = transformPosition.x;
          var py = transformPosition.y;
          result.lock(wcardinalUi.EShapeLockPart.UPLOADED);
          transformPosition.set(px + cx, py + cy);
          transform.scale.set(1, 1);
          transform.rotation = 0;
          transform.skew.set(0, 0);
          result.points.toFitted(sx, sy);
          result.size.set(sx, sy);
          result.edge.lock();
          result.body.set(wcardinalUi.EShapeConnectorBodies.from(values, 0, 0));
          var local = this._work;
          if (2 <= values.length) {
              local.set(px + values[0], py + values[1]);
          }
          else {
              local.set(px, py);
          }
          var edgeTail = this._edgeTail;
          if (edgeTail !== undefined) {
              if (this.isTailAccepted(result, local, edgeTail)) {
                  this.onTailAccepted(result, local, edgeTail);
              }
          }
          if (2 <= values.length) {
              var valuesLength = values.length;
              local.set(px + values[valuesLength - 2], py + values[valuesLength - 1]);
          }
          else {
              local.set(px, py);
          }
          var edgeHead = this._edgeHead;
          if (edgeHead !== undefined) {
              if (this.isHeadAccepted(result, local, edgeHead)) {
                  this.onHeadAccepted(result, local, edgeHead);
              }
          }
          result.edge.unlock();
          result.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          return result;
      };
      EToolShapeEditLineConnector.prototype.isDanglingEdgeAllowed = function () {
          var _a;
          return (_a = this._options.dangling) !== null && _a !== void 0 ? _a : false;
      };
      EToolShapeEditLineConnector.prototype.isTailAccepted = function (connector, local, edge) {
          if (edge == null) {
              return this.isDanglingEdgeAllowed();
          }
          else {
              return true;
          }
      };
      EToolShapeEditLineConnector.prototype.onTailAccepted = function (connector, local, edge) {
          if (edge != null) {
              connector.edge.tail.set(edge.shape, edge.id, edge.x, edge.y, undefined, undefined, undefined, undefined, undefined, edge.acceptor.side);
          }
          else {
              connector.edge.tail.set(null, null, null, null, undefined, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          }
      };
      EToolShapeEditLineConnector.prototype.isHeadAccepted = function (connector, local, edge) {
          if (edge == null) {
              return this.isDanglingEdgeAllowed();
          }
          else {
              return true;
          }
      };
      EToolShapeEditLineConnector.prototype.onHeadAccepted = function (connector, local, edge) {
          if (edge != null) {
              connector.edge.head.set(edge.shape, edge.id, edge.x, edge.y, undefined, undefined, undefined, undefined, undefined, edge.acceptor.side);
          }
          else {
              connector.edge.head.set(null, null, null, null, undefined, local.x, local.y, undefined, undefined, wcardinalUi.EShapeAcceptorEdgeSide.TOP);
          }
      };
      return EToolShapeEditLineConnector;
  }(EToolShapeEditLineBase));

  var EToolShapeEditLine = /** @class */ (function (_super) {
      __extends(EToolShapeEditLine, _super);
      function EToolShapeEditLine(options) {
          return _super.call(this, options) || this;
      }
      EToolShapeEditLine.prototype.toCapability = function (shape) {
          return wcardinalUi.EShapeCapability.LINE_TAIL | wcardinalUi.EShapeCapability.LINE_HEAD;
      };
      EToolShapeEditLine.prototype.newShape = function (values, segments, style, oldShape) {
          var boundary = wcardinalUi.toPointsBoundary(values, [0, 0, 0, 0]);
          var cx = (boundary[2] + boundary[0]) * 0.5;
          var cy = (boundary[3] + boundary[1]) * 0.5;
          var sx = boundary[2] - boundary[0];
          var sy = boundary[3] - boundary[1];
          var result = oldShape.clone();
          var transform = result.transform;
          var transformPosition = transform.position;
          var px = transformPosition.x;
          var py = transformPosition.y;
          var localTransform = oldShape.transform.localTransform;
          var dx = localTransform.a * cx + localTransform.c * cy;
          var dy = localTransform.b * cx + localTransform.d * cy;
          var newValues = [];
          for (var i = 0, imax = values.length; i < imax; i += 2) {
              newValues.push(values[i + 0] - cx, values[i + 1] - cy);
          }
          result.lock(wcardinalUi.EShapeLockPart.UPLOADED);
          result.transform.position.set(px + dx, py + dy);
          result.size.set(sx, sy);
          var points = result.points;
          if (points) {
              points.set(newValues, segments, style);
          }
          result.unlock(wcardinalUi.EShapeLockPart.UPLOADED, true);
          return result;
      };
      return EToolShapeEditLine;
  }(EToolShapeEditLineBase));

  /*
   * Copyright (C) 2021 Toshiba Corporation
   * SPDX-License-Identifier: Apache-2.0
   */
  var UtilAjax = {
      send: function (method, settings) {
          var isCompleted = false;
          var makeOnError = function (reason) {
              return function () {
                  if (!isCompleted) {
                      isCompleted = true;
                      settings.error(reason, xhr);
                  }
              };
          };
          var xhr = new XMLHttpRequest();
          xhr.open(method, settings.url, true);
          xhr.onload = function () {
              if (!isCompleted) {
                  isCompleted = true;
                  var status_1 = xhr.status;
                  if ((200 <= status_1 && status_1 < 300) ||
                      status_1 === 0 ||
                      status_1 === 304 ||
                      status_1 === 1223) {
                      settings.success(xhr.responseText, xhr);
                  }
                  else {
                      settings.error(xhr.statusText, xhr);
                  }
              }
          };
          var onError = makeOnError("error");
          xhr.onerror = onError;
          xhr.onabort = makeOnError("abort");
          // Headers
          var headers = settings.headers;
          if (headers != null) {
              for (var name_1 in headers) {
                  var header = headers[name_1];
                  if (header != null) {
                      xhr.setRequestHeader(name_1, header);
                  }
              }
          }
          xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
          // Timeout
          var timeout = settings.timeout;
          if (timeout != null) {
              xhr.timeout = timeout;
              xhr.ontimeout = makeOnError("timeout");
              if (0 < timeout) {
                  // For browsers which do not support the `timeout`
                  setTimeout(function () {
                      xhr.abort();
                  }, timeout);
              }
          }
          // Send
          try {
              var data = settings.data;
              if (data != null) {
                  xhr.send(data);
              }
              else {
                  xhr.send();
              }
          }
          catch (_a) {
              onError();
          }
      }
  };

  var UtilCanvasCategory = /** @class */ (function () {
      function UtilCanvasCategory(options) {
          this._options = options;
      }
      UtilCanvasCategory.prototype.get = function () {
          var _a;
          return ((_a = this._promise) !== null && _a !== void 0 ? _a : (this._promise = this.fetch()));
      };
      UtilCanvasCategory.prototype.fetch = function () {
          var _this = this;
          return Promise.all([this.doFetch()]).then(function (resolveds) {
              var resolved = resolveds[0];
              return _this.toFetched(resolved);
          });
      };
      UtilCanvasCategory.prototype.doFetch = function () {
          var options = this._options;
          if (wcardinalUi.isFunction(options)) {
              return options();
          }
          else {
              return options;
          }
      };
      UtilCanvasCategory.prototype.toFetched = function (options) {
          var theme = wcardinalUi.DThemes.get("EEditorCanvas");
          if (options != null) {
              var items = this.toItems(theme, options);
              return {
                  default: this.toDefault(items, theme, options),
                  items: items,
                  writable: this.toWritable(theme, options)
              };
          }
          return {
              default: theme.getDefaultCategory(),
              items: [],
              writable: theme.isCategoryWritable()
          };
      };
      UtilCanvasCategory.prototype.toItems = function (theme, options) {
          var result = [];
          var items = options.items;
          if (items != null) {
              for (var i = 0, imax = items.length; i < imax; ++i) {
                  var category = items[i];
                  var id = theme.toCategoryId(category);
                  var label = theme.toCategoryLabel(category);
                  result.push({
                      id: id,
                      label: label
                  });
              }
          }
          return result;
      };
      UtilCanvasCategory.prototype.toDefault = function (items, theme, options) {
          if (options.default != null) {
              return options.default;
          }
          else if (0 < items.length) {
              return items[0].id;
          }
          else {
              return theme.getDefaultCategory();
          }
      };
      UtilCanvasCategory.prototype.toWritable = function (theme, options) {
          var _a;
          return (_a = options.writable) !== null && _a !== void 0 ? _a : theme.isCategoryWritable();
      };
      return UtilCanvasCategory;
  }());

  var UtilCanvas = /** @class */ (function () {
      function UtilCanvas(options) {
          this._category = new UtilCanvasCategory(options === null || options === void 0 ? void 0 : options.category);
          this._options = options;
      }
      UtilCanvas.prototype.get = function () {
          var _a;
          return ((_a = this._promise) !== null && _a !== void 0 ? _a : (this._promise = this.fetch()));
      };
      UtilCanvas.prototype.fetch = function () {
          var _this = this;
          return this._category.get().then(function (category) {
              return _this.toDefault(category);
          });
      };
      UtilCanvas.prototype.toDefault = function (category) {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          var theme = wcardinalUi.DThemes.get("EEditorCanvas");
          var options = this._options;
          if (options != null) {
              return {
                  name: (_a = options.name) !== null && _a !== void 0 ? _a : theme.getDefaultName(),
                  label: (_b = options.label) !== null && _b !== void 0 ? _b : theme.getDefaultLabel(),
                  width: (_c = options.width) !== null && _c !== void 0 ? _c : theme.getDefaultWidth(),
                  height: (_d = options.height) !== null && _d !== void 0 ? _d : theme.getDefaultHeight(),
                  category: category,
                  summary: (_e = options.summary) !== null && _e !== void 0 ? _e : theme.getDefaultSummary(),
                  description: (_f = options.description) !== null && _f !== void 0 ? _f : theme.getDefaultDescription(),
                  background: {
                      color: (_h = (_g = options.background) === null || _g === void 0 ? void 0 : _g.color) !== null && _h !== void 0 ? _h : theme.getDefaultBackgroundColor(),
                      alpha: (_k = (_j = options.background) === null || _j === void 0 ? void 0 : _j.alpha) !== null && _k !== void 0 ? _k : theme.getDefaultBackgroundAlpha()
                  }
              };
          }
          return {
              name: theme.getDefaultName(),
              label: theme.getDefaultLabel(),
              width: theme.getDefaultWidth(),
              height: theme.getDefaultHeight(),
              category: category,
              summary: theme.getDefaultSummary(),
              description: theme.getDefaultDescription(),
              background: {
                  color: theme.getDefaultBackgroundColor(),
                  alpha: theme.getDefaultBackgroundAlpha()
              }
          };
      };
      return UtilCanvas;
  }());

  var UtilDataValues = /** @class */ (function () {
      function UtilDataValues(parent) {
          this.parent = parent;
          this.mappings = {};
      }
      UtilDataValues.prototype.set = function (mappings) {
          this.mappings = mappings;
          var parent = this.parent;
          var parentData = parent.data;
          for (var id in mappings) {
              var value = mappings[id];
              if (value) {
                  parentData.set(id, value.value, value.time, value.state);
              }
          }
          parent.update();
      };
      UtilDataValues.prototype.retain = function (ids) {
          var retained = {};
          var mapping = this.mappings;
          for (var i = 0, imax = ids.length; i < imax; ++i) {
              var id = ids[i];
              if (id in mapping) {
                  retained[id] = mapping[id];
              }
          }
          this.set(retained);
      };
      return UtilDataValues;
  }());

  var UtilDate = /** @class */ (function () {
      function UtilDate() {
      }
      UtilDate.getFormatter = function () {
          if (UtilDate.DATE_FORMATTER == null) {
              UtilDate.DATE_FORMATTER = wcardinalUi.NumberFormatters.create("%Y%M%D%H%m%s");
          }
          return UtilDate.DATE_FORMATTER;
      };
      UtilDate.format = function (target) {
          return this.getFormatter().format(target, 1);
      };
      UtilDate.DATE_FORMATTER = null;
      return UtilDate;
  }());

  var EEditorCanvasLegacy = /** @class */ (function (_super) {
      __extends(EEditorCanvasLegacy, _super);
      function EEditorCanvasLegacy(options) {
          var _this = _super.call(this, options) || this;
          var diagram = options.diagram;
          _this._diagram = diagram;
          _this.state.isDisabled = diagram.canvas == null;
          diagram.on("unset", function () {
              _this.state.isDisabled = true;
          });
          diagram.on("set", function () {
              _this.state.isDisabled = false;
          });
          _this._canvas = options.canvas;
          _this.content.addChild(_this.newLayout());
          return _this;
      }
      EEditorCanvasLegacy.prototype.newLayout = function () {
          return new wcardinalUi.DLayoutVertical({
              x: "padding",
              y: "padding",
              width: "padding",
              height: "auto",
              children: this.newLayoutItems()
          });
      };
      EEditorCanvasLegacy.prototype.newLayoutItems = function () {
          return [
              this.newTextLabel(),
              this.newLayoutName(),
              this.newLayoutLabel(),
              this.newLayoutWidth(),
              this.newLayoutHeight(),
              this.newLayoutCategory(),
              this.newLayoutSummary(),
              this.newLayoutDescription(),
              this.newLayoutBackground()
          ];
      };
      EEditorCanvasLegacy.prototype.newTextLabel = function () {
          return new wcardinalUi.DText({
              width: "100%",
              text: {
                  value: this.theme.getLabel()
              }
          });
      };
      EEditorCanvasLegacy.prototype.newLayoutName = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputTextAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputNameLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          var canvas = diagram.canvas;
                          if (canvas != null && canvas.name !== value) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentName(diagram, canvas, value));
                          }
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.input.value = canvas.name;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.input.value = canvas.name;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutLabel = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputTextAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputLabelLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function (value) {
                          var canvas = diagram.canvas;
                          if (canvas != null && canvas.label !== value) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentLabel(diagram, canvas, value));
                          }
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.input.value = canvas.label;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.input.value = canvas.label;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutWidth = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputIntegerAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputWidthLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 1,
                  on: {
                      change: function (value) {
                          var canvas = diagram.canvas;
                          if (canvas != null && canvas.width !== value) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentWidth(diagram, canvas, value));
                          }
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.input.value = canvas.width;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.input.value = canvas.width;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutHeight = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputIntegerAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this.theme.getInputHeightLabel()
                  }
              },
              input: {
                  weight: 1,
                  min: 1,
                  on: {
                      change: function (value) {
                          var canvas = diagram.canvas;
                          if (canvas != null && canvas.height !== value) {
                              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentHeight(diagram, canvas, value));
                          }
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.input.value = canvas.height;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.input.value = canvas.height;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutBackground = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [this.newLabelBackground(), this.newInputBackground()]
          });
      };
      EEditorCanvasLegacy.prototype.newLabelBackground = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputBackgroundLabel()
              }
          });
      };
      EEditorCanvasLegacy.prototype.newInputBackground = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DButtonColor({
              weight: 1,
              on: {
                  change: function (value) {
                      wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentBackground(diagram, value.color, value.alpha));
                  }
              }
          });
          result.dialog.on("open", function () {
              var dialog = result.dialog;
              var dialogNew = dialog.new;
              var dialogCurrent = dialog.current;
              dialogNew.color = dialogCurrent.color;
              dialogNew.alpha = dialogCurrent.alpha;
          });
          var update = function () {
              var value = result.value;
              var canvas = diagram.canvas;
              if (canvas != null) {
                  var background = canvas.background;
                  var backgroundColor = background.color;
                  var backgroundAlpha = background.alpha;
                  value.color = wcardinalUi.isNumber(backgroundColor) ? backgroundColor : 0xffffff;
                  value.alpha = wcardinalUi.isNumber(backgroundAlpha) ? backgroundAlpha : 1;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", update);
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutCategory = function () {
          var _this = this;
          var label = this.newLabelCategory();
          var select = this.newSelectCategory();
          var result = new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              visible: false,
              children: [label, select]
          });
          this._canvas.get().then(function (canvas) {
              _this.onCanvasValueFetched(canvas, result, select);
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.onCanvasValueFetched = function (canvas, layout, select) {
          var category = canvas.category;
          var categoryDefault = category.default;
          var categoryItems = category.items;
          if (categoryDefault != null && 0 < categoryItems.length) {
              var items = [];
              for (var i = 0, imax = categoryItems.length; i < imax; ++i) {
                  var categoryItem = categoryItems[i];
                  items.push({
                      value: categoryItem.id,
                      text: {
                          value: categoryItem.label
                      }
                  });
              }
              select.menu = new wcardinalUi.DMenu({
                  fit: true,
                  items: items
              });
              select.value = categoryDefault;
              var diagram_1 = this._diagram;
              var update = function () {
                  var _a;
                  var diagramCanvas = diagram_1.canvas;
                  if (diagramCanvas != null) {
                      select.value = (_a = diagramCanvas.category) !== null && _a !== void 0 ? _a : canvas.category.default;
                  }
              };
              update();
              diagram_1.on("change", update);
              diagram_1.on("set", function (diagramCanvas) {
                  var _a;
                  select.value = (_a = diagramCanvas.category) !== null && _a !== void 0 ? _a : canvas.category.default;
              });
              layout.state.isEnabled = category.writable;
              layout.show();
          }
          else {
              select.value = null;
              layout.hide();
          }
      };
      EEditorCanvasLegacy.prototype.newLabelCategory = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getSelectCategoryLabel()
              }
          });
      };
      EEditorCanvasLegacy.prototype.newSelectCategory = function () {
          var _this = this;
          return new wcardinalUi.DSelect({
              weight: 1,
              on: {
                  change: function (value) {
                      var diagram = _this._diagram;
                      var canvas = diagram.canvas;
                      if (canvas != null && canvas.category !== value) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentCategory(diagram, canvas, value));
                      }
                  }
              }
          });
      };
      EEditorCanvasLegacy.prototype.newLayoutSummary = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [this.newLabelSummary(), this.newInputSummary()]
          });
      };
      EEditorCanvasLegacy.prototype.newLabelSummary = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputSummaryLabel()
              }
          });
      };
      EEditorCanvasLegacy.prototype.newInputSummary = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputTextArea({
              weight: 1,
              height: 60,
              on: {
                  change: function (value) {
                      var canvas = diagram.canvas;
                      if (canvas != null && canvas.summary !== value) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentSummary(diagram, canvas, value));
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.value = canvas.summary;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.value = canvas.summary;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.newLayoutDescription = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "padding",
              height: "auto",
              children: [this.newLabelDescription(), this.newInputDescription()]
          });
      };
      EEditorCanvasLegacy.prototype.newLabelDescription = function () {
          return new wcardinalUi.DInputLabel({
              width: 60,
              text: {
                  value: this.theme.getInputDescriptionLabel()
              }
          });
      };
      EEditorCanvasLegacy.prototype.newInputDescription = function () {
          var diagram = this._diagram;
          var result = new wcardinalUi.DInputTextArea({
              weight: 1,
              height: 100,
              on: {
                  change: function (value) {
                      var canvas = diagram.canvas;
                      if (canvas != null && canvas.description !== value) {
                          wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentDescription(diagram, canvas, value));
                      }
                  }
              }
          });
          var update = function () {
              var canvas = diagram.canvas;
              if (canvas != null) {
                  result.value = canvas.description;
              }
          };
          update();
          diagram.on("change", update);
          diagram.on("set", function (canvas) {
              result.value = canvas.description;
          });
          return result;
      };
      EEditorCanvasLegacy.prototype.getType = function () {
          return "EEditorCanvasLegacy";
      };
      return EEditorCanvasLegacy;
  }(wcardinalUi.DPane));

  var FGraphicEditor = /** @class */ (function () {
      function FGraphicEditor(options) {
          var _a, _b, _c;
          // Options
          this._options = options;
          var theme = this.toTheme(options);
          this._theme = theme;
          this._margin = (_a = options.margin) !== null && _a !== void 0 ? _a : theme.getMargin();
          var piece = options.piece;
          this._isPieceEnabled = (_b = piece === null || piece === void 0 ? void 0 : piece.enable) !== null && _b !== void 0 ? _b : true;
          this._toPieceId = (_c = piece === null || piece === void 0 ? void 0 : piece.toId) !== null && _c !== void 0 ? _c : (function () { return null; });
          this._isEditable = options.editable !== false;
          this._icons = this.toIcons(theme);
          this._validation = this.toValidation(options);
          this._search = this.toSearch(options);
          this._controller = options.controller;
          this._canvas = new UtilCanvas(options.canvas);
          // Application
          this._application = new wcardinalUi.DApplication(options.application);
          // Others
          this._editorButtonGroup = null;
          this.init();
      }
      Object.defineProperty(FGraphicEditor.prototype, "application", {
          get: function () {
              return this._application;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicEditor.prototype, "controller", {
          get: function () {
              return this._controller;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.toIcons = function (theme) {
          var iconBuilder = theme.getIconBuilder();
          EShapeExtensions.merge(iconBuilder);
          EShapeExtensionFactories.merge(iconBuilder);
          var result = iconBuilder.build();
          EShapeExtensions.build(result);
          EShapeExtensionFactories.build(result);
          return result;
      };
      FGraphicEditor.prototype.toValidation = function (options) {
          var validation = options.validation;
          if (validation != null) {
              return {
                  validator: validation.validator,
                  force: validation.force === true
              };
          }
          return {
              validator: undefined,
              force: false
          };
      };
      FGraphicEditor.prototype.toSearch = function (options) {
          var search = options.search;
          if (search != null) {
              return {
                  finder: search.finder
              };
          }
          return {
              finder: undefined
          };
      };
      FGraphicEditor.prototype.init = function () {
          this.initDiagram();
          this.initHeader();
          this.initTools();
          this.initEditors();
          this.initCopyAndPaste();
          this.initShortcut();
      };
      FGraphicEditor.prototype.initDiagram = function () {
          var diagram = this.diagram;
          this.getDiagramContainer().addChild(diagram);
          wcardinalUi.DControllers.setDocumentController(diagram);
      };
      FGraphicEditor.prototype.initHeader = function () {
          var header = this.newHeader(this._options);
          if (header) {
              this.getHeaderContainer().addChild(header);
              this._header = header;
          }
      };
      FGraphicEditor.prototype.initTools = function () {
          this.getToolButtonLayoutContainer().addChild(this.newToolButtonLayout());
          // Activates the select tool and then disables all the tools.
          // Otherwise, toolShapeButtonSelect.activate() won't work
          // because toolShapeButtonSelect.state.isActionable is not true.
          this.toolShapeButtonSelect.activate();
          this.toolShapeButtonGroup.disable();
      };
      FGraphicEditor.prototype.initEditors = function () {
          this.getEditorLayoutContainer().addChild(this.newEditorLayout());
          if (!this.isEditorCanvasCompatible()) {
              this.diagram.addChild(this.editorCanvas);
          }
          // Activate the coordinate editor
          this.editorButtonCoordinate.activate();
      };
      FGraphicEditor.prototype.initCopyAndPaste = function () {
          var _this = this;
          new wcardinalUi.UtilClipboard()
              .on("copy", function (clipboardData) {
              var serialized = _this.toolShapeSelect.selection.serialize();
              if (serialized != null) {
                  clipboardData.setData("text", serialized);
              }
          })
              .on("cut", function (clipboardData) {
              var serialized = _this.toolShapeSelect.selection.serialize();
              if (serialized != null) {
                  clipboardData.setData("text", serialized);
                  _this.toolShapeSelect.selection.delete();
              }
          })
              .on("paste", function (clipboardData) {
              var serialized = clipboardData.getData("text");
              _this.toolShapeSelect.selection.deserialize(serialized);
          });
      };
      FGraphicEditor.prototype.initShortcut = function () {
          this.initShortcutShape();
          this.initShortcutTree();
      };
      FGraphicEditor.prototype.initShortcutShape = function () {
          var _this = this;
          var theme = wcardinalUi.DThemes.get("EEditorShape");
          var groupShortcut = theme.getButtonGroupShortcut();
          if (groupShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, groupShortcut, function (e) {
                  _this.toolShapeSelect.selection.group();
              });
          }
          var ungroupShortcut = theme.getButtonUngroupShortcut();
          if (ungroupShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, ungroupShortcut, function (e) {
                  _this.toolShapeSelect.selection.ungroup();
              });
          }
      };
      FGraphicEditor.prototype.initShortcutTree = function () {
          var _this = this;
          var theme = wcardinalUi.DThemes.get("EEditorTree");
          var bringToFrontShortcut = theme.getButtonBringToFrontShortcut();
          if (bringToFrontShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, bringToFrontShortcut, function (e) {
                  _this.toolShapeSelect.selection.bringToFront();
              });
          }
          var bringToForwardShortcut = theme.getButtonBringForwardShortcut();
          if (bringToForwardShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, bringToForwardShortcut, function (e) {
                  _this.toolShapeSelect.selection.bringForward();
              });
          }
          var sendBackwardShortcut = theme.getButtonSendBackwardShortcut();
          if (sendBackwardShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, sendBackwardShortcut, function (e) {
                  _this.toolShapeSelect.selection.sendBackward();
              });
          }
          var sendToBackShortcut = theme.getButtonSendToBackShortcut();
          if (sendToBackShortcut != null) {
              wcardinalUi.UtilKeyboardEvent.on(this.diagram, sendToBackShortcut, function (e) {
                  _this.toolShapeSelect.selection.sendToBack();
              });
          }
      };
      FGraphicEditor.prototype.newHeader = function (options) {
          var header = options.header;
          if (header != null) {
              var result = header(this.newToolFileButtons());
              if (result) {
                  var margin_1 = this._margin;
                  result.x = margin_1;
                  result.y = margin_1;
                  result.setWidth(function (p) { return p - 2 * margin_1; });
                  return result;
              }
          }
          return null;
      };
      FGraphicEditor.prototype.getHeaderContainer = function () {
          return this._application.stage;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonCreate", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonCreate) !== null && _a !== void 0 ? _a : (this._toolFileButtonCreate = this.newToolFileButtonCreate()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonCreate = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.new
              },
              title: theme.getToolFileButtonCreateTitle(),
              shortcut: theme.getToolFileButtonCreateShortcut(),
              theme: theme.getToolFileButtonTheme(),
              state: this._isEditable ? undefined : wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonCreateActive(emitter);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onToolFileButtonCreateActive = function (opener) {
          var _this = this;
          if (this.diagram.isChanged()) {
              this.dialogDiscard.open(opener).then(function () {
                  _this.dialogCreate.then(function (dialogCreate) {
                      dialogCreate.reset().open(opener);
                  });
              });
          }
          else {
              this.dialogCreate.then(function (dialogCreate) {
                  dialogCreate.reset().open(opener);
              });
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonOpen", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonOpen) !== null && _a !== void 0 ? _a : (this._toolFileButtonOpen = this.newToolFileButtonOpen()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonOpen = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.open
              },
              title: theme.getToolFileButtonOpenTitle(),
              shortcut: theme.getToolFileButtonOpenShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonOpenActive(emitter);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onToolFileButtonOpenActive = function (opener) {
          var _this = this;
          if (this.diagram.isChanged()) {
              this.dialogDiscard.open(opener).then(function () {
                  _this.dialogSelect.then(function (dialogSelect) {
                      dialogSelect.open(opener);
                  });
              });
          }
          else {
              this.dialogSelect.then(function (dialogSelect) {
                  dialogSelect.open(opener);
              });
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonSave", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonSave) !== null && _a !== void 0 ? _a : (this._toolFileButtonSave = this.newToolFileButtonSave()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonSave = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              image: {
                  source: this._icons.save
              },
              title: theme.getToolFileButtonSaveTitle(),
              shortcut: theme.getToolFileButtonSaveShortcut(),
              theme: theme.getToolFileButtonTheme(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      _this.onToolFileButtonSaveActive();
                  }
              }
          });
          if (this._isEditable) {
              var diagram_1 = this.diagram;
              diagram_1.on("change", function () {
                  result.state.isDisabled = !diagram_1.isChanged();
              });
          }
          return result;
      };
      FGraphicEditor.prototype.onToolFileButtonSaveActive = function () {
          this.validate().then(function () {
              wcardinalUi.DControllers.getCommandController().push(new wcardinalUi.DCommandSave());
          });
      };
      FGraphicEditor.prototype.validate = function () {
          var _this = this;
          var validation = this._validation;
          var validator = validation.validator;
          if (validator != null && validation.force) {
              var canvas = this.diagram.canvas;
              if (canvas) {
                  try {
                      var result = validator(canvas);
                      if (result != null) {
                          var dialogSaveProcessing_1 = this.dialogSaveProcessing;
                          dialogSaveProcessing_1.open(this.toolFileButtonSave);
                          if (wcardinalUi.isArray(result)) {
                              if (0 < result.length) {
                                  var editorValidation = this.editorValidation;
                                  editorValidation.list.data.clearAndAddAll(result);
                                  var editorButtonValidation = this.editorButtonValidation;
                                  if (!editorButtonValidation.state.isActive) {
                                      editorButtonValidation.activate();
                                  }
                                  dialogSaveProcessing_1.reject("validation");
                                  return Promise.reject();
                              }
                              else {
                                  return Promise.resolve();
                              }
                          }
                          else {
                              return result.then(function (results) {
                                  if (0 < results.length) {
                                      var editorValidation = _this.editorValidation;
                                      editorValidation.list.data.clearAndAddAll(results);
                                      var editorButtonValidation = _this.editorButtonValidation;
                                      if (!editorButtonValidation.state.isActive) {
                                          editorButtonValidation.activate();
                                      }
                                      dialogSaveProcessing_1.reject("validation");
                                      return Promise.reject();
                                  }
                                  else {
                                      return Promise.resolve();
                                  }
                              }, function () {
                                  dialogSaveProcessing_1.reject("validation-fail");
                                  return Promise.reject();
                              });
                          }
                      }
                  }
                  catch (_a) {
                      var dialogSaveProcessing = this.dialogSaveProcessing;
                      dialogSaveProcessing.open(this.toolFileButtonSave);
                      dialogSaveProcessing.reject("validation-fail");
                      return Promise.reject();
                  }
              }
          }
          return Promise.resolve();
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonSaveAs", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonSaveAs) !== null && _a !== void 0 ? _a : (this._toolFileButtonSaveAs = this.newToolFileButtonSaveAs()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonSaveAs = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              image: {
                  source: this._icons.save_as
              },
              title: theme.getToolFileButtonSaveAsTitle(),
              shortcut: theme.getToolFileButtonSaveAsShortcut(),
              theme: theme.getToolFileButtonTheme(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      _this.onToolFileButtonSaveAsActive();
                  }
              }
          });
          if (this._isEditable) {
              var diagram = this.diagram;
              diagram.on("set", function () {
                  result.state.isDisabled = false;
              });
              diagram.on("unset", function () {
                  result.state.isDisabled = true;
              });
          }
          return result;
      };
      FGraphicEditor.prototype.onToolFileButtonSaveAsActive = function () {
          var _this = this;
          this.validate().then(function () {
              _this.dialogSaveAs.open(_this.toolFileButtonSaveAs);
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonUpload", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonUpload) !== null && _a !== void 0 ? _a : (this._toolFileButtonUpload = this.newToolFileButtonUpload()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonUpload = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButtonFile({
              image: {
                  source: this._icons.upload
              },
              title: theme.getToolFileButtonUploadTitle(),
              shortcut: theme.getToolFileButtonUploadShortcut(),
              theme: theme.getToolFileButtonTheme(),
              as: wcardinalUi.DButtonFileAs.TEXT,
              checker: function () {
                  if (_this.diagram.isChanged()) {
                      return _this.dialogDiscard.open(result);
                  }
                  else {
                      return true;
                  }
              },
              on: {
                  open: function (data) {
                      _this.onToolFileButtonUploadOpen(data);
                  }
              }
          });
          return result;
      };
      FGraphicEditor.prototype.onToolFileButtonUploadOpen = function (data) {
          var parsed = wcardinalUi.DDiagrams.parse(data);
          if (parsed != null) {
              parsed.id = undefined;
              this.diagram.set(parsed);
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonDownload", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonDownload) !== null && _a !== void 0 ? _a : (this._toolFileButtonDownload = this.newToolFileButtonDownload()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonDownload = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              image: {
                  source: this._icons.download
              },
              title: theme.getToolFileButtonDownloadTitle(),
              shortcut: theme.getToolFileButtonDownloadShortcut(),
              theme: theme.getToolFileButtonTheme(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function () {
                      _this.onToolFileButtonDownloadActive();
                  }
              }
          });
          var diagram = this.diagram;
          diagram.on("set", function () {
              result.state.isDisabled = false;
          });
          diagram.on("unset", function () {
              result.state.isDisabled = true;
          });
          return result;
      };
      FGraphicEditor.prototype.onToolFileButtonDownloadActive = function () {
          var serialized = this.diagram.serialize();
          if (serialized != null) {
              wcardinalUi.UtilFileDownloader.download("".concat(serialized.name, ".json"), JSON.stringify(serialized));
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonUndo", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonUndo) !== null && _a !== void 0 ? _a : (this._toolFileButtonUndo = this.newToolFileButtonUndo()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonUndo = function () {
          var theme = this._theme;
          return new wcardinalUi.DButtonUndo({
              title: theme.getToolFileButtonUndoTitle(),
              shortcut: theme.getToolFileButtonUndoShortcut(),
              theme: theme.getToolFileButtonTheme(),
              image: {
                  source: this._icons.undo
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonRedo", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonRedo) !== null && _a !== void 0 ? _a : (this._toolFileButtonRedo = this.newToolFileButtonRedo()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonRedo = function () {
          var theme = this._theme;
          return new wcardinalUi.DButtonRedo({
              title: theme.getToolFileButtonRedoTitle(),
              shortcut: theme.getToolFileButtonRedoShortcut(),
              theme: theme.getToolFileButtonTheme(),
              image: {
                  source: this._icons.redo
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolFileButtonDelete", {
          get: function () {
              var _a;
              return ((_a = this._toolFileButtonDelete) !== null && _a !== void 0 ? _a : (this._toolFileButtonDelete = this.newToolFileButtonDelete()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolFileButtonDelete = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              image: {
                  source: this._icons.delete
              },
              title: theme.getToolFileButtonDeleteTitle(),
              shortcut: theme.getToolFileButtonDeleteShortcut(),
              theme: theme.getToolFileButtonTheme(),
              state: wcardinalUi.DBaseState.DISABLED,
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonDelete(emitter);
                  }
              }
          });
          if (this._isEditable) {
              var diagram = this.diagram;
              diagram.on("set", function () {
                  result.state.isDisabled = false;
              });
              diagram.on("unset", function () {
                  result.state.isDisabled = true;
              });
          }
          return result;
      };
      FGraphicEditor.prototype.onToolFileButtonDelete = function (opener) {
          this.dialogDelete.open(opener);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonGroup", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonGroup) !== null && _a !== void 0 ? _a : (this._toolShapeButtonGroup = this.newToolShapeButtonGroup()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonGroup = function () {
          var result = new wcardinalUi.DButtonGroup();
          var diagram = this.diagram;
          diagram.on("set", function () {
              result.enable();
          });
          diagram.on("unset", function () {
              result.disable();
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonSelect", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonSelect) !== null && _a !== void 0 ? _a : (this._toolShapeButtonSelect = this.newToolShapeButtonSelect()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonSelect = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              toggle: true,
              title: theme.getToolShapeButtonSelectTitle(),
              theme: theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons.select
              },
              on: {
                  active: function () {
                      _this.onToolShapeButtonSelectActive();
                  },
                  inactive: function () {
                      _this.onToolShapeButtonSelectInactive();
                  }
              }
          });
          return result;
      };
      FGraphicEditor.prototype.onToolShapeButtonSelectActive = function () {
          this.toolGroup.activate(this.toolShapeSelect);
      };
      FGraphicEditor.prototype.onToolShapeButtonSelectInactive = function () {
          this.toolGroup.deactivate(this.toolShapeSelect);
      };
      FGraphicEditor.prototype.newToolShapeButtonCreate = function (title, icon, constructor) {
          var _this = this;
          return new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              toggle: true,
              title: title,
              theme: this._theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons[icon]
              },
              on: {
                  active: function () {
                      _this.onToolShapeButtonCreateActive(constructor);
                  },
                  inactive: function () {
                      _this.onToolShapeButtonCreateInactive();
                  }
              }
          });
      };
      FGraphicEditor.prototype.onToolShapeButtonCreateActive = function (constructor) {
          var toolShapeCreate = this.toolShapeCreate;
          toolShapeCreate.shape = function () { return new constructor(); };
          this.toolGroup.activate(toolShapeCreate, constructor);
      };
      FGraphicEditor.prototype.onToolShapeButtonCreateInactive = function () {
          this.toolGroup.deactivate(this.toolShapeCreate);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonCircle", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonCircle) !== null && _a !== void 0 ? _a : (this._toolShapeButtonCircle = this.newToolShapeButtonCircle()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonCircle = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonCircleTitle(), "shape_circle", wcardinalUi.EShapeCircle);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonSemicircle", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonSemicircle) !== null && _a !== void 0 ? _a : (this._toolShapeButtonSemicircle = this.newToolShapeButtonSemicircle()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonSemicircle = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonSemicircleTitle(), "shape_semicircle", wcardinalUi.EShapeSemicircle);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonRectangle", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonRectangle) !== null && _a !== void 0 ? _a : (this._toolShapeButtonRectangle = this.newToolShapeButtonRectangle()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonRectangle = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonRectangleTitle(), "shape_rectangle", wcardinalUi.EShapeRectangle);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonRectangleRounded", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonRectangleRounded) !== null && _a !== void 0 ? _a : (this._toolShapeButtonRectangleRounded = this.newToolShapeButtonRectangleRounded()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonRectangleRounded = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonRectangleRoundedTitle(), "shape_rectangle_rounded", wcardinalUi.EShapeRectangleRounded);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonTriangle", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonTriangle) !== null && _a !== void 0 ? _a : (this._toolShapeButtonTriangle = this.newToolShapeButtonTriangle()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonTriangle = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonTriangleTitle(), "shape_triangle", wcardinalUi.EShapeTriangle);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonTriangleRounded", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonTriangleRounded) !== null && _a !== void 0 ? _a : (this._toolShapeButtonTriangleRounded = this.newToolShapeButtonTriangleRounded()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonTriangleRounded = function () {
          var theme = this._theme;
          return this.newToolShapeButtonCreate(theme.getToolShapeButtonTriangleRoundedTitle(), "shape_triangle_rounded", wcardinalUi.EShapeTriangleRounded);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonLine", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonLine) !== null && _a !== void 0 ? _a : (this._toolShapeButtonLine = this.newToolShapeButtonLine()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonLine = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              toggle: true,
              title: theme.getToolShapeButtonLineTitle(),
              theme: theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons.shape_line
              },
              on: {
                  active: function () {
                      _this.onToolShapeButtonLineActive();
                  },
                  inactive: function () {
                      _this.onToolShapeButtonLineInactive();
                  }
              }
          });
          this.toolShapeSelect.on("edit", function (shape) {
              if (shape instanceof wcardinalUi.EShapeLine) {
                  var toolShapeEditLine = _this.toolShapeEditLine;
                  toolShapeEditLine.shape = shape;
                  _this.toolGroup.activate(toolShapeEditLine);
              }
          });
          return result;
      };
      FGraphicEditor.prototype.onToolShapeButtonLineActive = function () {
          this.toolGroup.activate(this.toolShapeCreateLine);
      };
      FGraphicEditor.prototype.onToolShapeButtonLineInactive = function () {
          this.toolGroup.deactivate(this.toolShapeCreateLine);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonLineConnector", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonLineConnector) !== null && _a !== void 0 ? _a : (this._toolShapeButtonLineConnector = this.newToolShapeButtonLineConnector()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonLineConnector = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              toggle: true,
              title: theme.getToolShapeButtonLineConnectorTitle(),
              theme: theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons.shape_line_connector
              },
              on: {
                  active: function () {
                      _this.onToolShapeButtonLineConnectorActive();
                  },
                  inactive: function () {
                      _this.onToolShapeButtonLineConnectorInactive();
                  }
              }
          });
          this.toolShapeSelect.on("edit", function (shape) {
              if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                  var toolShapeEditLineConnector = _this.toolShapeEditLineConnector;
                  toolShapeEditLineConnector.shape = shape;
                  _this.toolGroup.activate(toolShapeEditLineConnector);
              }
          });
          return result;
      };
      FGraphicEditor.prototype.onToolShapeButtonLineConnectorActive = function () {
          this.toolGroup.activate(this.toolShapeCreateLineConnector);
      };
      FGraphicEditor.prototype.onToolShapeButtonLineConnectorInactive = function () {
          this.toolGroup.deactivate(this.toolShapeCreateLineConnector);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonElbowConnector", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonElbowConnector) !== null && _a !== void 0 ? _a : (this._toolShapeButtonElbowConnector = this.newToolShapeButtonElbowConnector()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonElbowConnector = function () {
          var _this = this;
          var theme = this._theme;
          var result = new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              toggle: true,
              title: theme.getToolShapeButtonElbowConnectorTitle(),
              theme: theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons.shape_elbow_connector
              },
              on: {
                  active: function () {
                      _this.onToolShapeButtonElbowConnectorActive();
                  },
                  inactive: function () {
                      _this.onToolShapeButtonElbowConnectorInactive();
                  }
              }
          });
          this.toolShapeSelect.on("edit", function (shape) {
              if (shape instanceof wcardinalUi.EShapeConnectorLine) {
                  var toolShapeEditLineConnector = _this.toolShapeEditLineConnector;
                  toolShapeEditLineConnector.shape = shape;
                  _this.toolGroup.activate(toolShapeEditLineConnector);
              }
          });
          return result;
      };
      FGraphicEditor.prototype.onToolShapeButtonElbowConnectorActive = function () {
          this.toolGroup.activate(this.toolShapeCreateElbowConnector);
      };
      FGraphicEditor.prototype.onToolShapeButtonElbowConnectorInactive = function () {
          this.toolGroup.deactivate(this.toolShapeCreateElbowConnector);
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonImage", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonImage) !== null && _a !== void 0 ? _a : (this._toolShapeButtonImage = this.newToolShapeButtonImage()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonImage = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButtonFile({
              group: this.toolShapeButtonGroup,
              title: theme.getToolShapeButtonImageTitle(),
              theme: theme.getToolShapeButtonTheme(),
              as: wcardinalUi.DButtonFileAs.DATA_URL,
              image: {
                  source: this._icons.editor_image
              },
              on: {
                  open: function (dataUrl) {
                      _this.onToolShapeButtonImageOpen(dataUrl);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onToolShapeButtonImageOpen = function (dataUrl) {
          var _this = this;
          var diagram = this.diagram;
          var layer = diagram.layer;
          var canvas = diagram.canvas;
          if (canvas != null && layer != null) {
              wcardinalUi.createImage(dataUrl).then(function (shape) {
                  shape.transform.position.set(canvas.width * 0.5, canvas.height * 0.5);
                  shape.attach(layer);
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([shape], layer, _this.toolShapeSelect.selection, true));
              });
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeButtonGraphicPiece", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeButtonGraphicPiece) !== null && _a !== void 0 ? _a : (this._toolShapeButtonGraphicPiece = this.newToolShapeButtonGraphicPiece()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeButtonGraphicPiece = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              title: theme.getToolShapeButtonGraphicPieceTitle(),
              theme: theme.getToolShapeButtonTheme(),
              image: {
                  source: this._icons.graphic_piece
              },
              on: {
                  active: function (emitter) {
                      _this.onToolShapeButtonGraphicPieceActive(emitter);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onToolShapeButtonGraphicPieceActive = function (opener) {
          this.dialogSelectPiece.then(function (dialogSelectPiece) {
              dialogSelectPiece.open(opener);
          });
      };
      FGraphicEditor.prototype.newToolShapeButtonExtensionFactory = function (factory) {
          var _this = this;
          var dialogSelect = null;
          return new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              title: this.toExtensionTitle(factory),
              theme: this._theme.getToolShapeButtonTheme(),
              image: {
                  source: factory.icon.texture
              },
              on: {
                  active: function (emitter) {
                      (dialogSelect !== null && dialogSelect !== void 0 ? dialogSelect : (dialogSelect = _this.newDialogSelectExtensionFactory(factory))).open(emitter);
                  }
              }
          });
      };
      FGraphicEditor.prototype.newToolShapeButtonExtension = function (extension) {
          var _this = this;
          var creatorOrTool = null;
          var result = new wcardinalUi.DButton({
              group: this.toolShapeButtonGroup,
              title: this.toExtensionTitle(extension),
              theme: this._theme.getToolShapeButtonTheme(),
              toggle: true,
              image: {
                  source: extension.icon.texture
              },
              on: {
                  active: function () {
                      if (creatorOrTool == null) {
                          creatorOrTool = _this.toExtensionCreatorOrTool(extension);
                      }
                      _this.onToolShapeButtonExtensionActive(creatorOrTool);
                  },
                  inactive: function () {
                      if (creatorOrTool == null) {
                          creatorOrTool = _this.toExtensionCreatorOrTool(extension);
                      }
                      _this.onToolShapeButtonExtensionInactive(creatorOrTool);
                  }
              }
          });
          if ("type" in extension) {
              var updaterCreatorOrOptions_1 = extension.updater;
              if (updaterCreatorOrOptions_1 != null) {
                  var type_1 = extension.type;
                  var updater_1 = null;
                  this.toolShapeSelect.on("edit", function (shape) {
                      if (shape.type === type_1) {
                          if (updater_1 == null) {
                              updater_1 = _this.toExtensionUpdater(updaterCreatorOrOptions_1);
                          }
                          updater_1.shape = shape;
                          _this.toolGroup.activate(updater_1);
                      }
                  });
              }
          }
          return result;
      };
      FGraphicEditor.prototype.toExtensionUpdater = function (updaterCreatorOrOptions) {
          var _this = this;
          var updaterCreator = wcardinalUi.isFunction(updaterCreatorOrOptions)
              ? updaterCreatorOrOptions
              : updaterCreatorOrOptions.tool;
          var result = updaterCreator(this.toolShapeSelect.selection, this.diagram);
          result.on("done", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          result.on("cancel", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          return result;
      };
      FGraphicEditor.prototype.toExtensionCreatorOrTool = function (extension) {
          var _this = this;
          var creator = extension.creator;
          if (wcardinalUi.isFunction(creator)) {
              return creator;
          }
          else {
              var result = creator.tool(this.toolShapeSelect.selection, this.diagram);
              result.on("done", function () {
                  _this.toolShapeButtonSelect.activate();
              });
              result.on("cancel", function () {
                  _this.toolShapeButtonSelect.activate();
              });
              return result;
          }
      };
      FGraphicEditor.prototype.onToolShapeButtonExtensionActive = function (creatorOrTool) {
          var toolGroup = this.toolGroup;
          if (wcardinalUi.isFunction(creatorOrTool)) {
              var toolShapeCreate = this.toolShapeCreate;
              toolShapeCreate.shape = creatorOrTool;
              toolGroup.activate(toolShapeCreate, creatorOrTool);
          }
          else {
              toolGroup.activate(creatorOrTool);
          }
      };
      FGraphicEditor.prototype.onToolShapeButtonExtensionInactive = function (creatorOrTool) {
          var toolGroup = this.toolGroup;
          if (wcardinalUi.isFunction(creatorOrTool)) {
              toolGroup.deactivate(this.toolShapeCreate, creatorOrTool);
          }
          else {
              toolGroup.deactivate(creatorOrTool);
          }
      };
      FGraphicEditor.prototype.toExtensionTitle = function (extension) {
          var title = extension.title;
          if (wcardinalUi.isString(title)) {
              return title;
          }
          return title.create;
      };
      FGraphicEditor.prototype.newDialogSelectExtensionFactory = function (factory) {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: factory,
              list: {
                  data: {
                      toLabel: factory.item.toLabel
                  }
              },
              on: {
                  select: function (value) {
                      _this.onDialogSelectExtensionFactorySelect(value, factory);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onDialogSelectExtensionFactorySelect = function (value, factory) {
          var _this = this;
          var diagram = this.diagram;
          var layer = diagram.layer;
          var canvas = diagram.canvas;
          if (canvas && layer) {
              factory.item.toCreator(value).then(function (creator) {
                  var shape = creator();
                  shape.transform.position.set(canvas.width * 0.5, canvas.height * 0.5);
                  shape.attach(layer);
                  wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([shape], layer, _this.toolShapeSelect.selection, true));
              });
          }
      };
      FGraphicEditor.prototype.newToolFileButtons = function () {
          return [
              this.toolFileButtonCreate,
              this.toolFileButtonOpen,
              this.toolFileButtonSave,
              this.toolFileButtonSaveAs,
              this.toolFileButtonUpload,
              this.toolFileButtonDownload,
              this.toolFileButtonUndo,
              this.toolFileButtonRedo,
              this.toolFileButtonDelete
          ];
      };
      FGraphicEditor.prototype.newToolShapeButtons = function () {
          var result = [
              this.toolShapeButtonSelect,
              this.toolShapeButtonLine,
              this.toolShapeButtonCircle,
              this.toolShapeButtonSemicircle,
              this.toolShapeButtonRectangle,
              this.toolShapeButtonRectangleRounded,
              this.toolShapeButtonTriangle,
              this.toolShapeButtonTriangleRounded,
              this.toolShapeButtonLineConnector,
              this.toolShapeButtonElbowConnector,
              this.toolShapeButtonImage
          ];
          if (this._isPieceEnabled) {
              result.push(this.toolShapeButtonGraphicPiece);
          }
          return result;
      };
      FGraphicEditor.prototype.newToolShapeButtonsExtension = function () {
          var _this = this;
          var result = [];
          EShapeExtensions.each(function (extension) {
              if ("icon" in extension) {
                  result.push(_this.newToolShapeButtonExtension(extension));
              }
          });
          EShapeExtensionFactories.each(function (factory) {
              result.push(_this.newToolShapeButtonExtensionFactory(factory));
          });
          return result;
      };
      FGraphicEditor.prototype.getToolButtonLayoutContainer = function () {
          return this._application.stage;
      };
      FGraphicEditor.prototype.newToolButtonLayout = function () {
          var margin = this._margin;
          return new wcardinalUi.DLayoutVertical({
              x: margin,
              y: this.getToolButtonLayoutY(margin),
              theme: "EButtonToolLayout",
              children: this.newToolButtons()
          });
      };
      FGraphicEditor.prototype.getToolButtonLayoutY = function (margin) {
          var header = this._header;
          if (header != null) {
              return margin + header.height + margin;
          }
          return margin;
      };
      FGraphicEditor.prototype.newToolButtons = function () {
          var toolFileButtonCreate = this._toolFileButtonCreate;
          if (toolFileButtonCreate == null || toolFileButtonCreate.parent == null) {
              return this.newToolFileButtons()
                  .concat(new wcardinalUi.DLayoutSpace({ height: 10 }))
                  .concat(this.newToolShapeButtons())
                  .concat(this.newToolShapeButtonsExtension());
          }
          else {
              return this.newToolShapeButtons().concat(this.newToolShapeButtonsExtension());
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonGroup", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonGroup) !== null && _a !== void 0 ? _a : (this._editorButtonGroup = this.newEditorButtonGroup()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonGroup = function () {
          return undefined;
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonCoordinate", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonCoordinate) !== null && _a !== void 0 ? _a : (this._editorButtonCoordinate = this.newEditorButtonCoordinate()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonCoordinate = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_coordinate
              },
              title: theme.getEditorButtonCoordinateTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorCoordinate.show();
                  },
                  inactive: function () {
                      _this.editorCoordinate.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorCoordinate", {
          get: function () {
              var _a;
              return ((_a = this._editorCoordinate) !== null && _a !== void 0 ? _a : (this._editorCoordinate = this.newEditorCoordinate()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorCoordinate = function () {
          return this.initEditor(0, new EEditorCoordinate({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons
          }));
      };
      FGraphicEditor.prototype.initEditor = function (zIndex, editor) {
          editor.zIndex = zIndex;
          editor.parent.sortChildren();
          editor.interactive = true;
          if (editor instanceof wcardinalUi.DBase) {
              editor.state.isFocusable = false;
          }
          return editor;
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonShape", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonShape) !== null && _a !== void 0 ? _a : (this._editorButtonShape = this.newEditorButtonShape()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonShape = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_shape
              },
              title: theme.getEditorButtonShapeTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorShape.show();
                  },
                  inactive: function () {
                      _this.editorShape.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorShape", {
          get: function () {
              var _a;
              return ((_a = this._editorShape) !== null && _a !== void 0 ? _a : (this._editorShape = this.newEditorShape()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorShape = function () {
          var _this = this;
          return this.initEditor(1, new EEditorShape({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              canvas: this._canvas,
              content: {
                  theme: "EEditorPaneContent"
              },
              piece: {
                  enable: this._isPieceEnabled,
                  controller: this._options.controller,
                  exclude: function () {
                      return _this._toPieceId(_this.diagram);
                  }
              },
              connector: {
                  dangling: this.isDanglingConnectorAllowed()
              }
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonText", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonText) !== null && _a !== void 0 ? _a : (this._editorButtonText = this.newEditorButtonText()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonText = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_text
              },
              title: theme.getEditorButtonTextTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorText.show();
                  },
                  inactive: function () {
                      _this.editorText.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorText", {
          get: function () {
              var _a;
              return ((_a = this._editorText) !== null && _a !== void 0 ? _a : (this._editorText = this.newEditorText()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorText = function () {
          return this.initEditor(2, new EEditorText({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              content: {
                  theme: "EEditorPaneContent"
              }
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonData", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonData) !== null && _a !== void 0 ? _a : (this._editorButtonData = this.newEditorButtonData()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonData = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_data
              },
              title: theme.getEditorButtonDataTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorData.show();
                  },
                  inactive: function () {
                      _this.editorData.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorData", {
          get: function () {
              var _a;
              return ((_a = this._editorData) !== null && _a !== void 0 ? _a : (this._editorData = this.newEditorData()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorData = function () {
          return this.initEditor(3, new EEditorData({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonDataMapping", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonDataMapping) !== null && _a !== void 0 ? _a : (this._editorButtonDataMapping = this.newEditorButtonDataMapping()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonDataMapping = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_data_mapping
              },
              title: theme.getEditorButtonDataMappingTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorDataMapping.show();
                  },
                  inactive: function () {
                      _this.editorDataMapping.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorDataMapping", {
          get: function () {
              var _a;
              return ((_a = this._editorDataMapping) !== null && _a !== void 0 ? _a : (this._editorDataMapping = this.newEditorDataMapping()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorDataMapping = function () {
          return this.initEditor(4, new EEditorDataMapping({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonAction", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonAction) !== null && _a !== void 0 ? _a : (this._editorButtonAction = this.newEditorButtonAction()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonAction = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_action
              },
              title: theme.getEditorButtonActionTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorAction.show();
                  },
                  inactive: function () {
                      _this.editorAction.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorAction", {
          get: function () {
              var _a;
              return ((_a = this._editorAction) !== null && _a !== void 0 ? _a : (this._editorAction = this.newEditorAction()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorAction = function () {
          return this.initEditor(5, new EEditorAction({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonTree", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonTree) !== null && _a !== void 0 ? _a : (this._editorButtonTree = this.newEditorButtonTree()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonTree = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_tree
              },
              title: theme.getEditorButtonTreeTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorTree.show();
                  },
                  inactive: function () {
                      _this.editorTree.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorTree", {
          get: function () {
              var _a;
              return ((_a = this._editorTree) !== null && _a !== void 0 ? _a : (this._editorTree = this.newEditorTree()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorTree = function () {
          return this.initEditor(6, new EEditorTree({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonLayer", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonLayer) !== null && _a !== void 0 ? _a : (this._editorButtonLayer = this.newEditorButtonLayer()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonLayer = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_layer
              },
              title: theme.getEditorButtonLayerTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorLayer.show();
                  },
                  inactive: function () {
                      _this.editorLayer.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorLayer", {
          get: function () {
              var _a;
              return ((_a = this._editorLayer) !== null && _a !== void 0 ? _a : (this._editorLayer = this.newEditorLayer()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorLayer = function () {
          return this.initEditor(7, new EEditorLayer({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonSnap", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonSnap) !== null && _a !== void 0 ? _a : (this._editorButtonSnap = this.newEditorButtonSnap()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonSnap = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_snap
              },
              title: theme.getEditorButtonSnapTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorSnap.show();
                  },
                  inactive: function () {
                      _this.editorSnap.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorSnap", {
          get: function () {
              var _a;
              return ((_a = this._editorSnap) !== null && _a !== void 0 ? _a : (this._editorSnap = this.newEditorSnap()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorSnap = function () {
          return this.initEditor(8, new EEditorSnap({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonValidation", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonValidation) !== null && _a !== void 0 ? _a : (this._editorButtonValidation = this.newEditorButtonValidation()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonValidation = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_validation
              },
              title: theme.getEditorButtonValidationTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorValidation.show();
                  },
                  inactive: function () {
                      _this.editorValidation.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorValidation", {
          get: function () {
              var _a;
              return ((_a = this._editorValidation) !== null && _a !== void 0 ? _a : (this._editorValidation = this.newEditorValidation()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorValidation = function () {
          return this.initEditor(9, new EEditorValidation({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram,
              validator: this._validation.validator
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonSearch", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonSearch) !== null && _a !== void 0 ? _a : (this._editorButtonSearch = this.newEditorButtonSearch()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonSearch = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_search
              },
              title: theme.getEditorButtonSearchTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorSearch.show();
                  },
                  inactive: function () {
                      _this.editorSearch.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorSearch", {
          get: function () {
              var _a;
              return ((_a = this._editorSearch) !== null && _a !== void 0 ? _a : (this._editorSearch = this.newEditorSearch()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorSearch = function () {
          return this.initEditor(9, new EEditorSearch({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              icons: this._icons,
              diagram: this.diagram,
              finder: this._search.finder,
              interval: this._search.interval
          }));
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorCanvas", {
          get: function () {
              var _a;
              return ((_a = this._editorCanvas) !== null && _a !== void 0 ? _a : (this._editorCanvas = this.newEditorCanvas()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorCanvas = function () {
          return new EEditorCanvas({
              icons: this._icons,
              diagram: this.diagram,
              canvas: this._canvas
          });
      };
      FGraphicEditor.prototype.isEditorCanvasCompatible = function () {
          var _a, _b;
          return !!((_b = (_a = this._options.compatibility) === null || _a === void 0 ? void 0 : _a.editor) === null || _b === void 0 ? void 0 : _b.canvas);
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorButtonCanvasLegacy", {
          get: function () {
              var _a;
              return ((_a = this._editorButtonCanvasLegacy) !== null && _a !== void 0 ? _a : (this._editorButtonCanvasLegacy = this.newEditorButtonCanvasLegacy()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorButtonCanvasLegacy = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: this._icons.editor_canvas_legacy
              },
              title: theme.getEditorButtonCanvasLegacyTitle(),
              theme: theme.getEditorButtonTheme(),
              on: {
                  active: function () {
                      _this.editorCanvasLegacy.show();
                  },
                  inactive: function () {
                      _this.editorCanvasLegacy.hide();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorCanvasLegacy", {
          get: function () {
              var _a;
              return ((_a = this._editorCanvasLegacy) !== null && _a !== void 0 ? _a : (this._editorCanvasLegacy = this.newEditorCanvasLegacy()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorCanvasLegacy = function () {
          return this.initEditor(10, new EEditorCanvasLegacy({
              parent: this.editorContainer,
              diagram: this.diagram,
              canvas: this._canvas,
              content: {
                  theme: "EEditorPaneContent"
              }
          }));
      };
      FGraphicEditor.prototype.newEditorButtonExtension = function (extension, editor) {
          var _this = this;
          var editorInstance = null;
          var result = new wcardinalUi.DButton({
              group: this.editorButtonGroup,
              toggle: true,
              image: {
                  source: extension.icon.texture
              },
              title: editor.title,
              theme: this._theme.getEditorButtonTheme(),
              visible: false,
              on: {
                  active: function () {
                      editorInstance !== null && editorInstance !== void 0 ? editorInstance : (editorInstance = _this.newEditorExtension(editor));
                      editorInstance.show();
                  },
                  inactive: function () {
                      if (editorInstance) {
                          editorInstance.hide();
                      }
                  }
              }
          });
          var selection = this.toolShapeSelect.selection;
          selection.on("change", function () {
              _this.onEditorButtonExtensionSelectionChange(result, extension.type);
          });
          return result;
      };
      FGraphicEditor.prototype.newEditorExtension = function (editor) {
          return this.initEditor(11, new editor.constructor({
              parent: this.editorContainer,
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram,
              icons: this._icons,
              content: {
                  theme: "EEditorPaneContent"
              },
              theme: editor.theme
          }));
      };
      FGraphicEditor.prototype.onEditorButtonExtensionSelectionChange = function (button, extensionType) {
          var selection = this.toolShapeSelect.selection;
          var last = selection.last();
          var buttonLast = this._editorButtonExtensionLast;
          if (last != null && last.type === extensionType && buttonLast !== button) {
              var wasActive = false;
              if (buttonLast != null) {
                  buttonLast.hide();
                  if (buttonLast.state.isActive) {
                      buttonLast.activate();
                      wasActive = true;
                  }
              }
              button.show();
              this._editorButtonExtensionLast = button;
              if (wasActive && !button.state.isActive) {
                  button.activate();
              }
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "viewButtonZoomOut", {
          get: function () {
              var _a;
              return ((_a = this._viewButtonZoomOut) !== null && _a !== void 0 ? _a : (this._viewButtonZoomOut = this.newViewButtonZoomOut()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newViewButtonZoomOut = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_out
              },
              title: theme.getViewButtonZoomOutTitle(),
              shortcut: theme.getViewButtonZoomOutShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomOut();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "viewButtonZoomIn", {
          get: function () {
              var _a;
              return ((_a = this._viewButtonZoomIn) !== null && _a !== void 0 ? _a : (this._viewButtonZoomIn = this.newViewButtonZoomIn()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newViewButtonZoomIn = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_in
              },
              title: theme.getViewButtonZoomInTitle(),
              shortcut: theme.getViewButtonZoomInShortcut(),
              shortcuts: theme.getViewButtonZoomInShortcuts(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomIn();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "viewButtonDragAndPinch", {
          get: function () {
              var _a;
              return ((_a = this._viewButtonDragAndPinch) !== null && _a !== void 0 ? _a : (this._viewButtonDragAndPinch = this.newViewButtonDragAndPinch()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newViewButtonDragAndPinch = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.camera
              },
              toggle: true,
              title: theme.getViewButtonDragAndPinchTitle(),
              shortcut: theme.getViewButtonDragAndPinchShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.toolGroup.suspend();
                  },
                  inactive: function () {
                      _this.toolGroup.resume();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "viewButtonReset", {
          get: function () {
              var _a;
              return ((_a = this._viewButtonReset) !== null && _a !== void 0 ? _a : (this._viewButtonReset = this.newViewButtonReset()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newViewButtonReset = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_reset
              },
              title: theme.getViewButtonResetTitle(),
              shortcut: theme.getViewButtonResetShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.reset();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "viewButtonFit", {
          get: function () {
              var _a;
              return ((_a = this._viewButtonFit) !== null && _a !== void 0 ? _a : (this._viewButtonFit = this.newViewButtonFit()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newViewButtonFit = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_fit
              },
              title: theme.getViewButtonFitTitle(),
              shortcut: theme.getViewButtonFitShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.fit();
                  }
              }
          });
      };
      FGraphicEditor.prototype.newEditorButtons = function () {
          var _this = this;
          var result = [
              this.editorButtonCoordinate,
              this.editorButtonShape,
              this.editorButtonText,
              this.editorButtonData,
              this.editorButtonDataMapping,
              this.editorButtonAction,
              this.editorButtonTree,
              this.editorButtonLayer,
              this.editorButtonSnap
          ];
          if (this._validation.validator != null) {
              result.push(this.editorButtonValidation);
          }
          result.push(this.editorButtonSearch);
          if (this.isEditorCanvasCompatible()) {
              result.push(this.editorButtonCanvasLegacy);
          }
          EShapeExtensions.each(function (extension) {
              if ("editor" in extension) {
                  var editor = _this.toEditorExtentionConstructorOptions(extension);
                  if (editor) {
                      result.push(_this.newEditorButtonExtension(extension, editor));
                  }
              }
          });
          result.push(new wcardinalUi.DLayoutSpace({
              weight: 1
          }), this.viewButtonZoomOut, this.viewButtonZoomIn, this.viewButtonDragAndPinch, this.viewButtonReset, this.viewButtonFit);
          return result;
      };
      FGraphicEditor.prototype.toEditorExtentionConstructorOptions = function (extension) {
          var _a, _b;
          var editor = extension.editor;
          if (wcardinalUi.isFunction(editor)) {
              return {
                  constructor: editor,
                  title: extension.name || "",
                  theme: "EEditorPane"
              };
          }
          else if (editor.constructor) {
              return {
                  constructor: editor.constructor,
                  title: (_a = editor.title) !== null && _a !== void 0 ? _a : (extension.name || ""),
                  theme: (_b = editor.theme) !== null && _b !== void 0 ? _b : "EEditorPane"
              };
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "editorContainer", {
          get: function () {
              var _a;
              return ((_a = this._editorContainer) !== null && _a !== void 0 ? _a : (this._editorContainer = this.newEditorContainer()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newEditorContainer = function () {
          return new wcardinalUi.DLayoutHorizontal({
              width: "auto",
              height: "padding"
          });
      };
      FGraphicEditor.prototype.getEditorLayoutContainer = function () {
          return this._application.stage;
      };
      FGraphicEditor.prototype.newEditorLayout = function () {
          var _this = this;
          var margin = this._margin;
          var y = this.getToolButtonLayoutY(margin);
          return new wcardinalUi.DLayoutHorizontal({
              x: function (p, s) { return p - s - margin; },
              y: y,
              width: "auto",
              height: function (p) { return p - y - margin; },
              theme: "EEditorLayout",
              children: [this.editorContainer, this.newEditorButtonLayout()],
              on: {
                  resize: function (width, height) {
                      _this.onEditorLayoutResized(width, height);
                  }
              }
          });
      };
      FGraphicEditor.prototype.newEditorButtonLayout = function () {
          return new wcardinalUi.DLayoutVertical({
              theme: "EEditorButtonLayout",
              children: this.newEditorButtons()
          });
      };
      FGraphicEditor.prototype.onEditorLayoutResized = function (width, height) {
          // The tool layout width is `margin + 65`.
          // The editor layout width is `width`.
          // Therefore here shifts the diagram `(margin + 65 - width) * 0.5` along the X axis.
          var diagram = this.diagram;
          var theme = diagram.theme;
          var padding = diagram.padding;
          var margin = this._margin;
          var os = padding.getLeft() - padding.getRight();
          padding.left = theme.getPaddingLeft() + margin + 65;
          padding.right = theme.getPaddingRight() + margin + width;
          var canvas = diagram.canvas;
          if (canvas != null) {
              var ns = padding.getLeft() - padding.getRight();
              canvas.position.x += (ns - os) * 0.5;
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeSelect", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeSelect) !== null && _a !== void 0 ? _a : (this._toolShapeSelect = this.newToolShapeSelect()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeSelect = function () {
          var diagram = this.diagram;
          var result = new EToolSelect({ diagram: diagram });
          diagram.on("set", function () {
              result.selection.clear();
          });
          diagram.on("unset", function () {
              result.selection.clear();
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeCreate", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeCreate) !== null && _a !== void 0 ? _a : (this._toolShapeCreate = this.newToolShapeCreate()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeCreate = function () {
          var _this = this;
          var result = new EToolShapeCreate(this.toolShapeSelect.selection, this.diagram);
          result.on("done", function () {
              _this.toolShapeButtonSelect.activate();
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeCreateLine", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeCreateLine) !== null && _a !== void 0 ? _a : (this._toolShapeCreateLine = this.newToolShapeCreateLine()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeCreateLine = function () {
          var _this = this;
          var result = new EToolShapeCreateLine({
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram
          });
          result.on("done", function () {
              _this.toolShapeButtonSelect.activate();
          });
          result.on("cancel", function () {
              _this.toolShapeButtonSelect.activate();
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeCreateLineConnector", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeCreateLineConnector) !== null && _a !== void 0 ? _a : (this._toolShapeCreateLineConnector = this.newToolShapeCreateLineConnector()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeCreateLineConnector = function () {
          var _this = this;
          var result = new EToolShapeCreateLineConnector({
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram,
              dangling: this.isDanglingConnectorAllowed()
          });
          result.on("done", function () {
              _this.toolShapeButtonSelect.activate();
          });
          result.on("cancel", function () {
              _this.toolShapeButtonSelect.activate();
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeCreateElbowConnector", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeCreateElbowConnector) !== null && _a !== void 0 ? _a : (this._toolShapeCreateElbowConnector = this.newToolShapeCreateElbowConnector()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeCreateElbowConnector = function () {
          var _this = this;
          var result = new EToolShapeCreateElbowConnector({
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram,
              dangling: this.isDanglingConnectorAllowed()
          });
          result.on("done", function () {
              _this.toolShapeButtonSelect.activate();
          });
          result.on("cancel", function () {
              _this.toolShapeButtonSelect.activate();
          });
          return result;
      };
      FGraphicEditor.prototype.isDanglingConnectorAllowed = function () {
          var _a;
          return (_a = this._options.connector) === null || _a === void 0 ? void 0 : _a.dangling;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeEditLine", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeEditLine) !== null && _a !== void 0 ? _a : (this._toolShapeEditLine = this.newToolShapeEditLine()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeEditLine = function () {
          var _this = this;
          var result = new EToolShapeEditLine({
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram
          });
          result.on("done", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          result.on("cancel", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolShapeEditLineConnector", {
          get: function () {
              var _a;
              return ((_a = this._toolShapeEditLineConnector) !== null && _a !== void 0 ? _a : (this._toolShapeEditLineConnector = this.newToolShapeEditLineConnector()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolShapeEditLineConnector = function () {
          var _this = this;
          var result = new EToolShapeEditLineConnector({
              selection: this.toolShapeSelect.selection,
              diagram: this.diagram,
              dangling: this.isDanglingConnectorAllowed()
          });
          result.on("done", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          result.on("cancel", function () {
              _this.toolGroup.activate(_this.toolShapeSelect);
          });
          return result;
      };
      Object.defineProperty(FGraphicEditor.prototype, "toolGroup", {
          get: function () {
              var _a;
              return ((_a = this._toolGroup) !== null && _a !== void 0 ? _a : (this._toolGroup = this.newToolGroup()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newToolGroup = function () {
          return new EToolGroupImpl();
      };
      Object.defineProperty(FGraphicEditor.prototype, "diagram", {
          get: function () {
              var _a;
              return ((_a = this._diagram) !== null && _a !== void 0 ? _a : (this._diagram = this.newDiagram()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDiagram = function () {
          return new wcardinalUi.DDiagramEditor(this.toDiagramOptions(this._options));
      };
      FGraphicEditor.prototype.getDiagramContainer = function () {
          return this._application.stage;
      };
      FGraphicEditor.prototype.toDiagramOptions = function (options) {
          var _this = this;
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
          var result = options.diagram || {};
          // Controller
          (_a = result.controller) !== null && _a !== void 0 ? _a : (result.controller = this._controller.graphic);
          // Coordinate
          (_b = result.x) !== null && _b !== void 0 ? _b : (result.x = 0);
          (_c = result.y) !== null && _c !== void 0 ? _c : (result.y = 0);
          (_d = result.width) !== null && _d !== void 0 ? _d : (result.width = "100%");
          (_e = result.height) !== null && _e !== void 0 ? _e : (result.height = "100%");
          // Outline
          var outline = ((_f = result.outline) !== null && _f !== void 0 ? _f : (result.outline = {}));
          (_g = outline.color) !== null && _g !== void 0 ? _g : (outline.color = null);
          // View settings
          var view = ((_h = result.view) !== null && _h !== void 0 ? _h : (result.view = {}));
          var gesture = ((_j = view.gesture) !== null && _j !== void 0 ? _j : (view.gesture = {}));
          (_k = gesture.modifier) !== null && _k !== void 0 ? _k : (gesture.modifier = wcardinalUi.UtilGestureModifier.ALT);
          var checker = ((_l = gesture.checker) !== null && _l !== void 0 ? _l : (gesture.checker = {}));
          (_m = checker.start) !== null && _m !== void 0 ? _m : (checker.start = function (e, modifier) {
              return wcardinalUi.UtilGestureModifiers.match(e, modifier) || _this.toolGroup.isSuspended();
          });
          (_o = checker.move) !== null && _o !== void 0 ? _o : (checker.move = function (e, modifier) {
              return wcardinalUi.UtilGestureModifiers.match(e, modifier) || _this.diagram.state.isGesturing;
          });
          var zoom = ((_p = view.zoom) !== null && _p !== void 0 ? _p : (view.zoom = {}));
          var dblclick = ((_q = zoom.dblclick) !== null && _q !== void 0 ? _q : (zoom.dblclick = {}));
          (_r = dblclick.checker) !== null && _r !== void 0 ? _r : (dblclick.checker = function (e, modifier) {
              return _this.toolGroup.isSuspended();
          });
          var viewOn = ((_s = view.on) !== null && _s !== void 0 ? _s : (view.on = {}));
          (_t = viewOn.gesturestart) !== null && _t !== void 0 ? _t : (viewOn.gesturestart = function () {
              _this.onDiagramViewOnStart();
          });
          (_u = viewOn.transformstart) !== null && _u !== void 0 ? _u : (viewOn.transformstart = function () {
              _this.onDiagramViewOnStart();
          });
          (_v = viewOn.wheeltranslationstart) !== null && _v !== void 0 ? _v : (viewOn.wheeltranslationstart = function () {
              _this.onDiagramViewOnStart();
          });
          (_w = view.constraint) !== null && _w !== void 0 ? _w : (view.constraint = function (target, x, y, scaleX, scaleY) {
              _this.onDiagramViewConstraint(target, x, y, scaleX, scaleY);
          });
          // Thumbnail settings
          var thumbnail = result.thumbnail;
          if (thumbnail === null || thumbnail === void 0 ? void 0 : thumbnail.enable) {
              (_x = thumbnail.size) !== null && _x !== void 0 ? _x : (thumbnail.size = getDialogSelectThumbnailSize() * 2);
          }
          // Event settings
          var on = ((_y = result.on) !== null && _y !== void 0 ? _y : (result.on = {}));
          (_z = on.saving) !== null && _z !== void 0 ? _z : (on.saving = function () {
              _this.onDiagramSaving(_this._toolFileButtonSave);
          });
          (_0 = on.saved) !== null && _0 !== void 0 ? _0 : (on.saved = function (reason) {
              _this.onDiagramSaved(reason, _this._toolFileButtonSave);
          });
          (_1 = on.deleting) !== null && _1 !== void 0 ? _1 : (on.deleting = function () {
              _this.onDiagramDeleting(_this._toolFileButtonDelete);
          });
          (_2 = on.deleted) !== null && _2 !== void 0 ? _2 : (on.deleted = function (reason) {
              _this.onDiagramDeleted(reason, _this._toolFileButtonDelete);
          });
          // Snapshot event settings
          var snapshot = ((_3 = result.snapshot) !== null && _3 !== void 0 ? _3 : (result.snapshot = {}));
          var snapshotOn = ((_4 = snapshot.on) !== null && _4 !== void 0 ? _4 : (snapshot.on = {}));
          (_5 = snapshotOn.taking) !== null && _5 !== void 0 ? _5 : (snapshotOn.taking = function () {
              _this.onDiagramSnapshotTaking();
          });
          (_6 = snapshotOn.took) !== null && _6 !== void 0 ? _6 : (snapshotOn.took = function () {
              _this.onDiagramSnapshotTook();
          });
          // Done
          return result;
      };
      FGraphicEditor.prototype.onDiagramViewOnStart = function () {
          var _a, _b;
          var diagram = this._diagram;
          if (diagram != null) {
              var d = ((_a = this._localBoundsDiagram) !== null && _a !== void 0 ? _a : (this._localBoundsDiagram = new pixi_js.Rectangle()));
              var p = diagram.padding;
              var l = p.getLeft() - 65 - this._margin;
              var t = p.getTop();
              var r = diagram.width - p.getRight();
              var b = diagram.height - p.getBottom();
              d.x = l;
              d.y = t;
              d.width = Math.max(0, r - l);
              d.height = Math.max(0, b - t);
              var canvas = diagram.canvas;
              if (canvas != null) {
                  var c = ((_b = this._localBoundsCanvas) !== null && _b !== void 0 ? _b : (this._localBoundsCanvas = new pixi_js.Rectangle()));
                  canvas.getLocalBounds(c);
              }
          }
      };
      FGraphicEditor.prototype.onDiagramViewConstraint = function (target, x, y, sx, sy) {
          var d = this._localBoundsDiagram;
          var c = this._localBoundsCanvas;
          if (d != null && c != null) {
              target.position.set(Math.max(d.x - (c.x + c.width) * sx, Math.min(d.x + d.width - c.x * sx, x)), Math.max(d.y - (c.y + c.height) * sy, Math.min(d.y + d.height - c.y * sy, y)));
              target.scale.set(sx, sy);
          }
      };
      FGraphicEditor.prototype.onDiagramSaving = function (opener) {
          this.dialogSaveProcessing.open(opener);
      };
      FGraphicEditor.prototype.onDiagramSaved = function (reason, opener) {
          var _this = this;
          var dialogSaveProcessing = this.dialogSaveProcessing;
          if (reason == null) {
              dialogSaveProcessing.resolve();
          }
          else {
              if (reason === "duplication") {
                  dialogSaveProcessing.once("close", function () {
                      _this.dialogSaveAs.open(opener);
                  });
              }
              dialogSaveProcessing.reject(reason);
          }
      };
      FGraphicEditor.prototype.onDiagramDeleting = function (opener) {
          this.dialogDeleteProcessing.open(opener);
      };
      FGraphicEditor.prototype.onDiagramDeleted = function (reason, opener) {
          var dialogDeleteProcessing = this.dialogDeleteProcessing;
          if (reason == null) {
              dialogDeleteProcessing.resolve();
          }
          else {
              dialogDeleteProcessing.reject(reason);
          }
      };
      FGraphicEditor.prototype.onDiagramSnapshotTaking = function () {
          this.toolShapeSelect.selection.modifier.renderable = false;
      };
      FGraphicEditor.prototype.onDiagramSnapshotTook = function () {
          this.toolShapeSelect.selection.modifier.renderable = true;
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogSaveProcessing", {
          get: function () {
              var _a;
              return ((_a = this._dialogSaveProcessing) !== null && _a !== void 0 ? _a : (this._dialogSaveProcessing = this.newDialogSaveProcessing()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogSaveProcessing = function () {
          return new EDialogProcessing();
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogDeleteProcessing", {
          get: function () {
              var _a;
              return ((_a = this._dialogDeleteProcessing) !== null && _a !== void 0 ? _a : (this._dialogDeleteProcessing = this.newDialogDeleteProcessing()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogDeleteProcessing = function () {
          return new EDialogProcessing();
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogSaveAs", {
          get: function () {
              var _a;
              return ((_a = this._dialogSaveAs) !== null && _a !== void 0 ? _a : (this._dialogSaveAs = this.newDialogSaveAs()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogSaveAs = function () {
          return new wcardinalUi.DDialogSaveAs();
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogCreate", {
          get: function () {
              var _a;
              return ((_a = this._dialogCreate) !== null && _a !== void 0 ? _a : (this._dialogCreate = this.newDialogCreate()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogCreate = function () {
          var _this = this;
          return this._canvas.get().then(function (canvas) {
              return new EDialogCanvas({
                  canvas: canvas,
                  on: {
                      ok: function (value, emitter) {
                          _this.onDialogCreateOk(value, emitter);
                      }
                  }
              });
          });
      };
      FGraphicEditor.prototype.onDialogCreateOk = function (value, opener) {
          var _this = this;
          this.diagram.create(value).then(function (canvas) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentCreate(_this.diagram, canvas));
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogDiscard", {
          get: function () {
              var _a;
              return ((_a = this._dialogDiscard) !== null && _a !== void 0 ? _a : (this._dialogDiscard = this.newDialogDiscard()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogDiscard = function () {
          return new wcardinalUi.DDialogConfirmDiscard();
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogSelect", {
          get: function () {
              var _a;
              return ((_a = this._dialogSelect) !== null && _a !== void 0 ? _a : (this._dialogSelect = this.newDialogSelect()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogSelect = function () {
          var _this = this;
          return this._canvas.get().then(function (canvas) {
              var _a, _b;
              if ((_b = (_a = _this._options.diagram) === null || _a === void 0 ? void 0 : _a.thumbnail) === null || _b === void 0 ? void 0 : _b.enable) {
                  var result = _this.newDialogSelectImage();
                  result.categories = canvas.category.items;
                  return result;
              }
              else {
                  var result = _this.newDialogSelectNoImage();
                  result.categories = canvas.category.items;
                  return result;
              }
          });
      };
      FGraphicEditor.prototype.newDialogSelectNoImage = function () {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: this._controller.graphic,
              on: {
                  select: function (value) {
                      _this.onDialogSelectSelect(value);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onDialogSelectSelect = function (value) {
          var _this = this;
          this.diagram.open(value.id).then(function (canvas) {
              wcardinalUi.DControllers.getCommandController().push(new ECommandDocumentOpen(_this.diagram, canvas));
          });
      };
      FGraphicEditor.prototype.newDialogSelectImage = function () {
          var _this = this;
          return newDialogSelectWithThumbnails(this._options.controller.graphic, this._controller.toThumbnail, function (value) {
              _this.onDialogSelectSelect(value);
          });
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogSelectPiece", {
          get: function () {
              var _a;
              return ((_a = this._dialogSelectPiece) !== null && _a !== void 0 ? _a : (this._dialogSelectPiece = this.newDialogSelectPiece()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogSelectPiece = function () {
          var _this = this;
          return this._canvas.get().then(function (canvas) {
              var _a, _b;
              if ((_b = (_a = _this._options.diagram) === null || _a === void 0 ? void 0 : _a.thumbnail) === null || _b === void 0 ? void 0 : _b.enable) {
                  var result = _this.newDialogSelectPieceImage();
                  result.categories = canvas.category.items;
                  return result;
              }
              else {
                  var result = _this.newDialogSelectPieceNoImage();
                  result.categories = canvas.category.items;
                  return result;
              }
          });
      };
      FGraphicEditor.prototype.newDialogSelectPieceNoImage = function () {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: this.newDialogSelectPieceController(),
              on: {
                  select: function (value) {
                      _this.onDialogSelectPieceSelect(value);
                  }
              }
          });
      };
      FGraphicEditor.prototype.newDialogSelectPieceImage = function () {
          var _this = this;
          return newDialogSelectWithThumbnails(this.newDialogSelectPieceController(), this._options.controller.toPieceThumbnail, function (value) {
              _this.onDialogSelectPieceSelect(value);
          });
      };
      FGraphicEditor.prototype.newDialogSelectPieceController = function () {
          var _this = this;
          var graphicPiece = this._options.controller.graphic.piece;
          return {
              search: function (word, categoryId) {
                  if (categoryId === undefined) {
                      return graphicPiece.search(word).then(function (pieces) {
                          return _this.toDialogSelectPieceResult(pieces);
                      });
                  }
                  else {
                      return graphicPiece.search(word, categoryId).then(function (pieces) {
                          return _this.toDialogSelectPieceResult(pieces);
                      });
                  }
              }
          };
      };
      FGraphicEditor.prototype.toDialogSelectPieceResult = function (targets) {
          var pieceId = this._toPieceId(this.diagram);
          if (pieceId == null) {
              return targets;
          }
          var result = [];
          for (var i = 0, imax = targets.length; i < imax; ++i) {
              var target = targets[i];
              if (target.id !== pieceId) {
                  result.push(target);
              }
          }
          return result;
      };
      FGraphicEditor.prototype.onDialogSelectPieceSelect = function (value) {
          var _this = this;
          var diagram = this.diagram;
          var layer = diagram.layer;
          var canvas = diagram.canvas;
          if (canvas && layer) {
              var graphic_1 = this._options.controller.graphic;
              graphic_1.piece.get(value.id).then(function (serialized) {
                  wcardinalUi.EShapeEmbeddeds.from(serialized, graphic_1, wcardinalUi.EShapeResourceManagerDeserializationMode.EDITOR).then(function (shape) {
                      shape.transform.position.set(canvas.width * 0.5, canvas.height * 0.5);
                      shape.attach(layer);
                      wcardinalUi.DControllers.getCommandController().push(new ECommandShapeCreate([shape], layer, _this.toolShapeSelect.selection, true));
                  });
              });
          }
      };
      Object.defineProperty(FGraphicEditor.prototype, "dialogDelete", {
          get: function () {
              var _a;
              return ((_a = this._dialogDelete) !== null && _a !== void 0 ? _a : (this._dialogDelete = this.newDialogDelete()));
          },
          enumerable: false,
          configurable: true
      });
      FGraphicEditor.prototype.newDialogDelete = function () {
          var _this = this;
          return new wcardinalUi.DDialogConfirmDelete({
              on: {
                  ok: function (value, emitter) {
                      _this.onDialogDeleteOk(emitter);
                  }
              }
          });
      };
      FGraphicEditor.prototype.onDialogDeleteOk = function (opener) {
          this.diagram.delete().then(function () {
              wcardinalUi.DControllers.getCommandController().clear();
          });
      };
      FGraphicEditor.prototype.toTheme = function (options) {
          var theme = options === null || options === void 0 ? void 0 : options.theme;
          if (theme) {
              if (wcardinalUi.isString(theme)) {
                  return wcardinalUi.DThemes.getInstance().get(theme);
              }
              return theme;
          }
          return this.getThemeDefault();
      };
      FGraphicEditor.prototype.getThemeDefault = function () {
          return wcardinalUi.DThemes.getInstance().get(this.getType());
      };
      FGraphicEditor.prototype.getType = function () {
          return "FGraphicEditor";
      };
      return FGraphicEditor;
  }());

  var FGraphicTester = /** @class */ (function () {
      function FGraphicTester(options) {
          var _this = this;
          var _a, _b;
          this._options = options;
          var theme = this.toTheme(options);
          this._theme = theme;
          this._controller = options.controller;
          this._category = new UtilCanvasCategory((_a = options.canvas) === null || _a === void 0 ? void 0 : _a.category);
          this._icons = theme.getIconBuilder().build();
          var margin = (_b = options.margin) !== null && _b !== void 0 ? _b : theme.getMargin();
          this._margin = margin;
          this._isEditable = options.editable !== false;
          this._isChanged = false;
          this._onDiagramMoveBound = function (e) {
              _this.onDiagramMove(e);
          };
          this._onDiagramUpBound = function (e) {
              _this.onDiagramUp(e);
          };
          this._onDiagramDownPoint = new pixi_js.Point();
          this._onDiagramMovePoint = new pixi_js.Point();
          this._selectAreaRect = new pixi_js.Rectangle();
          this._selectMode = 0 /* EToolSelectMode.NONE */;
          this._childSelectTime = 0;
          this._childSelectChild = null;
          this._isSelectSuspended = false;
          this._expressionMap = new Map();
          this._appliedValues = new Map();
          this._isMappingsDirty = false;
          // Application
          var application = new wcardinalUi.DApplication(options.application);
          this._application = application;
          // Panes
          application.stage.addChild(this.newPanes(options));
          this.onChange();
          var onMappingsChangeBound = function () {
              if (_this._isMappingsDirty) {
                  _this._isMappingsDirty = false;
                  _this.onMappingsChange();
              }
              setTimeout(onMappingsChangeBound, 100);
          };
          onMappingsChangeBound();
      }
      Object.defineProperty(FGraphicTester.prototype, "application", {
          get: function () {
              return this._application;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "controller", {
          get: function () {
              return this._controller;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newHeader = function (options) {
          var header = options.header;
          if (header) {
              var result = header();
              if (result) {
                  var margin = this._margin;
                  result.x = margin;
                  result.y = margin;
                  result.setWidth(function (p) { return p; });
                  return result;
              }
          }
          return null;
      };
      FGraphicTester.prototype.newPanes = function (options) {
          var margin = this._margin;
          return new wcardinalUi.DLayoutVertical({
              x: margin,
              y: margin,
              width: function (p) { return p - 2 * margin; },
              height: function (p) { return p - 2 * margin; },
              margin: margin,
              children: [
                  this.newHeader(options),
                  new wcardinalUi.DLayoutHorizontal({
                      weight: 1,
                      width: "padding",
                      margin: this._margin * 0.5,
                      children: [this.leftPane, this.rightPane]
                  })
              ]
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "leftPane", {
          get: function () {
              var result = this._paneLeft;
              if (result == null) {
                  result = this.newLeftPane();
                  this._paneLeft = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newLeftPane = function () {
          return new wcardinalUi.DBoard({
              weight: 1,
              height: "padding",
              shadow: "WEAK",
              children: [this.diagram, this.toolFileButtonGraphicOpen, this.layoutViewButton]
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonGraphicOpen", {
          get: function () {
              var result = this._toolFileButtonGraphicOpen;
              if (result == null) {
                  result = this.newToolFileButtonGraphicOpen();
                  this._toolFileButtonGraphicOpen = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonGraphicOpen = function () {
          var _this = this;
          var theme = this._theme;
          var margin = this._margin * 0.5;
          return new wcardinalUi.DButton({
              x: margin,
              y: margin,
              image: {
                  source: this._icons.open
              },
              title: theme.getToolFileButtonGraphicOpenTitle(),
              shortcut: theme.getToolFileButtonGraphicOpenShortcut(),
              theme: theme.getToolFileButtonGraphicTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonGraphicOpenActive(emitter);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonGraphicOpenActive = function (opener) {
          var _this = this;
          if (this.isChanged) {
              this.dialogDiscard.open(opener).then(function () {
                  _this.dialogSelectGraphic.then(function (dialogSelectGraphic) {
                      dialogSelectGraphic.open(opener);
                  });
              });
          }
          else {
              this.dialogSelectGraphic.then(function (dialogSelectGraphic) {
                  dialogSelectGraphic.open(opener);
              });
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "layoutViewButton", {
          get: function () {
              var result = this._layoutViewButton;
              if (result == null) {
                  result = this.newLayoutViewButton();
                  this._layoutViewButton = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newLayoutViewButton = function () {
          var margin = this._margin * 0.5;
          var position = function (p, s) { return p - s - margin; };
          return new wcardinalUi.DLayoutHorizontal({
              x: position,
              y: position,
              width: "auto",
              height: "auto",
              margin: 0,
              padding: 0,
              children: this.newViewButtons()
          });
      };
      FGraphicTester.prototype.newViewButtons = function () {
          return [
              this.viewButtonZoomOut,
              this.viewButtonZoomIn,
              this.viewButtonDragAndPinch,
              this.viewButtonReset,
              this.viewButtonFit
          ];
      };
      Object.defineProperty(FGraphicTester.prototype, "viewButtonZoomOut", {
          get: function () {
              var result = this._viewButtonZoomOut;
              if (result == null) {
                  result = this.newViewButtonZoomOut();
                  this._viewButtonZoomOut = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newViewButtonZoomOut = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_out
              },
              title: theme.getViewButtonZoomOutTitle(),
              shortcut: theme.getViewButtonZoomOutShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomOut();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "viewButtonZoomIn", {
          get: function () {
              var result = this._viewButtonZoomIn;
              if (result == null) {
                  result = this.newViewButtonZoomIn();
                  this._viewButtonZoomIn = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newViewButtonZoomIn = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_in
              },
              title: theme.getViewButtonZoomInTitle(),
              shortcut: theme.getViewButtonZoomInShortcut(),
              shortcuts: theme.getViewButtonZoomInShortcuts(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomIn();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "viewButtonReset", {
          get: function () {
              var result = this._viewButtonReset;
              if (result == null) {
                  result = this.newViewButtonReset();
                  this._viewButtonReset = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newViewButtonReset = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_reset
              },
              title: theme.getViewButtonResetTitle(),
              shortcut: theme.getViewButtonResetShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.reset();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "viewButtonDragAndPinch", {
          get: function () {
              var result = this._viewButtonDragAndPinch;
              if (result == null) {
                  result = this.newViewButtonDragAndPinch();
                  this._viewButtonDragAndPinch = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newViewButtonDragAndPinch = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.camera
              },
              toggle: true,
              title: theme.getViewButtonDragAndPinchTitle(),
              shortcut: theme.getViewButtonDragAndPinchShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this._isSelectSuspended = true;
                  },
                  inactive: function () {
                      _this._isSelectSuspended = false;
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "viewButtonFit", {
          get: function () {
              var result = this._viewButtonFit;
              if (result == null) {
                  result = this.newViewButtonFit();
                  this._viewButtonFit = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newViewButtonFit = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_fit
              },
              title: theme.getViewButtonFitTitle(),
              shortcut: theme.getViewButtonFitShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.fit();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "rightPane", {
          get: function () {
              var result = this._paneRight;
              if (result == null) {
                  result = this.newRightPane();
                  this._paneRight = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newRightPane = function () {
          return new wcardinalUi.DLayoutVertical({
              width: 400,
              height: "padding",
              margin: this._margin * 0.5,
              children: [
                  new wcardinalUi.DLayoutHorizontal({
                      width: "padding",
                      height: "auto",
                      children: [
                          new wcardinalUi.DLayoutSpace({
                              weight: 1
                          }),
                          this.toolFileButtonCreate,
                          this.toolFileButtonOpen,
                          this.toolFileButtonSave,
                          this.toolFileButtonDelete
                      ]
                  }),
                  this.inputName,
                  new wcardinalUi.DLayoutHorizontal({
                      width: "padding",
                      height: "auto",
                      children: [
                          this.tableFilterInput,
                          this.toolFileButtonUpload,
                          this.toolFileButtonDownload
                      ]
                  }),
                  this.table
              ]
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "dialogProcessing", {
          get: function () {
              var result = this._dialogProcessing;
              if (result == null) {
                  result = this.newDialogProcessing();
                  this._dialogProcessing = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDialogProcessing = function () {
          return new EDialogProcessing();
      };
      Object.defineProperty(FGraphicTester.prototype, "dialogDelete", {
          get: function () {
              var result = this._dialogConfirmDelete;
              if (result == null) {
                  result = this.newDialogDelete();
                  this._dialogConfirmDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDialogDelete = function () {
          var _this = this;
          return new wcardinalUi.DDialogConfirmDelete({
              on: {
                  ok: function () {
                      var tester = _this._tester;
                      if (tester) {
                          if (tester.id != null) {
                              _this._controller.graphicTester.delete(tester.id);
                          }
                          _this.tester = undefined;
                      }
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "tableFilterInput", {
          get: function () {
              var result = this._tableFilterInput;
              if (result == null) {
                  result = this.newTableFilterInput();
                  this._tableFilterInput = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newTableFilterInput = function () {
          var _this = this;
          return new wcardinalUi.DInputSearch({
              weight: 1,
              on: {
                  input: function (value) {
                      var word = value.trim();
                      _this.tableFilter.word = word;
                      var filter = _this.table.data.filter;
                      if (0 < word.length) {
                          filter.apply();
                      }
                      else {
                          filter.unapply();
                      }
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonCreate", {
          get: function () {
              var result = this._toolFileButtonCreate;
              if (result == null) {
                  result = this.newToolFileButtonCreate();
                  this._toolFileButtonCreate = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonCreate = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this.icons.new
              },
              title: theme.getToolFileButtonCreateTitle(),
              shortcut: theme.getToolFileButtonCreateShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonCreateActive(emitter);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonCreateActive = function (opener) {
          var _this = this;
          if (this.isChanged) {
              this.dialogDiscard.open(opener).then(function () {
                  _this.dialogCreate.open(opener);
              });
          }
          else {
              this.dialogCreate.open(opener);
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonOpen", {
          get: function () {
              var result = this._toolFileButtonOpen;
              if (result == null) {
                  result = this.newToolFileButtonOpen();
                  this._toolFileButtonOpen = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonOpen = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this.icons.open
              },
              title: theme.getToolFileButtonOpenTitle(),
              shortcut: theme.getToolFileButtonOpenShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonOpenActive(emitter);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonOpenActive = function (opener) {
          var _this = this;
          if (this.isChanged) {
              this.dialogDiscard.open(opener).then(function () {
                  _this.dialogSelectMapping.open(opener);
              });
          }
          else {
              this.dialogSelectMapping.open(opener);
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonUpload", {
          get: function () {
              var result = this._toolFileButtonUpload;
              if (result == null) {
                  result = this.newToolFileButtonUpload();
                  this._toolFileButtonUpload = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonUpload = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButtonFile({
              image: {
                  source: this.icons.upload
              },
              title: theme.getToolFileButtonUploadTitle(),
              shortcut: theme.getToolFileButtonUploadShortcut(),
              theme: theme.getToolFileButtonTheme(),
              as: wcardinalUi.DButtonFileAs.TEXT,
              on: {
                  open: function (data, file) {
                      _this.onToolFileButtonUploadOpen(data, file);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonUploadOpen = function (data, file) {
          var tester = this._tester;
          if (tester) {
              tester.mappings = toGraphicTesterObject(data);
              this.onDiagramSelectionChange();
              this.toDirty();
              this.toMappingsDirty();
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonDownload", {
          get: function () {
              var result = this._toolFileButtonDownload;
              if (result == null) {
                  result = this.newToolFileButtonDownload();
                  this._toolFileButtonDownload = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonDownload = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this.icons.download
              },
              title: theme.getToolFileButtonDownloadTitle(),
              shortcut: theme.getToolFileButtonDownloadShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function () {
                      _this.onToolFileButtonDownloadActive();
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonDownloadActive = function () {
          var graphic = this._graphic;
          var tester = this._tester;
          if (graphic && tester) {
              var diagram = this.diagram;
              var canvas = diagram.canvas;
              if (canvas) {
                  var layers = canvas.layer.children;
                  var uuidToDataValueIds = new Map();
                  var rows = [];
                  for (var i = 0, imax = layers.length; i < imax; ++i) {
                      this.toCsvRows(layers[i].children, tester.mappings, null, uuidToDataValueIds, rows);
                  }
                  rows.sort(function (a, b) {
                      return a[0] - b[0];
                  });
                  wcardinalUi.UtilFileDownloader.download(this.getFilename(), UtilCsv.stringify(rows));
              }
          }
      };
      FGraphicTester.prototype.toCsvRows = function (shapes, mappings, dataShape, uuidToDataValueIds, result) {
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var uuid = (dataShape || shape).uuid;
              var object = mappings.get(uuid);
              var data = shape.data;
              var dataValueIds = uuidToDataValueIds.get(uuid);
              if (dataValueIds == null) {
                  dataValueIds = new Set();
                  uuidToDataValueIds.set(uuid, dataValueIds);
              }
              for (var j = 0, jmax = data.size(); j < jmax; ++j) {
                  var dataValue = data.get(j);
                  if (dataValue) {
                      var dataValueId = dataValue.id;
                      if (!dataValueIds.has(dataValueId)) {
                          dataValueIds.add(dataValueId);
                          var value = (object && object[dataValueId]) || "";
                          result.push([uuid, dataValueId, value]);
                      }
                  }
              }
              this.toCsvRows(shape.children, mappings, this.toDataShape(dataShape, shape), uuidToDataValueIds, result);
          }
          return result;
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonSave", {
          get: function () {
              var result = this._toolFileButtonSave;
              if (result == null) {
                  result = this.newToolFileButtonSave();
                  this._toolFileButtonSave = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonSave = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this.icons.save
              },
              title: theme.getToolFileButtonSaveTitle(),
              shortcut: theme.getToolFileButtonSaveShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonSaveActive(emitter);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonSaveActive = function (opener) {
          var _this = this;
          var graphic = this._graphic;
          var tester = this._tester;
          if (graphic && tester) {
              tester.name = this.inputName.input.value;
              var simple_1 = toGraphicTesterSimple(tester);
              var dialogProcessing_1 = this.dialogProcessing;
              dialogProcessing_1.open(opener);
              this._controller.graphicTester.save(simple_1).then(function (id) {
                  simple_1.id = id;
                  _this.tester = toGraphicTesterSerialized(simple_1);
                  dialogProcessing_1.resolve();
              }, function (reason) {
                  dialogProcessing_1.reject(reason);
              });
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "toolFileButtonDelete", {
          get: function () {
              var result = this._toolFileButtonDelete;
              if (result == null) {
                  result = this.newToolFileButtonDelete();
                  this._toolFileButtonDelete = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newToolFileButtonDelete = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this.icons.delete
              },
              title: theme.getToolFileButtonDeleteTitle(),
              shortcut: theme.getToolFileButtonDeleteShortcut(),
              theme: theme.getToolFileButtonTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonDeleteActive(emitter);
                  }
              }
          });
      };
      FGraphicTester.prototype.onToolFileButtonDeleteActive = function (opener) {
          this.dialogDelete.open(opener);
      };
      Object.defineProperty(FGraphicTester.prototype, "inputName", {
          get: function () {
              var result = this._inputName;
              if (result == null) {
                  result = this.newInputName();
                  this._inputName = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newInputName = function () {
          var _this = this;
          return new wcardinalUi.DInputTextAndLabel({
              width: "100%",
              label: {
                  text: {
                      value: this._theme.getInputNameLabel()
                  }
              },
              input: {
                  weight: 1,
                  on: {
                      change: function () {
                          _this.toDirty();
                      }
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "icons", {
          get: function () {
              return this._icons;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "diagram", {
          get: function () {
              var result = this._diagram;
              if (result == null) {
                  result = this.newDiagram();
                  this._diagram = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDiagram = function () {
          var _this = this;
          var result = new wcardinalUi.DDiagram(this.toDiagramOptions(this._options));
          result.on("down", function (e, diagram) {
              _this.onDiagramDown(e, diagram);
          });
          result.on("keydown", function (e) {
              _this.onDiagramKeydown(e);
          });
          return result;
      };
      FGraphicTester.prototype.toDiagramOptions = function (options) {
          var _this = this;
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
          var result = options.diagram || {};
          (_a = result.controller) !== null && _a !== void 0 ? _a : (result.controller = this._controller.graphic);
          (_b = result.width) !== null && _b !== void 0 ? _b : (result.width = "100%");
          (_c = result.height) !== null && _c !== void 0 ? _c : (result.height = "100%");
          (_d = result.mask) !== null && _d !== void 0 ? _d : (result.mask = true);
          (_e = result.ambient) !== null && _e !== void 0 ? _e : (result.ambient = true);
          var view = ((_f = result.view) !== null && _f !== void 0 ? _f : (result.view = {}));
          var gesture = ((_g = view.gesture) !== null && _g !== void 0 ? _g : (view.gesture = {}));
          (_h = gesture.modifier) !== null && _h !== void 0 ? _h : (gesture.modifier = wcardinalUi.UtilGestureModifier.ALT);
          var checker = ((_j = gesture.checker) !== null && _j !== void 0 ? _j : (gesture.checker = {}));
          (_k = checker.start) !== null && _k !== void 0 ? _k : (checker.start = function (e, modifier) {
              return wcardinalUi.UtilGestureModifiers.match(e, modifier) || _this._isSelectSuspended;
          });
          (_l = checker.move) !== null && _l !== void 0 ? _l : (checker.move = function (e, modifier) {
              var diagram = _this._diagram;
              return (wcardinalUi.UtilGestureModifiers.match(e, modifier) || !!(diagram && diagram.state.isGesturing));
          });
          var zoom = ((_m = view.zoom) !== null && _m !== void 0 ? _m : (view.zoom = {}));
          var dblclick = ((_o = zoom.dblclick) !== null && _o !== void 0 ? _o : (zoom.dblclick = {}));
          (_p = dblclick.checker) !== null && _p !== void 0 ? _p : (dblclick.checker = function (e, modifier) {
              return _this._isSelectSuspended;
          });
          return result;
      };
      Object.defineProperty(FGraphicTester.prototype, "selection", {
          get: function () {
              var _this = this;
              var result = this._selection;
              if (result == null) {
                  result = new EToolSelectSelection({
                      diagram: this.diagram,
                      modifier: {
                          editable: false
                      }
                  });
                  result.on("change", function () {
                      _this.onDiagramSelectionChange();
                  });
                  this._selection = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.toDataMappingRows = function (shapes, mappings, dataShape, dataValueIdToRow, result) {
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              var uuid = (dataShape || shape).uuid;
              var object = mappings.get(uuid);
              var data = shape.data;
              for (var j = 0, jmax = data.size(); j < jmax; ++j) {
                  var dataValue = data.get(j);
                  if (dataValue != null) {
                      var dataValueId = dataValue.id;
                      var value = (object && object[dataValueId]) || "";
                      var row = dataValueIdToRow.get(dataValueId);
                      if (row == null) {
                          row = {
                              uuids: [uuid],
                              id: dataValueId,
                              value: value
                          };
                          dataValueIdToRow.set(dataValueId, row);
                          result.push(row);
                      }
                      else {
                          row.uuids.push(uuid);
                          row.value = value;
                      }
                  }
              }
              this.toDataMappingRows(shape.children, mappings, this.toDataShape(dataShape, shape), dataValueIdToRow, result);
          }
          return result;
      };
      FGraphicTester.prototype.toDataShape = function (dataShape, shape) {
          if (dataShape) {
              return dataShape;
          }
          if (shape instanceof wcardinalUi.EShapeEmbedded) {
              return shape;
          }
          return null;
      };
      FGraphicTester.prototype.onDiagramSelectionChange = function () {
          var selection = this._selection;
          var tester = this._tester;
          var table = this.table;
          if (selection && tester) {
              var shapes = selection.get();
              if (0 < shapes.length) {
                  var rows = [];
                  this.toDataMappingRows(shapes, tester.mappings, null, new Map(), rows);
                  table.data.clearAndAddAll(rows);
              }
              else {
                  table.data.clear();
              }
          }
          else {
              table.data.clear();
          }
      };
      FGraphicTester.prototype.onDiagramDown = function (e, diagram) {
          if (this._isSelectSuspended) {
              return;
          }
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var diagramCanvas = diagram.canvas;
          if (diagramCanvas) {
              var isAddMode = originalEvent.ctrlKey || originalEvent.shiftKey;
              if (this._selectMode === 1 /* EToolSelectMode.SELECT */) {
                  this._selectMode = 0 /* EToolSelectMode.NONE */;
                  this.onDiagramSelectEnd(diagramCanvas, isAddMode);
                  return;
              }
              var global_1 = e.data.global;
              var onDownPoint = this._onDiagramDownPoint;
              onDownPoint.copyFrom(global_1);
              var selection = this.selection;
              var hitObject = this.hitTest(global_1, diagramCanvas);
              if (hitObject instanceof wcardinalUi.EShapeBase) {
                  if (isAddMode) {
                      selection.toggle(hitObject);
                  }
                  else if (!selection.contains(hitObject)) {
                      var first = selection.first();
                      if (first == null) {
                          selection.set(hitObject.root);
                      }
                      else {
                          var selected = UtilShapeSearch.toSelected(hitObject);
                          if (selected != null) {
                              if (wcardinalUi.EShapeCapabilities.contains(selected, wcardinalUi.EShapeCapability.CHILDREN)) {
                                  this._childSelectTime = Date.now();
                                  this._childSelectChild = UtilShapeSearch.toOfParent(hitObject, selected);
                              }
                          }
                          else {
                              var sharedParent = UtilShapeSearch.toSharedParent(first, hitObject);
                              selection.set(UtilShapeSearch.toOfParent(hitObject, sharedParent));
                          }
                      }
                  }
                  this._selectMode = 2 /* EToolSelectMode.TRANSLATE */;
              }
              else {
                  // Select area
                  var area = this.selectArea;
                  diagramCanvas.toLocal(global_1, undefined, onDownPoint);
                  area.x = onDownPoint.x;
                  area.y = onDownPoint.y;
                  area.size.set(0, 0);
                  area.update();
                  diagramCanvas.addChild(area);
                  wcardinalUi.DApplications.update(diagram);
                  // Select mode
                  this._selectMode = 1 /* EToolSelectMode.SELECT */;
              }
              var oldInteractionManager = this._interactionManager;
              if (oldInteractionManager) {
                  this._interactionManager = null;
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.move, this._onDiagramMoveBound);
                  var onDiagramUpBound = this._onDiagramUpBound;
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.up, onDiagramUpBound);
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onDiagramUpBound);
                  oldInteractionManager.off(wcardinalUi.UtilPointerEvent.cancel, onDiagramUpBound);
              }
              var applicationLayer = wcardinalUi.DApplications.getLayer(diagram);
              if (applicationLayer) {
                  var newInteractionManager = applicationLayer.renderer.plugins.interaction;
                  this._interactionManager = newInteractionManager;
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.move, this._onDiagramMoveBound);
                  var onDiagramUpBound = this._onDiagramUpBound;
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.up, onDiagramUpBound);
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.upoutside, onDiagramUpBound);
                  newInteractionManager.on(wcardinalUi.UtilPointerEvent.cancel, onDiagramUpBound);
              }
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "selectArea", {
          get: function () {
              var result = this._selectArea;
              if (result == null) {
                  result = new EToolSelectArea();
                  this._selectArea = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.onDiagramMove = function (e) {
          var originalEvent = e.data.originalEvent;
          if (originalEvent.altKey) {
              return;
          }
          var diagram = this.diagram;
          var diagramCanvas = diagram.canvas;
          var diagramLayer = diagram.layer;
          var mode = this._selectMode;
          if (diagramCanvas && diagramLayer && mode !== 0 /* EToolSelectMode.NONE */) {
              var global_2 = e.data.global;
              var onDownPoint = this._onDiagramDownPoint;
              if (mode === 1 /* EToolSelectMode.SELECT */) {
                  var area = this.selectArea;
                  var onMovePoint = diagramCanvas.toLocal(global_2, undefined, this._onDiagramMovePoint);
                  area.x = Math.min(onDownPoint.x, onMovePoint.x);
                  area.y = Math.min(onDownPoint.y, onMovePoint.y);
                  area.size.set(Math.max(onDownPoint.x, onMovePoint.x) - area.x, Math.max(onDownPoint.y, onMovePoint.y) - area.y);
                  area.update();
                  wcardinalUi.DApplications.update(diagram);
              }
              else {
                  var dx = global_2.x - onDownPoint.x;
                  var dy = global_2.y - onDownPoint.y;
                  if (1 <= Math.abs(dx) || 1 <= Math.abs(dy)) {
                      this._childSelectChild = null;
                  }
              }
          }
      };
      FGraphicTester.prototype.onDiagramUp = function (e) {
          var diagram = this.diagram;
          var diagramCanvas = diagram.canvas;
          var diagramLayer = diagram.layer;
          var mode = this._selectMode;
          var interactionManager = this._interactionManager;
          if (interactionManager) {
              this._interactionManager = null;
              interactionManager.off(wcardinalUi.UtilPointerEvent.move, this._onDiagramMoveBound);
              var onDiagramUpBound = this._onDiagramUpBound;
              interactionManager.off(wcardinalUi.UtilPointerEvent.up, onDiagramUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.upoutside, onDiagramUpBound);
              interactionManager.off(wcardinalUi.UtilPointerEvent.cancel, onDiagramUpBound);
          }
          if (diagramCanvas && diagramLayer && mode !== 0 /* EToolSelectMode.NONE */) {
              this._selectMode = 0 /* EToolSelectMode.NONE */;
              if (mode === 1 /* EToolSelectMode.SELECT */) {
                  var originalEvent = e.data.originalEvent;
                  var isAddMode = originalEvent.ctrlKey || originalEvent.shiftKey;
                  this.onDiagramSelectEnd(diagramCanvas, isAddMode);
              }
              else {
                  // Select the child
                  var selection = this.selection;
                  var childSelectChild = this._childSelectChild;
                  if (childSelectChild != null) {
                      this._childSelectChild = null;
                      var elapsedTime = Date.now() - this._childSelectTime;
                      if (elapsedTime < 333) {
                          selection.set(childSelectChild);
                      }
                  }
                  wcardinalUi.DApplications.update(diagram);
              }
          }
      };
      FGraphicTester.prototype.onDiagramSelectEnd = function (canvas, isAddMode) {
          var area = this.selectArea;
          var selection = this.selection;
          if (0 < area.size.x && 0 < area.size.y) {
              var areaRect = area.getBounds(false, this._selectAreaRect);
              var foundShapes = [];
              var layers = canvas.layer.children;
              for (var i = layers.length - 1; 0 <= i; --i) {
                  UtilShapeAreaSelect.findShapes(layers[i], areaRect, foundShapes);
              }
              if (isAddMode) {
                  if (0 < foundShapes.length) {
                      selection.addAll(foundShapes);
                  }
              }
              else {
                  if (0 < foundShapes.length || !selection.isEmpty()) {
                      selection.clearAndAddAll(foundShapes);
                  }
              }
          }
          else if (!isAddMode) {
              if (!selection.isEmpty()) {
                  selection.clear();
              }
          }
          canvas.removeChild(area);
          wcardinalUi.DApplications.update(canvas);
      };
      FGraphicTester.prototype.hitTest = function (global, canvas) {
          var layers = canvas.layer.children;
          for (var i = layers.length - 1; 0 <= i; --i) {
              var result = UtilHitTest.execute(global, layers[i]);
              if (result != null) {
                  return result;
              }
          }
          return null;
      };
      FGraphicTester.prototype.onDiagramKeydown = function (e) {
          if (wcardinalUi.UtilKeyboardEvent.isSelectAllKey(e)) {
              var canvas = this.diagram.canvas;
              if (canvas != null) {
                  var selection = this.selection;
                  selection.clear();
                  var layers = canvas.layer.children;
                  for (var i = 0, imax = layers.length; i < imax; ++i) {
                      var children = layers[i].children;
                      if (0 < children.length) {
                          selection.addAll(children);
                      }
                  }
              }
          }
      };
      Object.defineProperty(FGraphicTester.prototype, "table", {
          get: function () {
              var result = this._table;
              if (result == null) {
                  result = this.newTable();
                  this._table = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newTable = function () {
          return new wcardinalUi.DTable({
              weight: 1,
              width: "padding",
              columns: this.newColumnOptions(),
              data: {
                  filter: this.tableFilter
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "tableFilter", {
          get: function () {
              var result = this._tableFilter;
              if (result == null) {
                  result = this.newTableFilter();
                  this._tableFilter = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newTableFilter = function () {
          return {
              word: "",
              test: function (row) {
                  var word = this.word;
                  return (word.length <= 0 ||
                      0 <= row.id.indexOf(word) ||
                      0 <= row.value[0].indexOf(word) ||
                      0 <= row.value[1].indexOf(word));
              }
          };
      };
      Object.defineProperty(FGraphicTester.prototype, "dialogSelectGraphic", {
          get: function () {
              var result = this._dialogSelectGraphic;
              if (result == null) {
                  result = this.newDialogSelectGraphic();
                  this._dialogSelectGraphic = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDialogSelectGraphic = function () {
          var _this = this;
          return this._category.get().then(function (category) {
              if (_this._options.controller.toThumbnail != null) {
                  var result = _this.newDialogSelectGraphicImage();
                  result.categories = category.items;
                  return result;
              }
              else {
                  var result = _this.newDialogSelectGraphicNoImage();
                  result.categories = category.items;
                  return result;
              }
          });
      };
      FGraphicTester.prototype.newDialogSelectGraphicNoImage = function () {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: this._controller.graphic,
              on: {
                  select: function (value) {
                      _this.onDialogSelectGraphicSelect(value);
                  }
              }
          });
      };
      FGraphicTester.prototype.newDialogSelectGraphicImage = function () {
          var _this = this;
          return newDialogSelectWithThumbnails(this._options.controller.graphic, this._controller.toThumbnail, function (value) {
              _this.onDialogSelectGraphicSelect(value);
          });
      };
      FGraphicTester.prototype.onDialogSelectGraphicSelect = function (value) {
          var _this = this;
          this._controller.graphic.get(value.id).then(function (serialized) {
              _this.graphic = wcardinalUi.DDiagrams.toSerialized(serialized);
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "graphic", {
          get: function () {
              return this._graphic;
          },
          set: function (graphic) {
              this._graphic = graphic;
              var diagram = this.diagram;
              if (graphic != null) {
                  diagram.set(graphic);
              }
              else {
                  diagram.set(null);
              }
              this._appliedValues.clear();
              this.tester = undefined;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "dialogSelectMapping", {
          get: function () {
              var result = this._dialogSelectTester;
              if (result == null) {
                  result = this.newDialogSelectMapping();
                  this._dialogSelectTester = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDialogSelectMapping = function () {
          var _this = this;
          var controller = this._controller;
          return new wcardinalUi.DDialogSelect({
              controller: {
                  search: function (word) {
                      var graphic = _this._graphic;
                      if (graphic) {
                          return controller.graphicTester.search(graphic.name, word);
                      }
                      return Promise.resolve([]);
                  }
              },
              on: {
                  select: function (selected) {
                      controller.graphicTester.get(selected.id).then(function (serialized) {
                          var graphic = _this._graphic;
                          if (graphic) {
                              _this.tester = toGraphicTesterSerialized(serialized);
                          }
                      });
                  }
              }
          });
      };
      Object.defineProperty(FGraphicTester.prototype, "dialogDiscard", {
          get: function () {
              var result = this._dialogDiscard;
              if (result == null) {
                  result = new wcardinalUi.DDialogConfirmDiscard();
                  this._dialogDiscard = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "dialogCreate", {
          get: function () {
              var result = this._dialogCreate;
              if (result == null) {
                  result = this.newDialogCreate();
                  this._dialogCreate = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.newDialogCreate = function () {
          var _this = this;
          var result = new wcardinalUi.DDialogInputText({
              on: {
                  open: function () {
                      result.value = _this._theme.newDialogCreateTextValue();
                  },
                  ok: function (value) {
                      var graphic = _this._graphic;
                      if (graphic) {
                          _this.tester = newGraphicTester(value, graphic);
                      }
                  }
              }
          });
          return result;
      };
      Object.defineProperty(FGraphicTester.prototype, "tester", {
          get: function () {
              return this._tester;
          },
          set: function (tester) {
              this._isChanged = false;
              var inputName = this.inputName.input;
              this._tester = tester;
              inputName.value = tester ? tester.name : "";
              this.onDiagramSelectionChange();
              this.onChange();
              this.toMappingsDirty();
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "isNew", {
          get: function () {
              var tester = this._tester;
              return tester != null && tester.id == null;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicTester.prototype, "isChanged", {
          get: function () {
              return this._isChanged || this.isNew;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicTester.prototype.onChange = function () {
          var hasNoGraphc = this._graphic == null;
          var hasNoMapping = this._tester == null;
          var hasNoChanges = !this.isChanged;
          var isNotEditable = !this._isEditable;
          this.table.state.isDisabled = hasNoMapping;
          this.tableFilterInput.state.isDisabled = hasNoMapping;
          this.inputName.state.isDisabled = hasNoMapping || isNotEditable;
          this.toolFileButtonCreate.state.isDisabled = hasNoGraphc || isNotEditable;
          this.toolFileButtonOpen.state.isDisabled = hasNoGraphc;
          this.toolFileButtonUpload.state.isDisabled = hasNoMapping || isNotEditable;
          this.toolFileButtonDownload.state.isDisabled = hasNoMapping;
          this.toolFileButtonSave.state.isDisabled = hasNoMapping || hasNoChanges || isNotEditable;
          this.toolFileButtonDelete.state.isDisabled = hasNoMapping || isNotEditable;
      };
      FGraphicTester.prototype.evaluate = function (expression) {
          return Function("try { return (".concat(expression, "); } catch( e ) { return 0; }"))();
      };
      FGraphicTester.prototype.onMappingsChange = function () {
          var tester = this._tester;
          if (tester) {
              var mappings = tester.mappings;
              var diagram = this.diagram;
              var canvas = diagram.canvas;
              if (canvas) {
                  var isChanged = false;
                  var layers = canvas.layer.children;
                  for (var i = 0, imax = layers.length; i < imax; ++i) {
                      if (this.applyMappings(layers[i].children, mappings, null)) {
                          isChanged = true;
                      }
                  }
                  if (isChanged) {
                      wcardinalUi.DApplications.update(diagram);
                  }
              }
          }
      };
      FGraphicTester.prototype.applyMappings = function (shapes, mappings, dataShape) {
          var isChanged = false;
          for (var i = 0, imax = shapes.length; i < imax; ++i) {
              var shape = shapes[i];
              // Apply the mappings
              var uuid = (dataShape || shape).uuid;
              var mapping = mappings.get(uuid);
              if (mapping) {
                  var data = shape.data;
                  for (var j = 0, jmax = data.size(); j < jmax; ++j) {
                      var dataValue = data.get(j);
                      if (dataValue != null && this.applyMapping(dataValue, mapping[dataValue.id])) {
                          isChanged = true;
                      }
                  }
              }
              // Children
              if (this.applyMappings(shape.children, mappings, this.toDataShape(dataShape, shape))) {
                  isChanged = true;
              }
          }
          // Done
          return isChanged;
      };
      FGraphicTester.prototype.applyMapping = function (dataValue, expression) {
          if (expression != null) {
              var expressionMap = this._expressionMap;
              if (expressionMap.has(expression)) {
                  return this.applyMappingIfChanged(dataValue, expressionMap.get(expression));
              }
              else if (0 < expression.length) {
                  try {
                      var evaluated = this.evaluate(expression);
                      expressionMap.set(expression, evaluated);
                      return this.applyMappingIfChanged(dataValue, evaluated);
                  }
                  catch (_a) {
                      // DO NOTHING
                  }
              }
          }
          return false;
      };
      FGraphicTester.prototype.applyMappingIfChanged = function (dataValue, value) {
          var appliedValues = this._appliedValues;
          if (appliedValues.has(dataValue)) {
              var appliedValue = appliedValues.get(dataValue);
              if (appliedValue !== value) {
                  appliedValues.set(dataValue, value);
                  dataValue.value = value;
                  return true;
              }
          }
          else {
              appliedValues.set(dataValue, value);
              dataValue.value = value;
              return true;
          }
          return false;
      };
      FGraphicTester.prototype.toDirty = function () {
          if (!this._isChanged) {
              this._isChanged = true;
              this.onChange();
          }
      };
      FGraphicTester.prototype.toMappingsDirty = function () {
          this._isMappingsDirty = true;
      };
      FGraphicTester.prototype.getFilename = function () {
          var name = this.inputName.input.value.toLowerCase();
          var date = UtilDate.format(Date.now());
          return "graphic-tester-".concat(name, "-").concat(date, ".csv");
      };
      FGraphicTester.prototype.newColumnOptions = function () {
          var _this = this;
          var isEditable = this._isEditable;
          var theme = this._theme;
          return [
              {
                  type: "TEXT",
                  label: theme.getTableColumnDataLabel(),
                  editable: false,
                  sortable: true,
                  getter: function (row) {
                      return row.id;
                  },
                  setter: function (row, index, value) {
                      row.id = value;
                      _this.toDirty();
                  }
              },
              {
                  type: "TEXT",
                  label: theme.getTableColumnValueLabel(),
                  align: "LEFT",
                  editable: isEditable,
                  sortable: true,
                  formatter: function (value) {
                      return value || "";
                  },
                  getter: function (row) {
                      return row.value;
                  },
                  setter: function (row, index, value) {
                      var tester = _this._tester;
                      if (tester) {
                          var uuids = row.uuids;
                          var mappings = tester.mappings;
                          var id = row.id;
                          if (0 < value.length) {
                              for (var i = 0, imax = uuids.length; i < imax; ++i) {
                                  var uuid = uuids[i];
                                  var object = mappings.get(uuid);
                                  if (object == null) {
                                      object = {};
                                      mappings.set(uuid, object);
                                  }
                                  object[id] = value;
                              }
                          }
                          else {
                              for (var i = 0, imax = uuids.length; i < imax; ++i) {
                                  var uuid = uuids[i];
                                  var object = mappings.get(uuid);
                                  if (object != null) {
                                      delete object[id];
                                  }
                              }
                          }
                      }
                      row.value = value;
                      _this.toDirty();
                      _this.toMappingsDirty();
                  }
              }
          ];
      };
      FGraphicTester.prototype.toTheme = function (options) {
          var theme = options === null || options === void 0 ? void 0 : options.theme;
          if (theme) {
              if (wcardinalUi.isString(theme)) {
                  return wcardinalUi.DThemes.getInstance().get(theme);
              }
              return theme;
          }
          return this.getThemeDefault();
      };
      FGraphicTester.prototype.getThemeDefault = function () {
          return wcardinalUi.DThemes.getInstance().get(this.getType());
      };
      FGraphicTester.prototype.getType = function () {
          return "FGraphicTester";
      };
      return FGraphicTester;
  }());

  var FGraphicViewer = /** @class */ (function () {
      function FGraphicViewer(options) {
          var _a, _b;
          // Options
          this._options = options;
          var theme = this.toTheme(options);
          this._theme = theme;
          var margin = (_a = options.margin) !== null && _a !== void 0 ? _a : theme.getMargin();
          this._margin = margin;
          var icons = theme.getIconBuilder().build();
          this._icons = icons;
          this._category = new UtilCanvasCategory((_b = options.canvas) === null || _b === void 0 ? void 0 : _b.category);
          // Application
          var application = new wcardinalUi.DApplication(options.application);
          this._application = application;
          var stage = application.stage;
          // Diagram
          var diagram = this.diagram;
          stage.addChild(diagram);
          // Header
          var header = this.header;
          if (header != null) {
              stage.addChild(header);
          }
          // View operations
          var button = options.button;
          if (button == null || button.view !== false) {
              stage.addChild(this.layoutViewButton);
          }
      }
      Object.defineProperty(FGraphicViewer.prototype, "application", {
          get: function () {
              return this._application;
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(FGraphicViewer.prototype, "diagram", {
          get: function () {
              var result = this._diagram;
              if (result == null) {
                  result = this.newDiagram();
                  this._diagram = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newDiagram = function () {
          var controller = this._options.controller;
          return new wcardinalUi.DDiagram({
              x: 0,
              y: 0,
              width: "100%",
              height: "100%",
              outline: {
                  color: null
              },
              controller: controller.graphic,
              data: {
                  mapper: this.newDataMapper(),
                  remote: {
                      controller: controller.remote
                  }
              }
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "header", {
          get: function () {
              var result = this._header;
              if (result === undefined) {
                  result = this.newHeader();
                  this._header = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newHeader = function () {
          var header = this._options.header;
          if (header != null) {
              var result = header(this.newToolFileButtons());
              if (result != null) {
                  var margin_1 = this._margin;
                  result.x = margin_1;
                  result.y = margin_1;
                  result.setWidth(function (p) { return p - 2 * margin_1; });
                  return result;
              }
          }
          return null;
      };
      FGraphicViewer.prototype.newToolFileButtons = function () {
          var result = [];
          var button = this._options.button;
          if (button == null || button.open !== false) {
              result.push(this.toolFileButtonGraphicOpen);
          }
          return result;
      };
      Object.defineProperty(FGraphicViewer.prototype, "toolFileButtonGraphicOpen", {
          get: function () {
              var result = this._toolFileButtonGraphicOpen;
              if (result == null) {
                  result = this.newToolFileButtonGraphicOpen();
                  this._toolFileButtonGraphicOpen = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newToolFileButtonGraphicOpen = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.open
              },
              title: theme.getToolFileButtonGraphicOpenTitle(),
              shortcut: theme.getToolFileButtonGraphicOpenShortcut(),
              theme: theme.getToolFileButtonGraphicTheme(),
              on: {
                  active: function (emitter) {
                      _this.onToolFileButtonGraphicOpenActive(emitter);
                  }
              }
          });
      };
      FGraphicViewer.prototype.onToolFileButtonGraphicOpenActive = function (opener) {
          this.dialogSelect.then(function (dialogSelect) {
              dialogSelect.open(opener);
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "layoutViewButton", {
          get: function () {
              var result = this._layoutViewButton;
              if (result == null) {
                  result = this.newLayoutViewButton();
                  this._layoutViewButton = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newLayoutViewButton = function () {
          var margin = this._margin;
          var position = function (p, s) { return p - s - margin; };
          return new wcardinalUi.DLayoutHorizontal({
              x: position,
              y: position,
              width: "auto",
              height: "auto",
              margin: 0,
              children: this.newViewButtons()
          });
      };
      FGraphicViewer.prototype.newViewButtons = function () {
          return [
              this.viewButtonZoomOut,
              this.viewButtonZoomIn,
              this.viewButtonReset,
              this.viewButtonFit
          ];
      };
      Object.defineProperty(FGraphicViewer.prototype, "viewButtonZoomOut", {
          get: function () {
              var result = this._viewButtonZoomOut;
              if (result == null) {
                  result = this.newViewButtonZoomOut();
                  this._viewButtonZoomOut = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newViewButtonZoomOut = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_out
              },
              title: theme.getViewButtonZoomOutTitle(),
              shortcut: theme.getViewButtonZoomOutShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomOut();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "viewButtonZoomIn", {
          get: function () {
              var result = this._viewButtonZoomIn;
              if (result == null) {
                  result = this.newViewButtonZoomIn();
                  this._viewButtonZoomIn = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newViewButtonZoomIn = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_zoom_in
              },
              title: theme.getViewButtonZoomInTitle(),
              shortcut: theme.getViewButtonZoomInShortcut(),
              shortcuts: theme.getViewButtonZoomInShortcuts(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.zoomIn();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "viewButtonReset", {
          get: function () {
              var result = this._viewButtonReset;
              if (result == null) {
                  result = this.newViewButtonReset();
                  this._viewButtonReset = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newViewButtonReset = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_reset
              },
              title: theme.getViewButtonResetTitle(),
              shortcut: theme.getViewButtonResetShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.reset();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "viewButtonFit", {
          get: function () {
              var result = this._viewButtonFit;
              if (result == null) {
                  result = this.newViewButtonFit();
                  this._viewButtonFit = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newViewButtonFit = function () {
          var _this = this;
          var theme = this._theme;
          return new wcardinalUi.DButton({
              image: {
                  source: this._icons.view_fit
              },
              title: theme.getViewButtonFitTitle(),
              shortcut: theme.getViewButtonFitShortcut(),
              theme: theme.getViewButtonTheme(),
              on: {
                  active: function () {
                      _this.diagram.view.fit();
                  }
              }
          });
      };
      Object.defineProperty(FGraphicViewer.prototype, "dialogSelect", {
          get: function () {
              var result = this._dialogSelect;
              if (result == null) {
                  result = this.newDialogSelect();
                  this._dialogSelect = result;
              }
              return result;
          },
          enumerable: false,
          configurable: true
      });
      FGraphicViewer.prototype.newDialogSelect = function () {
          var _this = this;
          return this._category.get().then(function (category) {
              if (_this._options.controller.toThumbnail != null) {
                  var result = _this.newDialogSelectImage();
                  result.categories = category.items;
                  return result;
              }
              else {
                  var result = _this.newDialogSelectNoImage();
                  result.categories = category.items;
                  return result;
              }
          });
      };
      FGraphicViewer.prototype.newDialogSelectNoImage = function () {
          var _this = this;
          return new wcardinalUi.DDialogSelect({
              controller: this._options.controller.graphic,
              on: {
                  select: function (value) {
                      _this.onDialogSelectSelect(value);
                  }
              }
          });
      };
      FGraphicViewer.prototype.newDialogSelectImage = function () {
          var _this = this;
          var controller = this._options.controller;
          return newDialogSelectWithThumbnails(controller.graphic, controller.toThumbnail, function (value) {
              _this.onDialogSelectSelect(value);
          });
      };
      FGraphicViewer.prototype.onDialogSelectSelect = function (value) {
          var _this = this;
          this._options.controller.graphic.get(value.id).then(function (serialized) {
              _this.diagram.set(wcardinalUi.DDiagrams.toSerialized(serialized));
          });
      };
      FGraphicViewer.prototype.newDataMapper = function () {
          return undefined;
      };
      FGraphicViewer.prototype.toTheme = function (options) {
          var theme = options === null || options === void 0 ? void 0 : options.theme;
          if (theme) {
              if (wcardinalUi.isString(theme)) {
                  return wcardinalUi.DThemes.getInstance().get(theme);
              }
              return theme;
          }
          return this.getThemeDefault();
      };
      FGraphicViewer.prototype.getThemeDefault = function () {
          return wcardinalUi.DThemes.getInstance().get(this.getType());
      };
      FGraphicViewer.prototype.getType = function () {
          return "FGraphicViewer";
      };
      return FGraphicViewer;
  }());

  var geditor = {
    __proto__: null,
    ECommandChartAxisXPadding: ECommandChartAxisXPadding,
    ECommandChartAxisYPadding: ECommandChartAxisYPadding,
    ECommandChartTickXMajorCount: ECommandChartTickXMajorCount,
    ECommandChartTickXMinorCount: ECommandChartTickXMinorCount,
    ECommandChartTickYMajorCount: ECommandChartTickYMajorCount,
    ECommandChartTickYMinorCount: ECommandChartTickYMinorCount,
    ECommandComposition: ECommandComposition,
    ECommandDocumentAll: ECommandDocumentAll,
    ECommandDocumentBackground: ECommandDocumentBackground,
    ECommandDocumentCategory: ECommandDocumentCategory,
    ECommandDocumentCreate: ECommandDocumentCreate,
    ECommandDocumentDescription: ECommandDocumentDescription,
    ECommandDocumentHeight: ECommandDocumentHeight,
    ECommandDocumentLabel: ECommandDocumentLabel,
    ECommandDocumentName: ECommandDocumentName,
    ECommandDocumentOpen: ECommandDocumentOpen,
    ECommandDocumentSnapBringForward: ECommandDocumentSnapBringForward,
    ECommandDocumentSnapCreate: ECommandDocumentSnapCreate,
    ECommandDocumentSnapDelete: ECommandDocumentSnapDelete,
    ECommandDocumentSnapGridSize: ECommandDocumentSnapGridSize,
    ECommandDocumentSnapGridToggle: ECommandDocumentSnapGridToggle,
    ECommandDocumentSnapGridToggleVisibility: ECommandDocumentSnapGridToggleVisibility,
    ECommandDocumentSnapReplace: ECommandDocumentSnapReplace,
    ECommandDocumentSnapSendBackward: ECommandDocumentSnapSendBackward,
    ECommandDocumentSnapTargetToggle: ECommandDocumentSnapTargetToggle,
    ECommandDocumentSnapTargetToggleVisibility: ECommandDocumentSnapTargetToggleVisibility,
    ECommandDocumentSnapToggle: ECommandDocumentSnapToggle,
    ECommandDocumentSummary: ECommandDocumentSummary,
    ECommandDocumentWidth: ECommandDocumentWidth,
    ECommandLayerBringForward: ECommandLayerBringForward,
    ECommandLayerChange: ECommandLayerChange,
    ECommandLayerCreate: ECommandLayerCreate,
    ECommandLayerDelete: ECommandLayerDelete,
    ECommandLayerSendBackward: ECommandLayerSendBackward,
    ECommandShapeActionValueAdd: ECommandShapeActionValueAdd,
    ECommandShapeActionValueBringForward: ECommandShapeActionValueBringForward,
    ECommandShapeActionValueRemove: ECommandShapeActionValueRemove,
    ECommandShapeActionValueReplace: ECommandShapeActionValueReplace,
    ECommandShapeActionValueSendBackward: ECommandShapeActionValueSendBackward,
    ECommandShapeButtonLayerValueAdd: ECommandShapeButtonLayerValueAdd,
    ECommandShapeButtonLayerValueBringForward: ECommandShapeButtonLayerValueBringForward,
    ECommandShapeButtonLayerValueMargin: ECommandShapeButtonLayerValueMargin,
    ECommandShapeButtonLayerValueRemove: ECommandShapeButtonLayerValueRemove,
    ECommandShapeButtonLayerValueReplace: ECommandShapeButtonLayerValueReplace,
    ECommandShapeButtonLayerValueSendBackward: ECommandShapeButtonLayerValueSendBackward,
    ECommandShapeButtonPropertyIsActive: ECommandShapeButtonPropertyIsActive,
    ECommandShapeButtonPropertyIsGrouped: ECommandShapeButtonPropertyIsGrouped,
    ECommandShapeButtonPropertyIsToggle: ECommandShapeButtonPropertyIsToggle,
    ECommandShapeCreate: ECommandShapeCreate,
    ECommandShapeDataMappingValueAdd: ECommandShapeDataMappingValueAdd,
    ECommandShapeDataMappingValueBringForward: ECommandShapeDataMappingValueBringForward,
    ECommandShapeDataMappingValueRemove: ECommandShapeDataMappingValueRemove,
    ECommandShapeDataMappingValueReplace: ECommandShapeDataMappingValueReplace,
    ECommandShapeDataMappingValueSendBackward: ECommandShapeDataMappingValueSendBackward,
    ECommandShapeDataValueAdd: ECommandShapeDataValueAdd,
    ECommandShapeDataValueBringForward: ECommandShapeDataValueBringForward,
    ECommandShapeDataValueRemove: ECommandShapeDataValueRemove,
    ECommandShapeDataValueReplace: ECommandShapeDataValueReplace,
    ECommandShapeDataValueSendBackward: ECommandShapeDataValueSendBackward,
    ECommandShapeDelete: ECommandShapeDelete,
    ECommandShapeGroup: ECommandShapeGroup,
    ECommandShapeProperty: ECommandShapeProperty,
    ECommandShapePropertyAll: ECommandShapePropertyAll,
    ECommandShapePropertyCapability: ECommandShapePropertyCapability,
    ECommandShapePropertyCapabilityLock: ECommandShapePropertyCapabilityLock,
    ECommandShapePropertyCapabilityUnlock: ECommandShapePropertyCapabilityUnlock,
    ECommandShapePropertyCornerOff: ECommandShapePropertyCornerOff,
    ECommandShapePropertyCornerOn: ECommandShapePropertyCornerOn,
    ECommandShapePropertyCursor: ECommandShapePropertyCursor,
    ECommandShapePropertyFillColor: ECommandShapePropertyFillColor,
    ECommandShapePropertyFillEnable: ECommandShapePropertyFillEnable,
    ECommandShapePropertyFocusable: ECommandShapePropertyFocusable,
    ECommandShapePropertyId: ECommandShapePropertyId,
    ECommandShapePropertyImage: ECommandShapePropertyImage,
    ECommandShapePropertyImageClear: ECommandShapePropertyImageClear,
    ECommandShapePropertyImageFitTo: ECommandShapePropertyImageFitTo,
    ECommandShapePropertyInteractive: ECommandShapePropertyInteractive,
    ECommandShapePropertyLineHeadColor: ECommandShapePropertyLineHeadColor,
    ECommandShapePropertyLineHeadMargin: ECommandShapePropertyLineHeadMargin,
    ECommandShapePropertyLineHeadSizeX: ECommandShapePropertyLineHeadSizeX,
    ECommandShapePropertyLineHeadSizeY: ECommandShapePropertyLineHeadSizeY,
    ECommandShapePropertyLineHeadType: ECommandShapePropertyLineHeadType,
    ECommandShapePropertyLineTailColor: ECommandShapePropertyLineTailColor,
    ECommandShapePropertyLineTailMargin: ECommandShapePropertyLineTailMargin,
    ECommandShapePropertyLineTailSizeX: ECommandShapePropertyLineTailSizeX,
    ECommandShapePropertyLineTailSizeY: ECommandShapePropertyLineTailSizeY,
    ECommandShapePropertyLineTailType: ECommandShapePropertyLineTailType,
    ECommandShapePropertyPointsStyle: ECommandShapePropertyPointsStyle,
    ECommandShapePropertyPosition: ECommandShapePropertyPosition,
    ECommandShapePropertyPositionAndRotate: ECommandShapePropertyPositionAndRotate,
    ECommandShapePropertyPositionLeft: ECommandShapePropertyPositionLeft,
    ECommandShapePropertyPositionTop: ECommandShapePropertyPositionTop,
    ECommandShapePropertyPositionX: ECommandShapePropertyPositionX,
    ECommandShapePropertyPositionY: ECommandShapePropertyPositionY,
    ECommandShapePropertyRadius: ECommandShapePropertyRadius,
    ECommandShapePropertyRecursive: ECommandShapePropertyRecursive,
    ECommandShapePropertyRecursiveSimple: ECommandShapePropertyRecursiveSimple,
    ECommandShapePropertyRotation: ECommandShapePropertyRotation,
    ECommandShapePropertyShortcut: ECommandShapePropertyShortcut,
    ECommandShapePropertySizeX: ECommandShapePropertySizeX,
    ECommandShapePropertySizeY: ECommandShapePropertySizeY,
    ECommandShapePropertySkew: ECommandShapePropertySkew,
    ECommandShapePropertyStrokeAlign: ECommandShapePropertyStrokeAlign,
    ECommandShapePropertyStrokeColor: ECommandShapePropertyStrokeColor,
    ECommandShapePropertyStrokeEnable: ECommandShapePropertyStrokeEnable,
    ECommandShapePropertyStrokeSideOff: ECommandShapePropertyStrokeSideOff,
    ECommandShapePropertyStrokeSideOn: ECommandShapePropertyStrokeSideOn,
    ECommandShapePropertyStrokeStyle: ECommandShapePropertyStrokeStyle,
    ECommandShapePropertyStrokeWidth: ECommandShapePropertyStrokeWidth,
    ECommandShapePropertyTextAlignHorizontal: ECommandShapePropertyTextAlignHorizontal,
    ECommandShapePropertyTextAlignVertical: ECommandShapePropertyTextAlignVertical,
    ECommandShapePropertyTextClipping: ECommandShapePropertyTextClipping,
    ECommandShapePropertyTextColor: ECommandShapePropertyTextColor,
    ECommandShapePropertyTextDirection: ECommandShapePropertyTextDirection,
    ECommandShapePropertyTextFamily: ECommandShapePropertyTextFamily,
    ECommandShapePropertyTextFitting: ECommandShapePropertyTextFitting,
    ECommandShapePropertyTextOffsetHorizontal: ECommandShapePropertyTextOffsetHorizontal,
    ECommandShapePropertyTextOffsetVertical: ECommandShapePropertyTextOffsetVertical,
    ECommandShapePropertyTextOutlineColor: ECommandShapePropertyTextOutlineColor,
    ECommandShapePropertyTextOutlineEnable: ECommandShapePropertyTextOutlineEnable,
    ECommandShapePropertyTextOutlineWidth: ECommandShapePropertyTextOutlineWidth,
    ECommandShapePropertyTextPaddingHorizontal: ECommandShapePropertyTextPaddingHorizontal,
    ECommandShapePropertyTextPaddingVertical: ECommandShapePropertyTextPaddingVertical,
    ECommandShapePropertyTextSize: ECommandShapePropertyTextSize,
    ECommandShapePropertyTextSizeDelta: ECommandShapePropertyTextSizeDelta,
    ECommandShapePropertyTextSpacingHorizontal: ECommandShapePropertyTextSpacingHorizontal,
    ECommandShapePropertyTextSpacingVertical: ECommandShapePropertyTextSpacingVertical,
    ECommandShapePropertyTextStyle: ECommandShapePropertyTextStyle,
    ECommandShapePropertyTextValue: ECommandShapePropertyTextValue,
    ECommandShapePropertyTextWeight: ECommandShapePropertyTextWeight,
    ECommandShapePropertyTitle: ECommandShapePropertyTitle,
    ECommandShapeReplace: ECommandShapeReplace,
    ECommandShapeReplaceOne: ECommandShapeReplaceOne,
    ECommandShapeSelect: ECommandShapeSelect,
    ECommandShapeTableColumnValueAdd: ECommandShapeTableColumnValueAdd,
    ECommandShapeTableColumnValueBringForward: ECommandShapeTableColumnValueBringForward,
    ECommandShapeTableColumnValueRemove: ECommandShapeTableColumnValueRemove,
    ECommandShapeTableColumnValueReplace: ECommandShapeTableColumnValueReplace,
    ECommandShapeTableColumnValueSendBackward: ECommandShapeTableColumnValueSendBackward,
    ECommandShapeTableRowHeight: ECommandShapeTableRowHeight,
    ECommandShapeTableRowSelectionType: ECommandShapeTableRowSelectionType,
    ECommandShapeTreeBringForward: ECommandShapeTreeBringForward,
    ECommandShapeTreeBringToFront: ECommandShapeTreeBringToFront,
    ECommandShapeTreeSendBackward: ECommandShapeTreeSendBackward,
    ECommandShapeTreeSendToBack: ECommandShapeTreeSendToBack,
    ECommandShapeUngroup: ECommandShapeUngroup,
    EDialogAction: EDialogAction,
    EDialogActionExtension: EDialogActionExtension,
    EDialogActionExtensionContainer: EDialogActionExtensionContainer,
    EDialogDataMappingValue: EDialogDataMappingValue,
    EDialogDataValue: EDialogDataValue,
    EDialogLayer: EDialogLayer,
    EDialogLayerValue: EDialogLayerValue,
    EDialogLayerValueBackground: EDialogLayerValueBackground,
    EDialogProcessing: EDialogProcessing,
    EDialogShapeButtonLayerValue: EDialogShapeButtonLayerValue,
    EDialogSnap: EDialogSnap,
    EDialogTableColumn: EDialogTableColumn,
    EEDITOR_BUTTON_COUNT: EEDITOR_BUTTON_COUNT,
    EEditorAction: EEditorAction,
    EEditorCanvas: EEditorCanvas,
    EEditorCoordinate: EEditorCoordinate,
    EEditorData: EEditorData,
    EEditorDataMapping: EEditorDataMapping,
    EEditorLayer: EEditorLayer,
    EEditorLayerItem: EEditorLayerItem,
    EEditorSearch: EEditorSearch,
    EEditorShape: EEditorShape,
    EEditorShapeButton: EEditorShapeButton,
    EEditorShapeButtonLayer: EEditorShapeButtonLayer,
    EEditorShapeChartLine: EEditorShapeChartLine,
    EEditorShapeTable: EEditorShapeTable,
    EEditorSnap: EEditorSnap,
    EEditorText: EEditorText,
    EEditorTree: EEditorTree,
    EEditorTreeSelection: EEditorTreeSelection,
    EEditorValidation: EEditorValidation,
    EShapeActionExtensionInputType: EShapeActionExtensionInputType,
    EShapeActionExtensions: EShapeActionExtensions,
    EShapeButtonLayer: EShapeButtonLayer,
    EShapeButtonLayerButtonValue: EShapeButtonLayerButtonValue,
    EShapeButtonLayerButtonValueContainer: EShapeButtonLayerButtonValueContainer,
    EShapeButtonLayerIds: EShapeButtonLayerIds,
    EShapeButtonLayers: EShapeButtonLayers,
    EShapeButtons: EShapeButtons,
    EShapeChartAxes: EShapeChartAxes,
    EShapeChartAxis: EShapeChartAxis,
    EShapeChartAxisX: EShapeChartAxisX,
    EShapeChartAxisY: EShapeChartAxisY,
    EShapeChartLine: EShapeChartLine,
    EShapeChartLineActionRuntime: EShapeChartLineActionRuntime,
    EShapeChartLineIds: EShapeChartLineIds,
    EShapeChartLineRuntime: EShapeChartLineRuntime,
    EShapeChartLines: EShapeChartLines,
    EShapeChartTick: EShapeChartTick,
    EShapeChartTickMajor: EShapeChartTickMajor,
    EShapeChartTickMinor: EShapeChartTickMinor,
    EShapeEmbeddedAcceptorEdges: EShapeEmbeddedAcceptorEdges,
    EShapeExtensionFactories: EShapeExtensionFactories,
    EShapeExtensions: EShapeExtensions,
    EShapeInputs: EShapeInputs,
    EShapeTable: EShapeTable,
    EShapeTableActionRuntime: EShapeTableActionRuntime,
    EShapeTableBody: EShapeTableBody,
    EShapeTableBodyRuntime: EShapeTableBodyRuntime,
    EShapeTableCell: EShapeTableCell,
    EShapeTableCellActionValueChangeColor: EShapeTableCellActionValueChangeColor,
    EShapeTableColumn: EShapeTableColumn,
    EShapeTableColumnValue: EShapeTableColumnValue,
    EShapeTableColumnValueBody: EShapeTableColumnValueBody,
    EShapeTableColumnValueHeader: EShapeTableColumnValueHeader,
    EShapeTableColumnValueRuntime: EShapeTableColumnValueRuntime,
    EShapeTableColumnValueType: EShapeTableColumnValueType,
    EShapeTableHeader: EShapeTableHeader,
    EShapeTableHeaderRuntime: EShapeTableHeaderRuntime,
    EShapeTableIds: EShapeTableIds,
    EShapeTableRow: EShapeTableRow,
    EShapeTableRowSelection: EShapeTableRowSelection,
    EShapeTableRowSelectionType: EShapeTableRowSelectionType,
    EShapeTableRuntime: EShapeTableRuntime,
    EShapeTables: EShapeTables,
    EToolGroupImpl: EToolGroupImpl,
    EToolImpl: EToolImpl,
    EToolSelect: EToolSelect,
    EToolSelectArea: EToolSelectArea,
    get EToolSelectMode () { return EToolSelectMode; },
    EToolSelectModifier: EToolSelectModifier,
    EToolSelectModifierContainer: EToolSelectModifierContainer,
    EToolSelectModifierHitArea: EToolSelectModifierHitArea,
    EToolSelectSelection: EToolSelectSelection,
    EToolSelectSelectionUpdatedPart: EToolSelectSelectionUpdatedPart,
    EToolShapeAcceptorEdge: EToolShapeAcceptorEdge,
    EToolShapeAcceptorEdgeRenderer: EToolShapeAcceptorEdgeRenderer,
    EToolShapeCreate: EToolShapeCreate,
    EToolShapeCreateElbowConnector: EToolShapeCreateElbowConnector,
    EToolShapeCreateLine: EToolShapeCreateLine,
    EToolShapeCreateLineConnector: EToolShapeCreateLineConnector,
    EToolShapeCreateLineConnectorPhase: EToolShapeCreateLineConnectorPhase,
    EToolShapeEditLine: EToolShapeEditLine,
    EToolShapeEditLineBase: EToolShapeEditLineBase,
    EToolShapeEditLineConnector: EToolShapeEditLineConnector,
    EToolShapeEditLineHitArea: EToolShapeEditLineHitArea,
    FGraphicEditor: FGraphicEditor,
    FGraphicTester: FGraphicTester,
    FGraphicViewer: FGraphicViewer,
    UtilAjax: UtilAjax,
    UtilCanvas: UtilCanvas,
    UtilCanvasCategory: UtilCanvasCategory,
    UtilCsv: UtilCsv,
    UtilCsvState: UtilCsvState,
    UtilDataValues: UtilDataValues,
    UtilDate: UtilDate,
    UtilHitTest: UtilHitTest,
    UtilShapeAreaSelect: UtilShapeAreaSelect,
    UtilShapeConnectorTransformData: UtilShapeConnectorTransformData,
    UtilShapeConnectorTransforms: UtilShapeConnectorTransforms,
    UtilShapeDeleter: UtilShapeDeleter,
    UtilShapeSearch: UtilShapeSearch,
    UtilShapeTransforms: UtilShapeTransforms,
    getDialogSelectThumbnailNotFound: getDialogSelectThumbnailNotFound,
    getDialogSelectThumbnailSize: getDialogSelectThumbnailSize,
    getShapeTypeTheme: getShapeTypeTheme,
    loadShapeExtensionButton: loadShapeExtensionButton,
    loadShapeExtensionButtonLayer: loadShapeExtensionButtonLayer,
    loadShapeExtensionChartLine: loadShapeExtensionChartLine,
    loadShapeExtensionEmbeddedAcceptorEdge: loadShapeExtensionEmbeddedAcceptorEdge,
    loadShapeExtensionInput: loadShapeExtensionInput,
    loadShapeExtensionTable: loadShapeExtensionTable,
    newDialogSelectWithThumbnails: newDialogSelectWithThumbnails,
    newDialogSelectWithThumbnailsOptions: newDialogSelectWithThumbnailsOptions,
    newDialogTHumbnailNotFound: newDialogTHumbnailNotFound,
    newGraphicTester: newGraphicTester,
    setDialogSelectThumbnailSize: setDialogSelectThumbnailSize,
    toGraphicTesterObject: toGraphicTesterObject,
    toGraphicTesterSerialized: toGraphicTesterSerialized,
    toGraphicTesterSimple: toGraphicTesterSimple,
    toShapeLabel: toShapeLabel,
    toShapeTypeLabel: toShapeTypeLabel
  };

  var global = window;
  global.wcardinal = global.wcardinal || {};
  global.wcardinal.geditor = geditor;

})(wcardinal.ui, PIXI);
